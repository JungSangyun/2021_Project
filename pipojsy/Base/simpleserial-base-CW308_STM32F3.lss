
simpleserial-base-CW308_STM32F3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000016ac  08000188  08000188  00010188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  08001834  08001834  00011834  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800184c  0800184c  00020164  2**0
                  CONTENTS
  4 .ARM          00000000  0800184c  0800184c  00020164  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800184c  0800184c  00020164  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800184c  0800184c  0001184c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001850  08001850  00011850  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000164  20000000  08001854  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001f8  20000164  080019b8  00020164  2**2
                  ALLOC
 10 ._user_heap_stack 00000404  2000035c  080019b8  0002035c  2**0
                  ALLOC
 11 .ARM.attributes 0000002a  00000000  00000000  00020164  2**0
                  CONTENTS, READONLY
 12 .comment      0000002b  00000000  00000000  0002018e  2**0
                  CONTENTS, READONLY
 13 .debug_info   00008f44  00000000  00000000  000201b9  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_abbrev 00001cb6  00000000  00000000  000290fd  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_loc    000022b6  00000000  00000000  0002adb3  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_aranges 00000338  00000000  00000000  0002d069  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_ranges 00000428  00000000  00000000  0002d3a1  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_line   00001e30  00000000  00000000  0002d7c9  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_str    00001d01  00000000  00000000  0002f5f9  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .debug_frame  00000770  00000000  00000000  000312fc  2**2
                  CONTENTS, READONLY, DEBUGGING
 21 .stab         0000015c  00000000  00000000  00031a6c  2**2
                  CONTENTS, READONLY, DEBUGGING
 22 .stabstr      00000078  00000000  00000000  00031bc8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <deregister_tm_clones>:
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8000188:	4b04      	ldr	r3, [pc, #16]	; (800019c <deregister_tm_clones+0x14>)
 800018a:	4805      	ldr	r0, [pc, #20]	; (80001a0 <deregister_tm_clones+0x18>)
 800018c:	1a1b      	subs	r3, r3, r0
 800018e:	2b06      	cmp	r3, #6
 8000190:	d902      	bls.n	8000198 <deregister_tm_clones+0x10>
 8000192:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <deregister_tm_clones+0x1c>)
 8000194:	b103      	cbz	r3, 8000198 <deregister_tm_clones+0x10>
 8000196:	4718      	bx	r3
 8000198:	4770      	bx	lr
 800019a:	bf00      	nop
 800019c:	20000167 	.word	0x20000167
 80001a0:	20000164 	.word	0x20000164
 80001a4:	00000000 	.word	0x00000000

080001a8 <register_tm_clones>:
 80001a8:	4905      	ldr	r1, [pc, #20]	; (80001c0 <register_tm_clones+0x18>)
 80001aa:	4806      	ldr	r0, [pc, #24]	; (80001c4 <register_tm_clones+0x1c>)
 80001ac:	1a09      	subs	r1, r1, r0
 80001ae:	1089      	asrs	r1, r1, #2
 80001b0:	eb01 71d1 	add.w	r1, r1, r1, lsr #31
 80001b4:	1049      	asrs	r1, r1, #1
 80001b6:	d002      	beq.n	80001be <register_tm_clones+0x16>
 80001b8:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <register_tm_clones+0x20>)
 80001ba:	b103      	cbz	r3, 80001be <register_tm_clones+0x16>
 80001bc:	4718      	bx	r3
 80001be:	4770      	bx	lr
 80001c0:	20000164 	.word	0x20000164
 80001c4:	20000164 	.word	0x20000164
 80001c8:	00000000 	.word	0x00000000

080001cc <__do_global_dtors_aux>:
 80001cc:	b510      	push	{r4, lr}
 80001ce:	4c06      	ldr	r4, [pc, #24]	; (80001e8 <__do_global_dtors_aux+0x1c>)
 80001d0:	7823      	ldrb	r3, [r4, #0]
 80001d2:	b943      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x1a>
 80001d4:	f7ff ffd8 	bl	8000188 <deregister_tm_clones>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x20>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x16>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x24>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000164 	.word	0x20000164
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800181c 	.word	0x0800181c

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b08      	ldr	r3, [pc, #32]	; (8000218 <frame_dummy+0x24>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4908      	ldr	r1, [pc, #32]	; (800021c <frame_dummy+0x28>)
 80001fc:	4808      	ldr	r0, [pc, #32]	; (8000220 <frame_dummy+0x2c>)
 80001fe:	f3af 8000 	nop.w
 8000202:	4808      	ldr	r0, [pc, #32]	; (8000224 <frame_dummy+0x30>)
 8000204:	6803      	ldr	r3, [r0, #0]
 8000206:	b913      	cbnz	r3, 800020e <frame_dummy+0x1a>
 8000208:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800020c:	e7cc      	b.n	80001a8 <register_tm_clones>
 800020e:	4b06      	ldr	r3, [pc, #24]	; (8000228 <frame_dummy+0x34>)
 8000210:	2b00      	cmp	r3, #0
 8000212:	d0f9      	beq.n	8000208 <frame_dummy+0x14>
 8000214:	4798      	blx	r3
 8000216:	e7f7      	b.n	8000208 <frame_dummy+0x14>
 8000218:	00000000 	.word	0x00000000
 800021c:	20000168 	.word	0x20000168
 8000220:	0800181c 	.word	0x0800181c
 8000224:	20000164 	.word	0x20000164
 8000228:	00000000 	.word	0x00000000

0800022c <__errno>:
 800022c:	4b01      	ldr	r3, [pc, #4]	; (8000234 <__errno+0x8>)
 800022e:	6818      	ldr	r0, [r3, #0]
 8000230:	4770      	bx	lr
 8000232:	bf00      	nop
 8000234:	20000100 	.word	0x20000100

08000238 <__libc_init_array>:
 8000238:	b570      	push	{r4, r5, r6, lr}
 800023a:	4e0f      	ldr	r6, [pc, #60]	; (8000278 <__libc_init_array+0x40>)
 800023c:	4d0f      	ldr	r5, [pc, #60]	; (800027c <__libc_init_array+0x44>)
 800023e:	1b76      	subs	r6, r6, r5
 8000240:	10b6      	asrs	r6, r6, #2
 8000242:	bf18      	it	ne
 8000244:	2400      	movne	r4, #0
 8000246:	d005      	beq.n	8000254 <__libc_init_array+0x1c>
 8000248:	3401      	adds	r4, #1
 800024a:	f855 3b04 	ldr.w	r3, [r5], #4
 800024e:	4798      	blx	r3
 8000250:	42a6      	cmp	r6, r4
 8000252:	d1f9      	bne.n	8000248 <__libc_init_array+0x10>
 8000254:	4e0a      	ldr	r6, [pc, #40]	; (8000280 <__libc_init_array+0x48>)
 8000256:	4d0b      	ldr	r5, [pc, #44]	; (8000284 <__libc_init_array+0x4c>)
 8000258:	1b76      	subs	r6, r6, r5
 800025a:	f001 fadf 	bl	800181c <_init>
 800025e:	10b6      	asrs	r6, r6, #2
 8000260:	bf18      	it	ne
 8000262:	2400      	movne	r4, #0
 8000264:	d006      	beq.n	8000274 <__libc_init_array+0x3c>
 8000266:	3401      	adds	r4, #1
 8000268:	f855 3b04 	ldr.w	r3, [r5], #4
 800026c:	4798      	blx	r3
 800026e:	42a6      	cmp	r6, r4
 8000270:	d1f9      	bne.n	8000266 <__libc_init_array+0x2e>
 8000272:	bd70      	pop	{r4, r5, r6, pc}
 8000274:	bd70      	pop	{r4, r5, r6, pc}
 8000276:	bf00      	nop
 8000278:	0800184c 	.word	0x0800184c
 800027c:	0800184c 	.word	0x0800184c
 8000280:	08001850 	.word	0x08001850
 8000284:	0800184c 	.word	0x0800184c

08000288 <srand>:
 8000288:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800028a:	4b14      	ldr	r3, [pc, #80]	; (80002dc <srand+0x54>)
 800028c:	681c      	ldr	r4, [r3, #0]
 800028e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8000290:	4605      	mov	r5, r0
 8000292:	b11b      	cbz	r3, 800029c <srand+0x14>
 8000294:	2200      	movs	r2, #0
 8000296:	611d      	str	r5, [r3, #16]
 8000298:	615a      	str	r2, [r3, #20]
 800029a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800029c:	2018      	movs	r0, #24
 800029e:	f000 f88d 	bl	80003bc <malloc>
 80002a2:	2201      	movs	r2, #1
 80002a4:	2300      	movs	r3, #0
 80002a6:	63a0      	str	r0, [r4, #56]	; 0x38
 80002a8:	e9c0 2304 	strd	r2, r3, [r0, #16]
 80002ac:	f243 330e 	movw	r3, #13070	; 0x330e
 80002b0:	8003      	strh	r3, [r0, #0]
 80002b2:	230b      	movs	r3, #11
 80002b4:	8183      	strh	r3, [r0, #12]
 80002b6:	2205      	movs	r2, #5
 80002b8:	4603      	mov	r3, r0
 80002ba:	8142      	strh	r2, [r0, #10]
 80002bc:	f64a 37cd 	movw	r7, #43981	; 0xabcd
 80002c0:	f241 2634 	movw	r6, #4660	; 0x1234
 80002c4:	f24e 646d 	movw	r4, #58989	; 0xe66d
 80002c8:	f64d 61ec 	movw	r1, #57068	; 0xdeec
 80002cc:	2200      	movs	r2, #0
 80002ce:	8047      	strh	r7, [r0, #2]
 80002d0:	8086      	strh	r6, [r0, #4]
 80002d2:	80c4      	strh	r4, [r0, #6]
 80002d4:	8101      	strh	r1, [r0, #8]
 80002d6:	611d      	str	r5, [r3, #16]
 80002d8:	615a      	str	r2, [r3, #20]
 80002da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80002dc:	20000100 	.word	0x20000100

080002e0 <rand>:
 80002e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80002e2:	4b1f      	ldr	r3, [pc, #124]	; (8000360 <rand+0x80>)
 80002e4:	681c      	ldr	r4, [r3, #0]
 80002e6:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80002e8:	b191      	cbz	r1, 8000310 <rand+0x30>
 80002ea:	690b      	ldr	r3, [r1, #16]
 80002ec:	4c1d      	ldr	r4, [pc, #116]	; (8000364 <rand+0x84>)
 80002ee:	6948      	ldr	r0, [r1, #20]
 80002f0:	4a1d      	ldr	r2, [pc, #116]	; (8000368 <rand+0x88>)
 80002f2:	fb04 f403 	mul.w	r4, r4, r3
 80002f6:	fb02 4000 	mla	r0, r2, r0, r4
 80002fa:	fba3 2302 	umull	r2, r3, r3, r2
 80002fe:	3201      	adds	r2, #1
 8000300:	4403      	add	r3, r0
 8000302:	f143 0300 	adc.w	r3, r3, #0
 8000306:	f023 4000 	bic.w	r0, r3, #2147483648	; 0x80000000
 800030a:	e9c1 2304 	strd	r2, r3, [r1, #16]
 800030e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000310:	2018      	movs	r0, #24
 8000312:	f000 f853 	bl	80003bc <malloc>
 8000316:	a310      	add	r3, pc, #64	; (adr r3, 8000358 <rand+0x78>)
 8000318:	e9d3 2300 	ldrd	r2, r3, [r3]
 800031c:	4601      	mov	r1, r0
 800031e:	63a0      	str	r0, [r4, #56]	; 0x38
 8000320:	2601      	movs	r6, #1
 8000322:	2700      	movs	r7, #0
 8000324:	f243 350e 	movw	r5, #13070	; 0x330e
 8000328:	f64a 34cd 	movw	r4, #43981	; 0xabcd
 800032c:	e9c0 6704 	strd	r6, r7, [r0, #16]
 8000330:	f241 2034 	movw	r0, #4660	; 0x1234
 8000334:	f24e 676d 	movw	r7, #58989	; 0xe66d
 8000338:	f64d 66ec 	movw	r6, #57068	; 0xdeec
 800033c:	800d      	strh	r5, [r1, #0]
 800033e:	804c      	strh	r4, [r1, #2]
 8000340:	2505      	movs	r5, #5
 8000342:	240b      	movs	r4, #11
 8000344:	8088      	strh	r0, [r1, #4]
 8000346:	80cf      	strh	r7, [r1, #6]
 8000348:	4806      	ldr	r0, [pc, #24]	; (8000364 <rand+0x84>)
 800034a:	810e      	strh	r6, [r1, #8]
 800034c:	814d      	strh	r5, [r1, #10]
 800034e:	818c      	strh	r4, [r1, #12]
 8000350:	e9c1 2304 	strd	r2, r3, [r1, #16]
 8000354:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000356:	bf00      	nop
 8000358:	4c957f2e 	.word	0x4c957f2e
 800035c:	5851f42d 	.word	0x5851f42d
 8000360:	20000100 	.word	0x20000100
 8000364:	5851f42d 	.word	0x5851f42d
 8000368:	4c957f2d 	.word	0x4c957f2d

0800036c <time>:
 800036c:	b510      	push	{r4, lr}
 800036e:	4b08      	ldr	r3, [pc, #32]	; (8000390 <time+0x24>)
 8000370:	b082      	sub	sp, #8
 8000372:	4604      	mov	r4, r0
 8000374:	2200      	movs	r2, #0
 8000376:	6818      	ldr	r0, [r3, #0]
 8000378:	4669      	mov	r1, sp
 800037a:	f000 f80b 	bl	8000394 <_gettimeofday_r>
 800037e:	2800      	cmp	r0, #0
 8000380:	bfac      	ite	ge
 8000382:	9800      	ldrge	r0, [sp, #0]
 8000384:	f04f 30ff 	movlt.w	r0, #4294967295	; 0xffffffff
 8000388:	b104      	cbz	r4, 800038c <time+0x20>
 800038a:	6020      	str	r0, [r4, #0]
 800038c:	b002      	add	sp, #8
 800038e:	bd10      	pop	{r4, pc}
 8000390:	20000100 	.word	0x20000100

08000394 <_gettimeofday_r>:
 8000394:	b538      	push	{r3, r4, r5, lr}
 8000396:	460b      	mov	r3, r1
 8000398:	4c07      	ldr	r4, [pc, #28]	; (80003b8 <_gettimeofday_r+0x24>)
 800039a:	4605      	mov	r5, r0
 800039c:	4611      	mov	r1, r2
 800039e:	4618      	mov	r0, r3
 80003a0:	2300      	movs	r3, #0
 80003a2:	6023      	str	r3, [r4, #0]
 80003a4:	f000 f8d0 	bl	8000548 <_gettimeofday>
 80003a8:	1c43      	adds	r3, r0, #1
 80003aa:	d000      	beq.n	80003ae <_gettimeofday_r+0x1a>
 80003ac:	bd38      	pop	{r3, r4, r5, pc}
 80003ae:	6823      	ldr	r3, [r4, #0]
 80003b0:	2b00      	cmp	r3, #0
 80003b2:	d0fb      	beq.n	80003ac <_gettimeofday_r+0x18>
 80003b4:	602b      	str	r3, [r5, #0]
 80003b6:	bd38      	pop	{r3, r4, r5, pc}
 80003b8:	20000358 	.word	0x20000358

080003bc <malloc>:
 80003bc:	4b02      	ldr	r3, [pc, #8]	; (80003c8 <malloc+0xc>)
 80003be:	4601      	mov	r1, r0
 80003c0:	6818      	ldr	r0, [r3, #0]
 80003c2:	f000 b851 	b.w	8000468 <_malloc_r>
 80003c6:	bf00      	nop
 80003c8:	20000100 	.word	0x20000100

080003cc <free>:
 80003cc:	4b02      	ldr	r3, [pc, #8]	; (80003d8 <free+0xc>)
 80003ce:	4601      	mov	r1, r0
 80003d0:	6818      	ldr	r0, [r3, #0]
 80003d2:	f000 b803 	b.w	80003dc <_free_r>
 80003d6:	bf00      	nop
 80003d8:	20000100 	.word	0x20000100

080003dc <_free_r>:
 80003dc:	b430      	push	{r4, r5}
 80003de:	b181      	cbz	r1, 8000402 <_free_r+0x26>
 80003e0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80003e4:	3904      	subs	r1, #4
 80003e6:	2b00      	cmp	r3, #0
 80003e8:	bfb8      	it	lt
 80003ea:	18c9      	addlt	r1, r1, r3
 80003ec:	4b1d      	ldr	r3, [pc, #116]	; (8000464 <_free_r+0x88>)
 80003ee:	681a      	ldr	r2, [r3, #0]
 80003f0:	b12a      	cbz	r2, 80003fe <_free_r+0x22>
 80003f2:	428a      	cmp	r2, r1
 80003f4:	d90a      	bls.n	800040c <_free_r+0x30>
 80003f6:	6808      	ldr	r0, [r1, #0]
 80003f8:	180c      	adds	r4, r1, r0
 80003fa:	42a2      	cmp	r2, r4
 80003fc:	d025      	beq.n	800044a <_free_r+0x6e>
 80003fe:	604a      	str	r2, [r1, #4]
 8000400:	6019      	str	r1, [r3, #0]
 8000402:	bc30      	pop	{r4, r5}
 8000404:	4770      	bx	lr
 8000406:	428b      	cmp	r3, r1
 8000408:	d803      	bhi.n	8000412 <_free_r+0x36>
 800040a:	461a      	mov	r2, r3
 800040c:	6853      	ldr	r3, [r2, #4]
 800040e:	2b00      	cmp	r3, #0
 8000410:	d1f9      	bne.n	8000406 <_free_r+0x2a>
 8000412:	6814      	ldr	r4, [r2, #0]
 8000414:	1915      	adds	r5, r2, r4
 8000416:	428d      	cmp	r5, r1
 8000418:	d00c      	beq.n	8000434 <_free_r+0x58>
 800041a:	d807      	bhi.n	800042c <_free_r+0x50>
 800041c:	6808      	ldr	r0, [r1, #0]
 800041e:	180c      	adds	r4, r1, r0
 8000420:	429c      	cmp	r4, r3
 8000422:	d018      	beq.n	8000456 <_free_r+0x7a>
 8000424:	604b      	str	r3, [r1, #4]
 8000426:	bc30      	pop	{r4, r5}
 8000428:	6051      	str	r1, [r2, #4]
 800042a:	4770      	bx	lr
 800042c:	230c      	movs	r3, #12
 800042e:	6003      	str	r3, [r0, #0]
 8000430:	bc30      	pop	{r4, r5}
 8000432:	4770      	bx	lr
 8000434:	6809      	ldr	r1, [r1, #0]
 8000436:	440c      	add	r4, r1
 8000438:	1911      	adds	r1, r2, r4
 800043a:	4299      	cmp	r1, r3
 800043c:	6014      	str	r4, [r2, #0]
 800043e:	d1e0      	bne.n	8000402 <_free_r+0x26>
 8000440:	cb0a      	ldmia	r3, {r1, r3}
 8000442:	440c      	add	r4, r1
 8000444:	6053      	str	r3, [r2, #4]
 8000446:	6014      	str	r4, [r2, #0]
 8000448:	e7db      	b.n	8000402 <_free_r+0x26>
 800044a:	6814      	ldr	r4, [r2, #0]
 800044c:	6852      	ldr	r2, [r2, #4]
 800044e:	604a      	str	r2, [r1, #4]
 8000450:	4420      	add	r0, r4
 8000452:	6008      	str	r0, [r1, #0]
 8000454:	e7d4      	b.n	8000400 <_free_r+0x24>
 8000456:	681c      	ldr	r4, [r3, #0]
 8000458:	685b      	ldr	r3, [r3, #4]
 800045a:	604b      	str	r3, [r1, #4]
 800045c:	4420      	add	r0, r4
 800045e:	6008      	str	r0, [r1, #0]
 8000460:	6051      	str	r1, [r2, #4]
 8000462:	e7ce      	b.n	8000402 <_free_r+0x26>
 8000464:	200002e0 	.word	0x200002e0

08000468 <_malloc_r>:
 8000468:	b570      	push	{r4, r5, r6, lr}
 800046a:	1ccd      	adds	r5, r1, #3
 800046c:	f025 0503 	bic.w	r5, r5, #3
 8000470:	3508      	adds	r5, #8
 8000472:	2d0c      	cmp	r5, #12
 8000474:	bf38      	it	cc
 8000476:	250c      	movcc	r5, #12
 8000478:	2d00      	cmp	r5, #0
 800047a:	4606      	mov	r6, r0
 800047c:	db3b      	blt.n	80004f6 <_malloc_r+0x8e>
 800047e:	42a9      	cmp	r1, r5
 8000480:	d839      	bhi.n	80004f6 <_malloc_r+0x8e>
 8000482:	4927      	ldr	r1, [pc, #156]	; (8000520 <_malloc_r+0xb8>)
 8000484:	680a      	ldr	r2, [r1, #0]
 8000486:	b152      	cbz	r2, 800049e <_malloc_r+0x36>
 8000488:	6813      	ldr	r3, [r2, #0]
 800048a:	1b5b      	subs	r3, r3, r5
 800048c:	d404      	bmi.n	8000498 <_malloc_r+0x30>
 800048e:	e036      	b.n	80004fe <_malloc_r+0x96>
 8000490:	6823      	ldr	r3, [r4, #0]
 8000492:	1b5b      	subs	r3, r3, r5
 8000494:	d51a      	bpl.n	80004cc <_malloc_r+0x64>
 8000496:	4622      	mov	r2, r4
 8000498:	6854      	ldr	r4, [r2, #4]
 800049a:	2c00      	cmp	r4, #0
 800049c:	d1f8      	bne.n	8000490 <_malloc_r+0x28>
 800049e:	6849      	ldr	r1, [r1, #4]
 80004a0:	4c1f      	ldr	r4, [pc, #124]	; (8000520 <_malloc_r+0xb8>)
 80004a2:	2900      	cmp	r1, #0
 80004a4:	d036      	beq.n	8000514 <_malloc_r+0xac>
 80004a6:	4629      	mov	r1, r5
 80004a8:	4630      	mov	r0, r6
 80004aa:	f000 f83b 	bl	8000524 <_sbrk_r>
 80004ae:	1c43      	adds	r3, r0, #1
 80004b0:	d021      	beq.n	80004f6 <_malloc_r+0x8e>
 80004b2:	1cc4      	adds	r4, r0, #3
 80004b4:	f024 0403 	bic.w	r4, r4, #3
 80004b8:	42a0      	cmp	r0, r4
 80004ba:	d005      	beq.n	80004c8 <_malloc_r+0x60>
 80004bc:	1a21      	subs	r1, r4, r0
 80004be:	4630      	mov	r0, r6
 80004c0:	f000 f830 	bl	8000524 <_sbrk_r>
 80004c4:	3001      	adds	r0, #1
 80004c6:	d016      	beq.n	80004f6 <_malloc_r+0x8e>
 80004c8:	6025      	str	r5, [r4, #0]
 80004ca:	e004      	b.n	80004d6 <_malloc_r+0x6e>
 80004cc:	2b0b      	cmp	r3, #11
 80004ce:	d90d      	bls.n	80004ec <_malloc_r+0x84>
 80004d0:	6023      	str	r3, [r4, #0]
 80004d2:	441c      	add	r4, r3
 80004d4:	6025      	str	r5, [r4, #0]
 80004d6:	f104 000b 	add.w	r0, r4, #11
 80004da:	f020 0007 	bic.w	r0, r0, #7
 80004de:	1d23      	adds	r3, r4, #4
 80004e0:	1ac3      	subs	r3, r0, r3
 80004e2:	d002      	beq.n	80004ea <_malloc_r+0x82>
 80004e4:	425a      	negs	r2, r3
 80004e6:	50e2      	str	r2, [r4, r3]
 80004e8:	bd70      	pop	{r4, r5, r6, pc}
 80004ea:	bd70      	pop	{r4, r5, r6, pc}
 80004ec:	4294      	cmp	r4, r2
 80004ee:	d00e      	beq.n	800050e <_malloc_r+0xa6>
 80004f0:	6863      	ldr	r3, [r4, #4]
 80004f2:	6053      	str	r3, [r2, #4]
 80004f4:	e7ef      	b.n	80004d6 <_malloc_r+0x6e>
 80004f6:	230c      	movs	r3, #12
 80004f8:	6033      	str	r3, [r6, #0]
 80004fa:	2000      	movs	r0, #0
 80004fc:	bd70      	pop	{r4, r5, r6, pc}
 80004fe:	2b0b      	cmp	r3, #11
 8000500:	d803      	bhi.n	800050a <_malloc_r+0xa2>
 8000502:	6853      	ldr	r3, [r2, #4]
 8000504:	4614      	mov	r4, r2
 8000506:	600b      	str	r3, [r1, #0]
 8000508:	e7e5      	b.n	80004d6 <_malloc_r+0x6e>
 800050a:	4614      	mov	r4, r2
 800050c:	e7e0      	b.n	80004d0 <_malloc_r+0x68>
 800050e:	4613      	mov	r3, r2
 8000510:	4614      	mov	r4, r2
 8000512:	e7f8      	b.n	8000506 <_malloc_r+0x9e>
 8000514:	4630      	mov	r0, r6
 8000516:	f000 f805 	bl	8000524 <_sbrk_r>
 800051a:	6060      	str	r0, [r4, #4]
 800051c:	e7c3      	b.n	80004a6 <_malloc_r+0x3e>
 800051e:	bf00      	nop
 8000520:	200002e0 	.word	0x200002e0

08000524 <_sbrk_r>:
 8000524:	b538      	push	{r3, r4, r5, lr}
 8000526:	4c07      	ldr	r4, [pc, #28]	; (8000544 <_sbrk_r+0x20>)
 8000528:	2300      	movs	r3, #0
 800052a:	4605      	mov	r5, r0
 800052c:	4608      	mov	r0, r1
 800052e:	6023      	str	r3, [r4, #0]
 8000530:	f001 f934 	bl	800179c <_sbrk>
 8000534:	1c43      	adds	r3, r0, #1
 8000536:	d000      	beq.n	800053a <_sbrk_r+0x16>
 8000538:	bd38      	pop	{r3, r4, r5, pc}
 800053a:	6823      	ldr	r3, [r4, #0]
 800053c:	2b00      	cmp	r3, #0
 800053e:	d0fb      	beq.n	8000538 <_sbrk_r+0x14>
 8000540:	602b      	str	r3, [r5, #0]
 8000542:	bd38      	pop	{r3, r4, r5, pc}
 8000544:	20000358 	.word	0x20000358

08000548 <_gettimeofday>:
 8000548:	4b02      	ldr	r3, [pc, #8]	; (8000554 <_gettimeofday+0xc>)
 800054a:	2258      	movs	r2, #88	; 0x58
 800054c:	601a      	str	r2, [r3, #0]
 800054e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000552:	4770      	bx	lr
 8000554:	20000358 	.word	0x20000358

08000558 <reset>:

uint8_t reset(uint8_t* x)
{
	// Reset key here if needed
	return 0x00;
}
 8000558:	2000      	movs	r0, #0
 800055a:	4770      	bx	lr

0800055c <get_key>:
 800055c:	2000      	movs	r0, #0
 800055e:	4770      	bx	lr

08000560 <ROUND_KEY_GEN>:
void ROUND_KEY_GEN(void) {
 8000560:	b538      	push	{r3, r4, r5, lr}
	srand(time(NULL));
 8000562:	2000      	movs	r0, #0
 8000564:	f7ff ff02 	bl	800036c <time>
 8000568:	f7ff fe8e 	bl	8000288 <srand>
			MASTER_KEY[INT_NUM*i + j] = rand() | (rand() << 16);	
 800056c:	f7ff feb8 	bl	80002e0 <rand>
 8000570:	4605      	mov	r5, r0
 8000572:	f7ff feb5 	bl	80002e0 <rand>
 8000576:	4c20      	ldr	r4, [pc, #128]	; (80005f8 <ROUND_KEY_GEN+0x98>)
 8000578:	ea45 4000 	orr.w	r0, r5, r0, lsl #16
 800057c:	6020      	str	r0, [r4, #0]
 800057e:	f7ff feaf 	bl	80002e0 <rand>
 8000582:	4605      	mov	r5, r0
 8000584:	f7ff feac 	bl	80002e0 <rand>
 8000588:	ea45 4000 	orr.w	r0, r5, r0, lsl #16
 800058c:	6060      	str	r0, [r4, #4]
 800058e:	f7ff fea7 	bl	80002e0 <rand>
 8000592:	4605      	mov	r5, r0
 8000594:	f7ff fea4 	bl	80002e0 <rand>
 8000598:	ea45 4000 	orr.w	r0, r5, r0, lsl #16
 800059c:	60a0      	str	r0, [r4, #8]
 800059e:	f7ff fe9f 	bl	80002e0 <rand>
 80005a2:	f7ff fe9d 	bl	80002e0 <rand>
	MASTER_KEY[1] = 0x7E1D20AD;
 80005a6:	4b15      	ldr	r3, [pc, #84]	; (80005fc <ROUND_KEY_GEN+0x9c>)
 80005a8:	4815      	ldr	r0, [pc, #84]	; (8000600 <ROUND_KEY_GEN+0xa0>)
 80005aa:	e884 0009 	stmia.w	r4, {r0, r3}
	MASTER_KEY[2] = 0x779428D2;
 80005ae:	4b15      	ldr	r3, [pc, #84]	; (8000604 <ROUND_KEY_GEN+0xa4>)
 80005b0:	60a3      	str	r3, [r4, #8]
	MASTER_KEY[3] = 0x6DC416DD;
 80005b2:	f1a3 631d 	sub.w	r3, r3, #164626432	; 0x9d00000
 80005b6:	f5a3 538f 	sub.w	r3, r3, #4576	; 0x11e0
 80005ba:	3b15      	subs	r3, #21
 80005bc:	60e3      	str	r3, [r4, #12]
 80005be:	2201      	movs	r2, #1
	u32 RCON = 0;
 80005c0:	2300      	movs	r3, #0
			ROUND_KEY[INT_NUM*i + j] = MASTER_KEY[(INT_NUM*i + j) % (MASTER_KEY_SIZE*INT_NUM)];		
 80005c2:	f104 0110 	add.w	r1, r4, #16
 80005c6:	0058      	lsls	r0, r3, #1
 80005c8:	f000 0003 	and.w	r0, r0, #3
 80005cc:	f854 0020 	ldr.w	r0, [r4, r0, lsl #2]
 80005d0:	f841 0033 	str.w	r0, [r1, r3, lsl #3]
 80005d4:	f002 0003 	and.w	r0, r2, #3
 80005d8:	f854 0020 	ldr.w	r0, [r4, r0, lsl #2]
 80005dc:	f841 0022 	str.w	r0, [r1, r2, lsl #2]
		ROUND_KEY[INT_NUM*i] ^= RCON;
 80005e0:	f851 0033 	ldr.w	r0, [r1, r3, lsl #3]
 80005e4:	4058      	eors	r0, r3
 80005e6:	f841 0033 	str.w	r0, [r1, r3, lsl #3]
		RCON++;
 80005ea:	3301      	adds	r3, #1
	for (i = 0; i < ROUND + 1; i++) {
 80005ec:	2b0e      	cmp	r3, #14
 80005ee:	f102 0202 	add.w	r2, r2, #2
 80005f2:	d1e8      	bne.n	80005c6 <ROUND_KEY_GEN+0x66>
}
 80005f4:	bd38      	pop	{r3, r4, r5, pc}
 80005f6:	bf00      	nop
 80005f8:	20000180 	.word	0x20000180
 80005fc:	7e1d20ad 	.word	0x7e1d20ad
 8000600:	2e152297 	.word	0x2e152297
 8000604:	779428d2 	.word	0x779428d2

08000608 <keyadd>:
	val[0] ^= rk[0];
 8000608:	780b      	ldrb	r3, [r1, #0]
 800060a:	7802      	ldrb	r2, [r0, #0]
 800060c:	4053      	eors	r3, r2
 800060e:	7003      	strb	r3, [r0, #0]
	val[1] ^= rk[1];
 8000610:	784b      	ldrb	r3, [r1, #1]
 8000612:	7842      	ldrb	r2, [r0, #1]
 8000614:	4053      	eors	r3, r2
 8000616:	7043      	strb	r3, [r0, #1]
	val[2] ^= rk[2];
 8000618:	788b      	ldrb	r3, [r1, #2]
 800061a:	7882      	ldrb	r2, [r0, #2]
 800061c:	4053      	eors	r3, r2
 800061e:	7083      	strb	r3, [r0, #2]
	val[3] ^= rk[3];
 8000620:	78cb      	ldrb	r3, [r1, #3]
 8000622:	78c2      	ldrb	r2, [r0, #3]
 8000624:	4053      	eors	r3, r2
 8000626:	70c3      	strb	r3, [r0, #3]
	val[4] ^= rk[4];
 8000628:	790b      	ldrb	r3, [r1, #4]
 800062a:	7902      	ldrb	r2, [r0, #4]
 800062c:	4053      	eors	r3, r2
 800062e:	7103      	strb	r3, [r0, #4]
	val[5] ^= rk[5];
 8000630:	794b      	ldrb	r3, [r1, #5]
 8000632:	7942      	ldrb	r2, [r0, #5]
 8000634:	4053      	eors	r3, r2
 8000636:	7143      	strb	r3, [r0, #5]
	val[6] ^= rk[6];
 8000638:	7982      	ldrb	r2, [r0, #6]
 800063a:	798b      	ldrb	r3, [r1, #6]
 800063c:	4053      	eors	r3, r2
 800063e:	7183      	strb	r3, [r0, #6]
	val[7] ^= rk[7];
 8000640:	79c2      	ldrb	r2, [r0, #7]
 8000642:	79cb      	ldrb	r3, [r1, #7]
 8000644:	4053      	eors	r3, r2
 8000646:	71c3      	strb	r3, [r0, #7]
 8000648:	4770      	bx	lr

0800064a <convert>:
{
 800064a:	b573      	push	{r0, r1, r4, r5, r6, lr}
	u8 T[8] = { 0, };
 800064c:	2300      	movs	r3, #0
 800064e:	9300      	str	r3, [sp, #0]
 8000650:	9301      	str	r3, [sp, #4]
			T[i] |= (((X[j] & (1<<i))>>i) << j);
 8000652:	2601      	movs	r6, #1
 8000654:	f81d 4003 	ldrb.w	r4, [sp, r3]
 8000658:	fa06 f503 	lsl.w	r5, r6, r3
 800065c:	2100      	movs	r1, #0
 800065e:	5c42      	ldrb	r2, [r0, r1]
 8000660:	402a      	ands	r2, r5
 8000662:	411a      	asrs	r2, r3
 8000664:	408a      	lsls	r2, r1
		for (j = 0; j < 8; j++) 
 8000666:	3101      	adds	r1, #1
			T[i] |= (((X[j] & (1<<i))>>i) << j);
 8000668:	4314      	orrs	r4, r2
		for (j = 0; j < 8; j++) 
 800066a:	2908      	cmp	r1, #8
			T[i] |= (((X[j] & (1<<i))>>i) << j);
 800066c:	b2e4      	uxtb	r4, r4
		for (j = 0; j < 8; j++) 
 800066e:	d1f6      	bne.n	800065e <convert+0x14>
 8000670:	f80d 4003 	strb.w	r4, [sp, r3]
	for (i = 0; i < 8; i++) 
 8000674:	3301      	adds	r3, #1
 8000676:	2b08      	cmp	r3, #8
 8000678:	d1ec      	bne.n	8000654 <convert+0xa>
 800067a:	2300      	movs	r3, #0
		X[i] = T[i];	
 800067c:	f81d 2003 	ldrb.w	r2, [sp, r3]
 8000680:	54c2      	strb	r2, [r0, r3]
	for (i = 0; i < 8; i++)
 8000682:	3301      	adds	r3, #1
 8000684:	2b08      	cmp	r3, #8
 8000686:	d1f9      	bne.n	800067c <convert+0x32>
}
 8000688:	b002      	add	sp, #8
 800068a:	bd70      	pop	{r4, r5, r6, pc}

0800068c <sbox_TLU>:
void sbox_TLU(u8 *X) {
 800068c:	b510      	push	{r4, lr}
 800068e:	4604      	mov	r4, r0
	convert(X);
 8000690:	f7ff ffdb 	bl	800064a <convert>
 8000694:	1e43      	subs	r3, r0, #1
 8000696:	1dc2      	adds	r2, r0, #7
		X[i] = Sbox[X[i]];
 8000698:	4805      	ldr	r0, [pc, #20]	; (80006b0 <sbox_TLU+0x24>)
 800069a:	f813 1f01 	ldrb.w	r1, [r3, #1]!
 800069e:	5c41      	ldrb	r1, [r0, r1]
 80006a0:	7019      	strb	r1, [r3, #0]
	for (i = 0; i < 8; i++)
 80006a2:	4293      	cmp	r3, r2
 80006a4:	d1f9      	bne.n	800069a <sbox_TLU+0xe>
	convert(X);
 80006a6:	4620      	mov	r0, r4
}
 80006a8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	convert(X);
 80006ac:	f7ff bfcd 	b.w	800064a <convert>
 80006b0:	20000000 	.word	0x20000000

080006b4 <pbox>:
	X[1] = ((X[1] << 7)) | ((X[1] >> 1));
 80006b4:	7842      	ldrb	r2, [r0, #1]
 80006b6:	0853      	lsrs	r3, r2, #1
 80006b8:	ea43 13c2 	orr.w	r3, r3, r2, lsl #7
	X[2] = ((X[2] << 4)) | ((X[2] >> 4));
 80006bc:	7882      	ldrb	r2, [r0, #2]
	X[1] = ((X[1] << 7)) | ((X[1] >> 1));
 80006be:	7043      	strb	r3, [r0, #1]
	X[2] = ((X[2] << 4)) | ((X[2] >> 4));
 80006c0:	0913      	lsrs	r3, r2, #4
 80006c2:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
	X[3] = ((X[3] << 3)) | ((X[3] >> 5));
 80006c6:	78c2      	ldrb	r2, [r0, #3]
	X[2] = ((X[2] << 4)) | ((X[2] >> 4));
 80006c8:	7083      	strb	r3, [r0, #2]
	X[3] = ((X[3] << 3)) | ((X[3] >> 5));
 80006ca:	0953      	lsrs	r3, r2, #5
 80006cc:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
	X[4] = ((X[4] << 6)) | ((X[4] >> 2));
 80006d0:	7902      	ldrb	r2, [r0, #4]
	X[3] = ((X[3] << 3)) | ((X[3] >> 5));
 80006d2:	70c3      	strb	r3, [r0, #3]
	X[4] = ((X[4] << 6)) | ((X[4] >> 2));
 80006d4:	0893      	lsrs	r3, r2, #2
 80006d6:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
	X[5] = ((X[5] << 5)) | ((X[5] >> 3));
 80006da:	7942      	ldrb	r2, [r0, #5]
	X[4] = ((X[4] << 6)) | ((X[4] >> 2));
 80006dc:	7103      	strb	r3, [r0, #4]
	X[5] = ((X[5] << 5)) | ((X[5] >> 3));
 80006de:	08d3      	lsrs	r3, r2, #3
 80006e0:	ea43 1342 	orr.w	r3, r3, r2, lsl #5
	X[6] = ((X[6] << 1)) | ((X[6] >> 7));
 80006e4:	7982      	ldrb	r2, [r0, #6]
	X[5] = ((X[5] << 5)) | ((X[5] >> 3));
 80006e6:	7143      	strb	r3, [r0, #5]
	X[6] = ((X[6] << 1)) | ((X[6] >> 7));
 80006e8:	09d3      	lsrs	r3, r2, #7
 80006ea:	ea43 0342 	orr.w	r3, r3, r2, lsl #1
	X[7] = ((X[7] << 2)) | ((X[7] >> 6));
 80006ee:	79c2      	ldrb	r2, [r0, #7]
	X[6] = ((X[6] << 1)) | ((X[6] >> 7));
 80006f0:	7183      	strb	r3, [r0, #6]
	X[7] = ((X[7] << 2)) | ((X[7] >> 6));
 80006f2:	0993      	lsrs	r3, r2, #6
 80006f4:	ea43 0382 	orr.w	r3, r3, r2, lsl #2
 80006f8:	71c3      	strb	r3, [r0, #7]
 80006fa:	4770      	bx	lr

080006fc <get_pt>:
{
 80006fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    PLAIN_TEXT[0] = (pt[0] << 24) ^ (pt[1] << 16) ^ (pt[2] << 8) ^ (pt[3]);
 80006fe:	7843      	ldrb	r3, [r0, #1]
 8000700:	7802      	ldrb	r2, [r0, #0]
 8000702:	4d32      	ldr	r5, [pc, #200]	; (80007cc <get_pt+0xd0>)
 8000704:	041b      	lsls	r3, r3, #16
 8000706:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800070a:	78c2      	ldrb	r2, [r0, #3]
 800070c:	4053      	eors	r3, r2
 800070e:	7882      	ldrb	r2, [r0, #2]
 8000710:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8000714:	f8c5 3080 	str.w	r3, [r5, #128]	; 0x80
    PLAIN_TEXT[1] = (pt[4] << 24) ^ (pt[5] << 16) ^ (pt[6] << 8) ^ (pt[7]);
 8000718:	7943      	ldrb	r3, [r0, #5]
 800071a:	7902      	ldrb	r2, [r0, #4]
 800071c:	041b      	lsls	r3, r3, #16
 800071e:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8000722:	79c2      	ldrb	r2, [r0, #7]
 8000724:	4053      	eors	r3, r2
 8000726:	7982      	ldrb	r2, [r0, #6]
 8000728:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800072c:	f8c5 3084 	str.w	r3, [r5, #132]	; 0x84
{
 8000730:	4604      	mov	r4, r0
    ROUND_KEY_GEN();
 8000732:	f7ff ff15 	bl	8000560 <ROUND_KEY_GEN>
	trigger_high();
 8000736:	f000 f9d9 	bl	8000aec <trigger_high>
    keyadd(P, RK);
 800073a:	f105 0110 	add.w	r1, r5, #16
 800073e:	f105 0080 	add.w	r0, r5, #128	; 0x80
 8000742:	f7ff ff61 	bl	8000608 <keyadd>
 8000746:	2600      	movs	r6, #0
		keyadd(P, RK + (i * 8));
 8000748:	3510      	adds	r5, #16
		sbox_TLU(P);
 800074a:	4821      	ldr	r0, [pc, #132]	; (80007d0 <get_pt+0xd4>)
 800074c:	4f21      	ldr	r7, [pc, #132]	; (80007d4 <get_pt+0xd8>)
 800074e:	f7ff ff9d 	bl	800068c <sbox_TLU>
 8000752:	3608      	adds	r6, #8
		pbox(P);
 8000754:	481e      	ldr	r0, [pc, #120]	; (80007d0 <get_pt+0xd4>)
 8000756:	f7ff ffad 	bl	80006b4 <pbox>
		keyadd(P, RK + (i * 8));
 800075a:	19a9      	adds	r1, r5, r6
 800075c:	481c      	ldr	r0, [pc, #112]	; (80007d0 <get_pt+0xd4>)
 800075e:	f7ff ff53 	bl	8000608 <keyadd>
	for (i = 1; i < 4; i++)
 8000762:	2e18      	cmp	r6, #24
 8000764:	d1f1      	bne.n	800074a <get_pt+0x4e>
	trigger_low();
 8000766:	f000 f9c8 	bl	8000afa <trigger_low>
 800076a:	2600      	movs	r6, #0
		sbox_TLU(P);
 800076c:	4d17      	ldr	r5, [pc, #92]	; (80007cc <get_pt+0xd0>)
 800076e:	f105 0080 	add.w	r0, r5, #128	; 0x80
 8000772:	f7ff ff8b 	bl	800068c <sbox_TLU>
		pbox(P);
 8000776:	f105 0080 	add.w	r0, r5, #128	; 0x80
 800077a:	f7ff ff9b 	bl	80006b4 <pbox>
		keyadd(P, RK + (i * 8));
 800077e:	f106 0120 	add.w	r1, r6, #32
 8000782:	4439      	add	r1, r7
 8000784:	f105 0080 	add.w	r0, r5, #128	; 0x80
 8000788:	3608      	adds	r6, #8
 800078a:	f7ff ff3d 	bl	8000608 <keyadd>
    for (i = 4; i < ROUND+1; i++)
 800078e:	2e50      	cmp	r6, #80	; 0x50
 8000790:	d1ec      	bne.n	800076c <get_pt+0x70>
    pt[0] = PLAIN_TEXT[1] >> 24;
 8000792:	f895 3087 	ldrb.w	r3, [r5, #135]	; 0x87
 8000796:	7023      	strb	r3, [r4, #0]
    pt[1] = PLAIN_TEXT[1] >> 16;
 8000798:	f8b5 3086 	ldrh.w	r3, [r5, #134]	; 0x86
 800079c:	7063      	strb	r3, [r4, #1]
    pt[2] = PLAIN_TEXT[1] >> 8;
 800079e:	f8d5 3084 	ldr.w	r3, [r5, #132]	; 0x84
 80007a2:	0a1b      	lsrs	r3, r3, #8
 80007a4:	70a3      	strb	r3, [r4, #2]
    pt[3] = PLAIN_TEXT[1] >> 0;
 80007a6:	f8d5 3084 	ldr.w	r3, [r5, #132]	; 0x84
 80007aa:	70e3      	strb	r3, [r4, #3]
    pt[4] = PLAIN_TEXT[0] >> 24;
 80007ac:	f8d5 3080 	ldr.w	r3, [r5, #128]	; 0x80
    pt[7] = PLAIN_TEXT[0] >> 0;
 80007b0:	71e3      	strb	r3, [r4, #7]
    pt[4] = PLAIN_TEXT[0] >> 24;
 80007b2:	0e1a      	lsrs	r2, r3, #24
 80007b4:	7122      	strb	r2, [r4, #4]
    pt[5] = PLAIN_TEXT[0] >> 16;
 80007b6:	0c1a      	lsrs	r2, r3, #16
 80007b8:	7162      	strb	r2, [r4, #5]
    pt[6] = PLAIN_TEXT[0] >> 8;
 80007ba:	0a1a      	lsrs	r2, r3, #8
 80007bc:	71a2      	strb	r2, [r4, #6]
	simpleserial_put('r', 16, pt);
 80007be:	2110      	movs	r1, #16
 80007c0:	4622      	mov	r2, r4
 80007c2:	2072      	movs	r0, #114	; 0x72
 80007c4:	f000 f886 	bl	80008d4 <simpleserial_put>
}
 80007c8:	2000      	movs	r0, #0
 80007ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80007cc:	20000180 	.word	0x20000180
 80007d0:	20000200 	.word	0x20000200
 80007d4:	20000190 	.word	0x20000190

080007d8 <main>:


int main(void)
{
 80007d8:	b508      	push	{r3, lr}
    platform_init();
 80007da:	f000 f8e7 	bl	80009ac <platform_init>
	init_uart();	
 80007de:	f000 f925 	bl	8000a2c <init_uart>
	trigger_setup();
 80007e2:	f000 f95f 	bl	8000aa4 <trigger_setup>
	putch('l');
	putch('o');
	putch('\n');
	*/
		
	simpleserial_init();		
 80007e6:	f000 f86d 	bl	80008c4 <simpleserial_init>
	simpleserial_addcmd('p',16, get_pt);
 80007ea:	4a09      	ldr	r2, [pc, #36]	; (8000810 <main+0x38>)
 80007ec:	2110      	movs	r1, #16
 80007ee:	2070      	movs	r0, #112	; 0x70
 80007f0:	f000 f852 	bl	8000898 <simpleserial_addcmd>
#if SS_VER != SS_VER_2_0
	simpleserial_addcmd('k', 16, get_key);
 80007f4:	4a07      	ldr	r2, [pc, #28]	; (8000814 <main+0x3c>)
 80007f6:	2110      	movs	r1, #16
 80007f8:	206b      	movs	r0, #107	; 0x6b
 80007fa:	f000 f84d 	bl	8000898 <simpleserial_addcmd>
	simpleserial_addcmd('x', 0, reset);
 80007fe:	4a06      	ldr	r2, [pc, #24]	; (8000818 <main+0x40>)
 8000800:	2100      	movs	r1, #0
 8000802:	2078      	movs	r0, #120	; 0x78
 8000804:	f000 f848 	bl	8000898 <simpleserial_addcmd>
#endif
	while(1)
		simpleserial_get();
 8000808:	f000 f886 	bl	8000918 <simpleserial_get>
 800080c:	e7fc      	b.n	8000808 <main+0x30>
 800080e:	bf00      	nop
 8000810:	080006fd 	.word	0x080006fd
 8000814:	0800055d 	.word	0x0800055d
 8000818:	08000559 	.word	0x08000559

0800081c <check_version>:
// Callback function for "v" command.
// This can exist in v1.0 as long as we don't actually send back an ack ("z")
uint8_t check_version(uint8_t *v)
{
	return SS_VER;
}
 800081c:	2001      	movs	r0, #1
 800081e:	4770      	bx	lr

08000820 <hex_decode>:
	'0', '1', '2', '3', '4', '5', '6', '7',
	'8', '9', 'A', 'B', 'C', 'D', 'E', 'F'
};

int hex_decode(int len, char* ascii_buf, uint8_t* data_buf)
{
 8000820:	b570      	push	{r4, r5, r6, lr}
 8000822:	3101      	adds	r1, #1
	for(int i = 0; i < len; i++)
 8000824:	4613      	mov	r3, r2
 8000826:	1a9c      	subs	r4, r3, r2
 8000828:	42a0      	cmp	r0, r4
 800082a:	dd32      	ble.n	8000892 <hex_decode+0x72>
	{
		char n_hi = ascii_buf[2*i];
		char n_lo = ascii_buf[2*i+1];
 800082c:	780d      	ldrb	r5, [r1, #0]
		char n_hi = ascii_buf[2*i];
 800082e:	f811 4c01 	ldrb.w	r4, [r1, #-1]

		if(n_lo >= '0' && n_lo <= '9')
 8000832:	f1a5 0630 	sub.w	r6, r5, #48	; 0x30
 8000836:	b2f6      	uxtb	r6, r6
 8000838:	2e09      	cmp	r6, #9
 800083a:	d801      	bhi.n	8000840 <hex_decode+0x20>
			data_buf[i] = n_lo - '0';
 800083c:	701e      	strb	r6, [r3, #0]
 800083e:	e00d      	b.n	800085c <hex_decode+0x3c>
		else if(n_lo >= 'A' && n_lo <= 'F')
 8000840:	f1a5 0641 	sub.w	r6, r5, #65	; 0x41
 8000844:	2e05      	cmp	r6, #5
 8000846:	d801      	bhi.n	800084c <hex_decode+0x2c>
			data_buf[i] = n_lo - 'A' + 10;
 8000848:	3d37      	subs	r5, #55	; 0x37
 800084a:	e006      	b.n	800085a <hex_decode+0x3a>
		else if(n_lo >= 'a' && n_lo <= 'f')
 800084c:	f1a5 0661 	sub.w	r6, r5, #97	; 0x61
 8000850:	2e05      	cmp	r6, #5
 8000852:	d901      	bls.n	8000858 <hex_decode+0x38>
			data_buf[i] = n_lo - 'a' + 10;
		else
			return 1;
 8000854:	2001      	movs	r0, #1
 8000856:	bd70      	pop	{r4, r5, r6, pc}
			data_buf[i] = n_lo - 'a' + 10;
 8000858:	3d57      	subs	r5, #87	; 0x57
 800085a:	701d      	strb	r5, [r3, #0]

		if(n_hi >= '0' && n_hi <= '9')
 800085c:	f1a4 0530 	sub.w	r5, r4, #48	; 0x30
 8000860:	b2ee      	uxtb	r6, r5
 8000862:	2e09      	cmp	r6, #9
 8000864:	d803      	bhi.n	800086e <hex_decode+0x4e>
			data_buf[i] |= (n_hi - '0') << 4;
 8000866:	781c      	ldrb	r4, [r3, #0]
 8000868:	ea44 1405 	orr.w	r4, r4, r5, lsl #4
 800086c:	e00d      	b.n	800088a <hex_decode+0x6a>
		else if(n_hi >= 'A' && n_hi <= 'F')
 800086e:	f1a4 0541 	sub.w	r5, r4, #65	; 0x41
 8000872:	2d05      	cmp	r5, #5
 8000874:	d801      	bhi.n	800087a <hex_decode+0x5a>
			data_buf[i] |= (n_hi - 'A' + 10) << 4;
 8000876:	3c37      	subs	r4, #55	; 0x37
 8000878:	e004      	b.n	8000884 <hex_decode+0x64>
		else if(n_hi >= 'a' && n_hi <= 'f')
 800087a:	f1a4 0561 	sub.w	r5, r4, #97	; 0x61
 800087e:	2d05      	cmp	r5, #5
 8000880:	d8e8      	bhi.n	8000854 <hex_decode+0x34>
			data_buf[i] |= (n_hi - 'a' + 10) << 4;
 8000882:	3c57      	subs	r4, #87	; 0x57
 8000884:	781d      	ldrb	r5, [r3, #0]
 8000886:	ea45 1404 	orr.w	r4, r5, r4, lsl #4
 800088a:	701c      	strb	r4, [r3, #0]
 800088c:	3102      	adds	r1, #2
 800088e:	3301      	adds	r3, #1
 8000890:	e7c9      	b.n	8000826 <hex_decode+0x6>
		else
			return 1;
	}

	return 0;
 8000892:	2000      	movs	r0, #0
}
 8000894:	bd70      	pop	{r4, r5, r6, pc}
 8000896:	0000      	movs	r0, r0

08000898 <simpleserial_addcmd>:
{
	simpleserial_addcmd('v', 0, check_version);
}

int simpleserial_addcmd(char c, unsigned int len, uint8_t (*fp)(uint8_t*))
{
 8000898:	b530      	push	{r4, r5, lr}
	if(num_commands >= MAX_SS_CMDS)
 800089a:	4d09      	ldr	r5, [pc, #36]	; (80008c0 <simpleserial_addcmd+0x28>)
 800089c:	682b      	ldr	r3, [r5, #0]
 800089e:	2b0f      	cmp	r3, #15
 80008a0:	dc0b      	bgt.n	80008ba <simpleserial_addcmd+0x22>
		return 1;

	if(len >= MAX_SS_LEN)
 80008a2:	29bf      	cmp	r1, #191	; 0xbf
 80008a4:	d809      	bhi.n	80008ba <simpleserial_addcmd+0x22>
		return 1;

	commands[num_commands].c   = c;
 80008a6:	240c      	movs	r4, #12
 80008a8:	fb04 5403 	mla	r4, r4, r3, r5
	commands[num_commands].len = len;
	commands[num_commands].fp  = fp;
	num_commands++;
 80008ac:	3301      	adds	r3, #1
	commands[num_commands].c   = c;
 80008ae:	7120      	strb	r0, [r4, #4]
	commands[num_commands].len = len;
 80008b0:	60a1      	str	r1, [r4, #8]
	commands[num_commands].fp  = fp;
 80008b2:	60e2      	str	r2, [r4, #12]
	num_commands++;
 80008b4:	602b      	str	r3, [r5, #0]

	return 0;
 80008b6:	2000      	movs	r0, #0
 80008b8:	bd30      	pop	{r4, r5, pc}
		return 1;
 80008ba:	2001      	movs	r0, #1
}
 80008bc:	bd30      	pop	{r4, r5, pc}
 80008be:	bf00      	nop
 80008c0:	20000210 	.word	0x20000210

080008c4 <simpleserial_init>:
	simpleserial_addcmd('v', 0, check_version);
 80008c4:	4a02      	ldr	r2, [pc, #8]	; (80008d0 <simpleserial_init+0xc>)
 80008c6:	2100      	movs	r1, #0
 80008c8:	2076      	movs	r0, #118	; 0x76
 80008ca:	f7ff bfe5 	b.w	8000898 <simpleserial_addcmd>
 80008ce:	bf00      	nop
 80008d0:	0800081d 	.word	0x0800081d

080008d4 <simpleserial_put>:
	simpleserial_put('z', 1, ret);
#endif
}

void simpleserial_put(char c, uint8_t size, uint8_t* output)
{
 80008d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80008d8:	4615      	mov	r5, r2
 80008da:	460f      	mov	r7, r1
	// Write first character
	putch(c);
 80008dc:	f000 f92c 	bl	8000b38 <putch>

	// Write each byte as two nibbles
	for(int i = 0; i < size; i++)
	{
		putch(hex_lookup[output[i] >> 4 ]);
 80008e0:	4e0c      	ldr	r6, [pc, #48]	; (8000914 <simpleserial_put+0x40>)
	for(int i = 0; i < size; i++)
 80008e2:	462c      	mov	r4, r5
 80008e4:	1b63      	subs	r3, r4, r5
 80008e6:	429f      	cmp	r7, r3
 80008e8:	dd0e      	ble.n	8000908 <simpleserial_put+0x34>
 80008ea:	46a0      	mov	r8, r4
		putch(hex_lookup[output[i] >> 4 ]);
 80008ec:	f814 3b01 	ldrb.w	r3, [r4], #1
 80008f0:	091b      	lsrs	r3, r3, #4
 80008f2:	5cf0      	ldrb	r0, [r6, r3]
 80008f4:	f000 f920 	bl	8000b38 <putch>
		putch(hex_lookup[output[i] & 0xF]);
 80008f8:	f898 3000 	ldrb.w	r3, [r8]
 80008fc:	f003 030f 	and.w	r3, r3, #15
 8000900:	5cf0      	ldrb	r0, [r6, r3]
 8000902:	f000 f919 	bl	8000b38 <putch>
 8000906:	e7ed      	b.n	80008e4 <simpleserial_put+0x10>
	}

	// Write trailing '\n'
	putch('\n');
 8000908:	200a      	movs	r0, #10
}
 800090a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	putch('\n');
 800090e:	f000 b913 	b.w	8000b38 <putch>
 8000912:	bf00      	nop
 8000914:	08001834 	.word	0x08001834

08000918 <simpleserial_get>:
{
 8000918:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	for(cmd = 0; cmd < num_commands; cmd++)
 800091c:	4d22      	ldr	r5, [pc, #136]	; (80009a8 <simpleserial_get+0x90>)
{
 800091e:	f5ad 7d12 	sub.w	sp, sp, #584	; 0x248
	c = getch();
 8000922:	f000 f8f1 	bl	8000b08 <getch>
	for(cmd = 0; cmd < num_commands; cmd++)
 8000926:	682b      	ldr	r3, [r5, #0]
 8000928:	2400      	movs	r4, #0
		if(commands[cmd].c == c)
 800092a:	1d2a      	adds	r2, r5, #4
 800092c:	210c      	movs	r1, #12
	for(cmd = 0; cmd < num_commands; cmd++)
 800092e:	429c      	cmp	r4, r3
 8000930:	da0d      	bge.n	800094e <simpleserial_get+0x36>
		if(commands[cmd].c == c)
 8000932:	fb01 f604 	mul.w	r6, r1, r4
 8000936:	5cb6      	ldrb	r6, [r6, r2]
 8000938:	4286      	cmp	r6, r0
 800093a:	d106      	bne.n	800094a <simpleserial_get+0x32>
	for(int i = 0; i < 2*commands[cmd].len; i++)
 800093c:	270c      	movs	r7, #12
 800093e:	2600      	movs	r6, #0
 8000940:	fb07 5704 	mla	r7, r7, r4, r5
		ascii_buf[i] = c;
 8000944:	f10d 08c8 	add.w	r8, sp, #200	; 0xc8
 8000948:	e00c      	b.n	8000964 <simpleserial_get+0x4c>
	for(cmd = 0; cmd < num_commands; cmd++)
 800094a:	3401      	adds	r4, #1
 800094c:	e7ef      	b.n	800092e <simpleserial_get+0x16>
	if(cmd == num_commands)
 800094e:	d026      	beq.n	800099e <simpleserial_get+0x86>
 8000950:	e7f4      	b.n	800093c <simpleserial_get+0x24>
		c = getch();
 8000952:	f000 f8d9 	bl	8000b08 <getch>
		if(c == '\n' || c == '\r')
 8000956:	280a      	cmp	r0, #10
 8000958:	d021      	beq.n	800099e <simpleserial_get+0x86>
 800095a:	280d      	cmp	r0, #13
 800095c:	d01f      	beq.n	800099e <simpleserial_get+0x86>
		ascii_buf[i] = c;
 800095e:	f806 0008 	strb.w	r0, [r6, r8]
	for(int i = 0; i < 2*commands[cmd].len; i++)
 8000962:	3601      	adds	r6, #1
 8000964:	68bb      	ldr	r3, [r7, #8]
 8000966:	ebb6 0f43 	cmp.w	r6, r3, lsl #1
 800096a:	d3f2      	bcc.n	8000952 <simpleserial_get+0x3a>
	c = getch();
 800096c:	f000 f8cc 	bl	8000b08 <getch>
	if(c != '\n' && c != '\r')
 8000970:	280a      	cmp	r0, #10
 8000972:	d001      	beq.n	8000978 <simpleserial_get+0x60>
 8000974:	280d      	cmp	r0, #13
 8000976:	d112      	bne.n	800099e <simpleserial_get+0x86>
	if(hex_decode(commands[cmd].len, ascii_buf, data_buf))
 8000978:	230c      	movs	r3, #12
 800097a:	fb03 5404 	mla	r4, r3, r4, r5
 800097e:	aa02      	add	r2, sp, #8
 8000980:	a932      	add	r1, sp, #200	; 0xc8
 8000982:	68a0      	ldr	r0, [r4, #8]
 8000984:	f7ff ff4c 	bl	8000820 <hex_decode>
 8000988:	b948      	cbnz	r0, 800099e <simpleserial_get+0x86>
	ret[0] = commands[cmd].fp(data_buf);
 800098a:	68e3      	ldr	r3, [r4, #12]
 800098c:	a802      	add	r0, sp, #8
 800098e:	4798      	blx	r3
	simpleserial_put('z', 1, ret);
 8000990:	aa01      	add	r2, sp, #4
	ret[0] = commands[cmd].fp(data_buf);
 8000992:	f88d 0004 	strb.w	r0, [sp, #4]
	simpleserial_put('z', 1, ret);
 8000996:	2101      	movs	r1, #1
 8000998:	207a      	movs	r0, #122	; 0x7a
 800099a:	f7ff ff9b 	bl	80008d4 <simpleserial_put>
}
 800099e:	f50d 7d12 	add.w	sp, sp, #584	; 0x248
 80009a2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80009a6:	bf00      	nop
 80009a8:	20000210 	.word	0x20000210

080009ac <platform_init>:

UART_HandleTypeDef UartHandle;


void platform_init(void)
{
 80009ac:	b570      	push	{r4, r5, r6, lr}
 80009ae:	b096      	sub	sp, #88	; 0x58
     HAL_RCC_ClockConfig(&RCC_ClkInitStruct, flash_latency);
  #else
     RCC_OscInitTypeDef RCC_OscInitStruct;
     RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE | RCC_OSCILLATORTYPE_HSI;
     RCC_OscInitStruct.HSEState       = RCC_HSE_BYPASS;
     RCC_OscInitStruct.HSIState       = RCC_HSI_OFF;
 80009b0:	2400      	movs	r4, #0
     RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE | RCC_OSCILLATORTYPE_HSI;
 80009b2:	2603      	movs	r6, #3
     RCC_OscInitStruct.HSEState       = RCC_HSE_BYPASS;
 80009b4:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
     RCC_OscInitStruct.PLL.PLLSource  = RCC_PLL_NONE;
     HAL_RCC_OscConfig(&RCC_OscInitStruct);
 80009b8:	a80c      	add	r0, sp, #48	; 0x30

     RCC_ClkInitTypeDef RCC_ClkInitStruct;
     RCC_ClkInitStruct.ClockType      = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2);
     RCC_ClkInitStruct.SYSCLKSource   = RCC_SYSCLKSOURCE_HSE;
 80009ba:	2501      	movs	r5, #1
     RCC_OscInitStruct.HSEState       = RCC_HSE_BYPASS;
 80009bc:	930d      	str	r3, [sp, #52]	; 0x34
     RCC_OscInitStruct.HSIState       = RCC_HSI_OFF;
 80009be:	9410      	str	r4, [sp, #64]	; 0x40
     RCC_OscInitStruct.PLL.PLLSource  = RCC_PLL_NONE;
 80009c0:	9414      	str	r4, [sp, #80]	; 0x50
     RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE | RCC_OSCILLATORTYPE_HSI;
 80009c2:	960c      	str	r6, [sp, #48]	; 0x30
     HAL_RCC_OscConfig(&RCC_OscInitStruct);
 80009c4:	f000 f8d0 	bl	8000b68 <HAL_RCC_OscConfig>
     RCC_ClkInitStruct.ClockType      = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2);
 80009c8:	230f      	movs	r3, #15
     RCC_ClkInitStruct.AHBCLKDivider  = RCC_SYSCLK_DIV1;
     RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
     RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
     uint32_t flash_latency = 0;
     HAL_RCC_ClockConfig(&RCC_ClkInitStruct, flash_latency);
 80009ca:	4621      	mov	r1, r4
 80009cc:	a802      	add	r0, sp, #8
     RCC_ClkInitStruct.ClockType      = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2);
 80009ce:	9302      	str	r3, [sp, #8]
     RCC_ClkInitStruct.AHBCLKDivider  = RCC_SYSCLK_DIV1;
 80009d0:	9404      	str	r4, [sp, #16]
     RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80009d2:	9405      	str	r4, [sp, #20]
     RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80009d4:	9406      	str	r4, [sp, #24]
     RCC_ClkInitStruct.SYSCLKSource   = RCC_SYSCLKSOURCE_HSE;
 80009d6:	9503      	str	r5, [sp, #12]
     HAL_RCC_ClockConfig(&RCC_ClkInitStruct, flash_latency);
 80009d8:	f000 fb38 	bl	800104c <HAL_RCC_ClockConfig>




#if (PLATFORM==CWLITEARM)
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80009dc:	4b11      	ldr	r3, [pc, #68]	; (8000a24 <platform_init+0x78>)
 80009de:	695a      	ldr	r2, [r3, #20]
 80009e0:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 80009e4:	615a      	str	r2, [r3, #20]
 80009e6:	695b      	ldr	r3, [r3, #20]
  GPIO_InitTypeDef GpioInit;
  GpioInit.Pin       = GPIO_PIN_13 | GPIO_PIN_14;
  GpioInit.Mode      = GPIO_MODE_OUTPUT_PP;
  GpioInit.Pull      = GPIO_NOPULL;
 80009e8:	9409      	str	r4, [sp, #36]	; 0x24
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80009ea:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
  GpioInit.Speed     = GPIO_SPEED_FREQ_HIGH;
  HAL_GPIO_Init(GPIOC, &GpioInit);
 80009ee:	4c0e      	ldr	r4, [pc, #56]	; (8000a28 <platform_init+0x7c>)
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80009f0:	9301      	str	r3, [sp, #4]
 80009f2:	9b01      	ldr	r3, [sp, #4]
  GpioInit.Mode      = GPIO_MODE_OUTPUT_PP;
 80009f4:	9508      	str	r5, [sp, #32]
  GpioInit.Pin       = GPIO_PIN_13 | GPIO_PIN_14;
 80009f6:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
  HAL_GPIO_Init(GPIOC, &GpioInit);
 80009fa:	a907      	add	r1, sp, #28
 80009fc:	4620      	mov	r0, r4
  GpioInit.Pin       = GPIO_PIN_13 | GPIO_PIN_14;
 80009fe:	9307      	str	r3, [sp, #28]
  GpioInit.Speed     = GPIO_SPEED_FREQ_HIGH;
 8000a00:	960a      	str	r6, [sp, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GpioInit);
 8000a02:	f000 fbc7 	bl	8001194 <HAL_GPIO_Init>

  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, SET);
 8000a06:	462a      	mov	r2, r5
 8000a08:	4620      	mov	r0, r4
 8000a0a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000a0e:	f000 fc8b 	bl	8001328 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, SET);
 8000a12:	462a      	mov	r2, r5
 8000a14:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000a18:	4620      	mov	r0, r4
 8000a1a:	f000 fc85 	bl	8001328 <HAL_GPIO_WritePin>
#endif
}
 8000a1e:	b016      	add	sp, #88	; 0x58
 8000a20:	bd70      	pop	{r4, r5, r6, pc}
 8000a22:	bf00      	nop
 8000a24:	40021000 	.word	0x40021000
 8000a28:	48000800 	.word	0x48000800

08000a2c <init_uart>:

void init_uart(void)
{
 8000a2c:	b510      	push	{r4, lr}
 8000a2e:	b088      	sub	sp, #32
  GPIO_InitTypeDef GpioInit;
  GpioInit.Pin       = GPIO_PIN_9 | GPIO_PIN_10;
 8000a30:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000a34:	9303      	str	r3, [sp, #12]
  GpioInit.Mode      = GPIO_MODE_AF_PP;
 8000a36:	2302      	movs	r3, #2
 8000a38:	9304      	str	r3, [sp, #16]
  GpioInit.Pull      = GPIO_PULLUP;
 8000a3a:	2301      	movs	r3, #1
 8000a3c:	9305      	str	r3, [sp, #20]
  GpioInit.Speed     = GPIO_SPEED_FREQ_HIGH;
 8000a3e:	2303      	movs	r3, #3
  GpioInit.Alternate = GPIO_AF7_USART1;
  __GPIOA_CLK_ENABLE();
 8000a40:	4c15      	ldr	r4, [pc, #84]	; (8000a98 <init_uart+0x6c>)
  GpioInit.Speed     = GPIO_SPEED_FREQ_HIGH;
 8000a42:	9306      	str	r3, [sp, #24]
  GpioInit.Alternate = GPIO_AF7_USART1;
 8000a44:	2307      	movs	r3, #7
 8000a46:	9307      	str	r3, [sp, #28]
  __GPIOA_CLK_ENABLE();
 8000a48:	6963      	ldr	r3, [r4, #20]
 8000a4a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000a4e:	6163      	str	r3, [r4, #20]
 8000a50:	6963      	ldr	r3, [r4, #20]
 8000a52:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000a56:	9301      	str	r3, [sp, #4]
  HAL_GPIO_Init(GPIOA, &GpioInit);
 8000a58:	a903      	add	r1, sp, #12
 8000a5a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
  __GPIOA_CLK_ENABLE();
 8000a5e:	9b01      	ldr	r3, [sp, #4]
  HAL_GPIO_Init(GPIOA, &GpioInit);
 8000a60:	f000 fb98 	bl	8001194 <HAL_GPIO_Init>

  UartHandle.Instance        = USART1;
 8000a64:	480d      	ldr	r0, [pc, #52]	; (8000a9c <init_uart+0x70>)
  #if SS_VER==SS_VER_2_0
  UartHandle.Init.BaudRate   = 230400;
  #else
  UartHandle.Init.BaudRate   = 38400;
 8000a66:	4b0e      	ldr	r3, [pc, #56]	; (8000aa0 <init_uart+0x74>)
 8000a68:	f44f 4e16 	mov.w	lr, #38400	; 0x9600
 8000a6c:	e880 4008 	stmia.w	r0, {r3, lr}
  #endif
  UartHandle.Init.WordLength = UART_WORDLENGTH_8B;
 8000a70:	2300      	movs	r3, #0
 8000a72:	6083      	str	r3, [r0, #8]
  UartHandle.Init.StopBits   = UART_STOPBITS_1;
 8000a74:	60c3      	str	r3, [r0, #12]
  UartHandle.Init.Parity     = UART_PARITY_NONE;
 8000a76:	6103      	str	r3, [r0, #16]
  UartHandle.Init.HwFlowCtl  = UART_HWCONTROL_NONE;
 8000a78:	6183      	str	r3, [r0, #24]
  UartHandle.Init.Mode       = UART_MODE_TX_RX;
 8000a7a:	230c      	movs	r3, #12
 8000a7c:	6143      	str	r3, [r0, #20]
  __USART1_CLK_ENABLE();
 8000a7e:	69a3      	ldr	r3, [r4, #24]
 8000a80:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a84:	61a3      	str	r3, [r4, #24]
 8000a86:	69a3      	ldr	r3, [r4, #24]
 8000a88:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000a8c:	9302      	str	r3, [sp, #8]
 8000a8e:	9b02      	ldr	r3, [sp, #8]
  HAL_UART_Init(&UartHandle);
 8000a90:	f000 fd96 	bl	80015c0 <HAL_UART_Init>
}
 8000a94:	b008      	add	sp, #32
 8000a96:	bd10      	pop	{r4, pc}
 8000a98:	40021000 	.word	0x40021000
 8000a9c:	200002e8 	.word	0x200002e8
 8000aa0:	40013800 	.word	0x40013800

08000aa4 <trigger_setup>:

void trigger_setup(void)
{
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000aa4:	4b10      	ldr	r3, [pc, #64]	; (8000ae8 <trigger_setup+0x44>)
{
 8000aa6:	b530      	push	{r4, r5, lr}
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000aa8:	695a      	ldr	r2, [r3, #20]
 8000aaa:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8000aae:	615a      	str	r2, [r3, #20]
 8000ab0:	695b      	ldr	r3, [r3, #20]
{
 8000ab2:	b087      	sub	sp, #28
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ab4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000ab8:	9300      	str	r3, [sp, #0]
 8000aba:	9b00      	ldr	r3, [sp, #0]

  GPIO_InitTypeDef GpioInit;
  GpioInit.Pin       = GPIO_PIN_12;
  GpioInit.Mode      = GPIO_MODE_OUTPUT_PP;
 8000abc:	2301      	movs	r3, #1
  GpioInit.Pin       = GPIO_PIN_12;
 8000abe:	f44f 5480 	mov.w	r4, #4096	; 0x1000
  GpioInit.Mode      = GPIO_MODE_OUTPUT_PP;
 8000ac2:	9302      	str	r3, [sp, #8]
  GpioInit.Pull      = GPIO_NOPULL;
 8000ac4:	2500      	movs	r5, #0
  GpioInit.Speed     = GPIO_SPEED_FREQ_HIGH;
 8000ac6:	2303      	movs	r3, #3
  HAL_GPIO_Init(GPIOA, &GpioInit);
 8000ac8:	a901      	add	r1, sp, #4
 8000aca:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
  GpioInit.Speed     = GPIO_SPEED_FREQ_HIGH;
 8000ace:	9304      	str	r3, [sp, #16]
  GpioInit.Pin       = GPIO_PIN_12;
 8000ad0:	9401      	str	r4, [sp, #4]
  GpioInit.Pull      = GPIO_NOPULL;
 8000ad2:	9503      	str	r5, [sp, #12]
  HAL_GPIO_Init(GPIOA, &GpioInit);
 8000ad4:	f000 fb5e 	bl	8001194 <HAL_GPIO_Init>

  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, RESET);
 8000ad8:	462a      	mov	r2, r5
 8000ada:	4621      	mov	r1, r4
 8000adc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ae0:	f000 fc22 	bl	8001328 <HAL_GPIO_WritePin>
}
 8000ae4:	b007      	add	sp, #28
 8000ae6:	bd30      	pop	{r4, r5, pc}
 8000ae8:	40021000 	.word	0x40021000

08000aec <trigger_high>:

void trigger_high(void)
{
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, SET);
 8000aec:	2201      	movs	r2, #1
 8000aee:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000af2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000af6:	f000 bc17 	b.w	8001328 <HAL_GPIO_WritePin>

08000afa <trigger_low>:
}

void trigger_low(void)
{
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, RESET);
 8000afa:	2200      	movs	r2, #0
 8000afc:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000b00:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b04:	f000 bc10 	b.w	8001328 <HAL_GPIO_WritePin>

08000b08 <getch>:
}

char getch(void)
{
 8000b08:	b513      	push	{r0, r1, r4, lr}
  uint8_t d;
  while (HAL_UART_Receive(&UartHandle, &d, 1, 5000) != HAL_OK)
    USART1->ICR |= (1 << 3);
 8000b0a:	4c09      	ldr	r4, [pc, #36]	; (8000b30 <getch+0x28>)
  while (HAL_UART_Receive(&UartHandle, &d, 1, 5000) != HAL_OK)
 8000b0c:	4809      	ldr	r0, [pc, #36]	; (8000b34 <getch+0x2c>)
 8000b0e:	f241 3388 	movw	r3, #5000	; 0x1388
 8000b12:	2201      	movs	r2, #1
 8000b14:	f10d 0107 	add.w	r1, sp, #7
 8000b18:	f000 fdd5 	bl	80016c6 <HAL_UART_Receive>
 8000b1c:	b120      	cbz	r0, 8000b28 <getch+0x20>
    USART1->ICR |= (1 << 3);
 8000b1e:	6a23      	ldr	r3, [r4, #32]
 8000b20:	f043 0308 	orr.w	r3, r3, #8
 8000b24:	6223      	str	r3, [r4, #32]
 8000b26:	e7f1      	b.n	8000b0c <getch+0x4>
  //putch(d);
  return d;
}
 8000b28:	f89d 0007 	ldrb.w	r0, [sp, #7]
 8000b2c:	b002      	add	sp, #8
 8000b2e:	bd10      	pop	{r4, pc}
 8000b30:	40013800 	.word	0x40013800
 8000b34:	200002e8 	.word	0x200002e8

08000b38 <putch>:

void putch(char c)
{
 8000b38:	b507      	push	{r0, r1, r2, lr}
  uint8_t d  = c;
 8000b3a:	a902      	add	r1, sp, #8
  HAL_UART_Transmit(&UartHandle,  &d, 1, 5000);
 8000b3c:	f241 3388 	movw	r3, #5000	; 0x1388
  uint8_t d  = c;
 8000b40:	f801 0d01 	strb.w	r0, [r1, #-1]!
  HAL_UART_Transmit(&UartHandle,  &d, 1, 5000);
 8000b44:	2201      	movs	r2, #1
 8000b46:	4803      	ldr	r0, [pc, #12]	; (8000b54 <putch+0x1c>)
 8000b48:	f000 fd65 	bl	8001616 <HAL_UART_Transmit>
}
 8000b4c:	b003      	add	sp, #12
 8000b4e:	f85d fb04 	ldr.w	pc, [sp], #4
 8000b52:	bf00      	nop
 8000b54:	200002e8 	.word	0x200002e8

08000b58 <HAL_GetTick>:
	hal_sys_tick = 0;
	return HAL_OK;
}
uint32_t HAL_GetTick(void)
{
	return hal_sys_tick++;
 8000b58:	4b02      	ldr	r3, [pc, #8]	; (8000b64 <HAL_GetTick+0xc>)
 8000b5a:	6818      	ldr	r0, [r3, #0]
 8000b5c:	1c42      	adds	r2, r0, #1
 8000b5e:	601a      	str	r2, [r3, #0]
}
 8000b60:	4770      	bx	lr
 8000b62:	bf00      	nop
 8000b64:	200002d4 	.word	0x200002d4

08000b68 <HAL_RCC_OscConfig>:
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000b68:	6803      	ldr	r3, [r0, #0]
{
 8000b6a:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000b6e:	07d9      	lsls	r1, r3, #31
{
 8000b70:	4604      	mov	r4, r0
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000b72:	d403      	bmi.n	8000b7c <HAL_RCC_OscConfig+0x14>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000b74:	6823      	ldr	r3, [r4, #0]
 8000b76:	079a      	lsls	r2, r3, #30
 8000b78:	d474      	bmi.n	8000c64 <HAL_RCC_OscConfig+0xfc>
 8000b7a:	e0f4      	b.n	8000d66 <HAL_RCC_OscConfig+0x1fe>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8000b7c:	49b6      	ldr	r1, [pc, #728]	; (8000e58 <HAL_RCC_OscConfig+0x2f0>)
 8000b7e:	684b      	ldr	r3, [r1, #4]
 8000b80:	f003 030c 	and.w	r3, r3, #12
 8000b84:	2b04      	cmp	r3, #4
 8000b86:	d007      	beq.n	8000b98 <HAL_RCC_OscConfig+0x30>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000b88:	684b      	ldr	r3, [r1, #4]
 8000b8a:	f003 030c 	and.w	r3, r3, #12
 8000b8e:	2b08      	cmp	r3, #8
 8000b90:	d117      	bne.n	8000bc2 <HAL_RCC_OscConfig+0x5a>
 8000b92:	684b      	ldr	r3, [r1, #4]
 8000b94:	03db      	lsls	r3, r3, #15
 8000b96:	d514      	bpl.n	8000bc2 <HAL_RCC_OscConfig+0x5a>
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000b98:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000b9c:	fa93 f2a3 	rbit	r2, r3
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000ba0:	6809      	ldr	r1, [r1, #0]
 8000ba2:	fa93 f3a3 	rbit	r3, r3
 8000ba6:	fab3 f383 	clz	r3, r3
 8000baa:	f003 031f 	and.w	r3, r3, #31
 8000bae:	2201      	movs	r2, #1
 8000bb0:	fa02 f303 	lsl.w	r3, r2, r3
 8000bb4:	420b      	tst	r3, r1
 8000bb6:	d0dd      	beq.n	8000b74 <HAL_RCC_OscConfig+0xc>
 8000bb8:	6863      	ldr	r3, [r4, #4]
 8000bba:	2b00      	cmp	r3, #0
 8000bbc:	d1da      	bne.n	8000b74 <HAL_RCC_OscConfig+0xc>
        return HAL_ERROR;
 8000bbe:	2001      	movs	r0, #1
 8000bc0:	e23e      	b.n	8001040 <HAL_RCC_OscConfig+0x4d8>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000bc2:	6863      	ldr	r3, [r4, #4]
 8000bc4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000bc8:	d007      	beq.n	8000bda <HAL_RCC_OscConfig+0x72>
 8000bca:	680a      	ldr	r2, [r1, #0]
 8000bcc:	b14b      	cbz	r3, 8000be2 <HAL_RCC_OscConfig+0x7a>
 8000bce:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000bd2:	d106      	bne.n	8000be2 <HAL_RCC_OscConfig+0x7a>
 8000bd4:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8000bd8:	600a      	str	r2, [r1, #0]
 8000bda:	680a      	ldr	r2, [r1, #0]
 8000bdc:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8000be0:	e005      	b.n	8000bee <HAL_RCC_OscConfig+0x86>
 8000be2:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8000be6:	600a      	str	r2, [r1, #0]
 8000be8:	680a      	ldr	r2, [r1, #0]
 8000bea:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8000bee:	600a      	str	r2, [r1, #0]
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8000bf0:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 8000bf2:	f022 000f 	bic.w	r0, r2, #15
 8000bf6:	68a2      	ldr	r2, [r4, #8]
 8000bf8:	4302      	orrs	r2, r0
 8000bfa:	62ca      	str	r2, [r1, #44]	; 0x2c
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000bfc:	b1cb      	cbz	r3, 8000c32 <HAL_RCC_OscConfig+0xca>
        tickstart = HAL_GetTick();
 8000bfe:	f7ff ffab 	bl	8000b58 <HAL_GetTick>
 8000c02:	f44f 3500 	mov.w	r5, #131072	; 0x20000
 8000c06:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000c08:	2601      	movs	r6, #1
 8000c0a:	fa95 f3a5 	rbit	r3, r5
 8000c0e:	680a      	ldr	r2, [r1, #0]
 8000c10:	fa95 f3a5 	rbit	r3, r5
 8000c14:	fab3 f383 	clz	r3, r3
 8000c18:	f003 031f 	and.w	r3, r3, #31
 8000c1c:	fa06 f303 	lsl.w	r3, r6, r3
 8000c20:	4213      	tst	r3, r2
 8000c22:	d1a7      	bne.n	8000b74 <HAL_RCC_OscConfig+0xc>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000c24:	f7ff ff98 	bl	8000b58 <HAL_GetTick>
 8000c28:	1bc0      	subs	r0, r0, r7
 8000c2a:	2864      	cmp	r0, #100	; 0x64
 8000c2c:	d9ed      	bls.n	8000c0a <HAL_RCC_OscConfig+0xa2>
            return HAL_TIMEOUT;
 8000c2e:	2003      	movs	r0, #3
 8000c30:	e206      	b.n	8001040 <HAL_RCC_OscConfig+0x4d8>
        tickstart = HAL_GetTick();
 8000c32:	f7ff ff91 	bl	8000b58 <HAL_GetTick>
 8000c36:	f44f 3500 	mov.w	r5, #131072	; 0x20000
 8000c3a:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000c3c:	2601      	movs	r6, #1
 8000c3e:	fa95 f3a5 	rbit	r3, r5
 8000c42:	680a      	ldr	r2, [r1, #0]
 8000c44:	fa95 f3a5 	rbit	r3, r5
 8000c48:	fab3 f383 	clz	r3, r3
 8000c4c:	f003 031f 	and.w	r3, r3, #31
 8000c50:	fa06 f303 	lsl.w	r3, r6, r3
 8000c54:	4213      	tst	r3, r2
 8000c56:	d08d      	beq.n	8000b74 <HAL_RCC_OscConfig+0xc>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000c58:	f7ff ff7e 	bl	8000b58 <HAL_GetTick>
 8000c5c:	1bc0      	subs	r0, r0, r7
 8000c5e:	2864      	cmp	r0, #100	; 0x64
 8000c60:	d9ed      	bls.n	8000c3e <HAL_RCC_OscConfig+0xd6>
 8000c62:	e7e4      	b.n	8000c2e <HAL_RCC_OscConfig+0xc6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8000c64:	497c      	ldr	r1, [pc, #496]	; (8000e58 <HAL_RCC_OscConfig+0x2f0>)
 8000c66:	684b      	ldr	r3, [r1, #4]
 8000c68:	f013 0f0c 	tst.w	r3, #12
 8000c6c:	d007      	beq.n	8000c7e <HAL_RCC_OscConfig+0x116>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8000c6e:	684b      	ldr	r3, [r1, #4]
 8000c70:	f003 030c 	and.w	r3, r3, #12
 8000c74:	2b08      	cmp	r3, #8
 8000c76:	d122      	bne.n	8000cbe <HAL_RCC_OscConfig+0x156>
 8000c78:	684b      	ldr	r3, [r1, #4]
 8000c7a:	03df      	lsls	r7, r3, #15
 8000c7c:	d41f      	bmi.n	8000cbe <HAL_RCC_OscConfig+0x156>
 8000c7e:	2302      	movs	r3, #2
 8000c80:	fa93 f2a3 	rbit	r2, r3
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000c84:	6808      	ldr	r0, [r1, #0]
 8000c86:	fa93 f3a3 	rbit	r3, r3
 8000c8a:	fab3 f383 	clz	r3, r3
 8000c8e:	f003 031f 	and.w	r3, r3, #31
 8000c92:	2201      	movs	r2, #1
 8000c94:	fa02 f303 	lsl.w	r3, r2, r3
 8000c98:	4203      	tst	r3, r0
 8000c9a:	d002      	beq.n	8000ca2 <HAL_RCC_OscConfig+0x13a>
 8000c9c:	6923      	ldr	r3, [r4, #16]
 8000c9e:	4293      	cmp	r3, r2
 8000ca0:	d18d      	bne.n	8000bbe <HAL_RCC_OscConfig+0x56>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000ca2:	680b      	ldr	r3, [r1, #0]
 8000ca4:	22f8      	movs	r2, #248	; 0xf8
 8000ca6:	fa92 f2a2 	rbit	r2, r2
 8000caa:	6960      	ldr	r0, [r4, #20]
 8000cac:	fab2 f282 	clz	r2, r2
 8000cb0:	fa00 f202 	lsl.w	r2, r0, r2
 8000cb4:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8000cb8:	4313      	orrs	r3, r2
 8000cba:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000cbc:	e053      	b.n	8000d66 <HAL_RCC_OscConfig+0x1fe>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000cbe:	6922      	ldr	r2, [r4, #16]
 8000cc0:	2501      	movs	r5, #1
 8000cc2:	b37a      	cbz	r2, 8000d24 <HAL_RCC_OscConfig+0x1bc>
 8000cc4:	fa95 f3a5 	rbit	r3, r5
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000cc8:	fab3 f383 	clz	r3, r3
 8000ccc:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8000cd0:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8000cd4:	009b      	lsls	r3, r3, #2
 8000cd6:	2602      	movs	r6, #2
 8000cd8:	601d      	str	r5, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000cda:	f7ff ff3d 	bl	8000b58 <HAL_GetTick>
 8000cde:	4607      	mov	r7, r0
 8000ce0:	fa96 f3a6 	rbit	r3, r6
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000ce4:	485c      	ldr	r0, [pc, #368]	; (8000e58 <HAL_RCC_OscConfig+0x2f0>)
 8000ce6:	680a      	ldr	r2, [r1, #0]
 8000ce8:	fa96 f3a6 	rbit	r3, r6
 8000cec:	fab3 f383 	clz	r3, r3
 8000cf0:	f003 031f 	and.w	r3, r3, #31
 8000cf4:	fa05 f303 	lsl.w	r3, r5, r3
 8000cf8:	4213      	tst	r3, r2
 8000cfa:	d105      	bne.n	8000d08 <HAL_RCC_OscConfig+0x1a0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000cfc:	f7ff ff2c 	bl	8000b58 <HAL_GetTick>
 8000d00:	1bc0      	subs	r0, r0, r7
 8000d02:	2802      	cmp	r0, #2
 8000d04:	d9ec      	bls.n	8000ce0 <HAL_RCC_OscConfig+0x178>
 8000d06:	e792      	b.n	8000c2e <HAL_RCC_OscConfig+0xc6>
            return HAL_TIMEOUT;
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000d08:	6803      	ldr	r3, [r0, #0]
 8000d0a:	22f8      	movs	r2, #248	; 0xf8
 8000d0c:	fa92 f2a2 	rbit	r2, r2
 8000d10:	6961      	ldr	r1, [r4, #20]
 8000d12:	fab2 f282 	clz	r2, r2
 8000d16:	fa01 f202 	lsl.w	r2, r1, r2
 8000d1a:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8000d1e:	4313      	orrs	r3, r2
 8000d20:	6003      	str	r3, [r0, #0]
 8000d22:	e020      	b.n	8000d66 <HAL_RCC_OscConfig+0x1fe>
 8000d24:	fa95 f3a5 	rbit	r3, r5
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000d28:	fab3 f383 	clz	r3, r3
 8000d2c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8000d30:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8000d34:	009b      	lsls	r3, r3, #2
 8000d36:	2602      	movs	r6, #2
 8000d38:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000d3a:	f7ff ff0d 	bl	8000b58 <HAL_GetTick>
 8000d3e:	4607      	mov	r7, r0
 8000d40:	fa96 f3a6 	rbit	r3, r6
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000d44:	680a      	ldr	r2, [r1, #0]
 8000d46:	fa96 f3a6 	rbit	r3, r6
 8000d4a:	fab3 f383 	clz	r3, r3
 8000d4e:	f003 031f 	and.w	r3, r3, #31
 8000d52:	fa05 f303 	lsl.w	r3, r5, r3
 8000d56:	4213      	tst	r3, r2
 8000d58:	d005      	beq.n	8000d66 <HAL_RCC_OscConfig+0x1fe>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000d5a:	f7ff fefd 	bl	8000b58 <HAL_GetTick>
 8000d5e:	1bc0      	subs	r0, r0, r7
 8000d60:	2802      	cmp	r0, #2
 8000d62:	d9ed      	bls.n	8000d40 <HAL_RCC_OscConfig+0x1d8>
 8000d64:	e763      	b.n	8000c2e <HAL_RCC_OscConfig+0xc6>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000d66:	6823      	ldr	r3, [r4, #0]
 8000d68:	071e      	lsls	r6, r3, #28
 8000d6a:	d403      	bmi.n	8000d74 <HAL_RCC_OscConfig+0x20c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000d6c:	6823      	ldr	r3, [r4, #0]
 8000d6e:	075d      	lsls	r5, r3, #29
 8000d70:	d44a      	bmi.n	8000e08 <HAL_RCC_OscConfig+0x2a0>
 8000d72:	e0de      	b.n	8000f32 <HAL_RCC_OscConfig+0x3ca>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000d74:	69a0      	ldr	r0, [r4, #24]
 8000d76:	4d38      	ldr	r5, [pc, #224]	; (8000e58 <HAL_RCC_OscConfig+0x2f0>)
 8000d78:	2101      	movs	r1, #1
 8000d7a:	b310      	cbz	r0, 8000dc2 <HAL_RCC_OscConfig+0x25a>
 8000d7c:	fa91 f2a1 	rbit	r2, r1
      __HAL_RCC_LSI_ENABLE();
 8000d80:	4b36      	ldr	r3, [pc, #216]	; (8000e5c <HAL_RCC_OscConfig+0x2f4>)
 8000d82:	fab2 f282 	clz	r2, r2
 8000d86:	4413      	add	r3, r2
 8000d88:	009b      	lsls	r3, r3, #2
 8000d8a:	2602      	movs	r6, #2
 8000d8c:	6019      	str	r1, [r3, #0]
      tickstart = HAL_GetTick();
 8000d8e:	f7ff fee3 	bl	8000b58 <HAL_GetTick>
 8000d92:	4607      	mov	r7, r0
 8000d94:	fa96 f3a6 	rbit	r3, r6
 8000d98:	fa96 f3a6 	rbit	r3, r6
 8000d9c:	fa96 f3a6 	rbit	r3, r6
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000da0:	6a6a      	ldr	r2, [r5, #36]	; 0x24
 8000da2:	fa96 f3a6 	rbit	r3, r6
 8000da6:	fab3 f383 	clz	r3, r3
 8000daa:	f003 031f 	and.w	r3, r3, #31
 8000dae:	fa01 f303 	lsl.w	r3, r1, r3
 8000db2:	4213      	tst	r3, r2
 8000db4:	d1da      	bne.n	8000d6c <HAL_RCC_OscConfig+0x204>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000db6:	f7ff fecf 	bl	8000b58 <HAL_GetTick>
 8000dba:	1bc0      	subs	r0, r0, r7
 8000dbc:	2802      	cmp	r0, #2
 8000dbe:	d9e9      	bls.n	8000d94 <HAL_RCC_OscConfig+0x22c>
 8000dc0:	e735      	b.n	8000c2e <HAL_RCC_OscConfig+0xc6>
 8000dc2:	fa91 f2a1 	rbit	r2, r1
      __HAL_RCC_LSI_DISABLE();
 8000dc6:	4b25      	ldr	r3, [pc, #148]	; (8000e5c <HAL_RCC_OscConfig+0x2f4>)
 8000dc8:	fab2 f282 	clz	r2, r2
 8000dcc:	4413      	add	r3, r2
 8000dce:	009b      	lsls	r3, r3, #2
 8000dd0:	2602      	movs	r6, #2
 8000dd2:	6018      	str	r0, [r3, #0]
      tickstart = HAL_GetTick();
 8000dd4:	f7ff fec0 	bl	8000b58 <HAL_GetTick>
 8000dd8:	4607      	mov	r7, r0
 8000dda:	fa96 f3a6 	rbit	r3, r6
 8000dde:	fa96 f3a6 	rbit	r3, r6
 8000de2:	fa96 f3a6 	rbit	r3, r6
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000de6:	6a6a      	ldr	r2, [r5, #36]	; 0x24
 8000de8:	fa96 f3a6 	rbit	r3, r6
 8000dec:	fab3 f383 	clz	r3, r3
 8000df0:	f003 031f 	and.w	r3, r3, #31
 8000df4:	fa01 f303 	lsl.w	r3, r1, r3
 8000df8:	4213      	tst	r3, r2
 8000dfa:	d0b7      	beq.n	8000d6c <HAL_RCC_OscConfig+0x204>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000dfc:	f7ff feac 	bl	8000b58 <HAL_GetTick>
 8000e00:	1bc0      	subs	r0, r0, r7
 8000e02:	2802      	cmp	r0, #2
 8000e04:	d9e9      	bls.n	8000dda <HAL_RCC_OscConfig+0x272>
 8000e06:	e712      	b.n	8000c2e <HAL_RCC_OscConfig+0xc6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000e08:	4913      	ldr	r1, [pc, #76]	; (8000e58 <HAL_RCC_OscConfig+0x2f0>)
 8000e0a:	69cb      	ldr	r3, [r1, #28]
 8000e0c:	00d8      	lsls	r0, r3, #3
 8000e0e:	d40a      	bmi.n	8000e26 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000e10:	69cb      	ldr	r3, [r1, #28]
 8000e12:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000e16:	61cb      	str	r3, [r1, #28]
 8000e18:	69cb      	ldr	r3, [r1, #28]
 8000e1a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e1e:	9301      	str	r3, [sp, #4]
 8000e20:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8000e22:	2501      	movs	r5, #1
 8000e24:	e000      	b.n	8000e28 <HAL_RCC_OscConfig+0x2c0>
    FlagStatus       pwrclkchanged = RESET;
 8000e26:	2500      	movs	r5, #0
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000e28:	4e0d      	ldr	r6, [pc, #52]	; (8000e60 <HAL_RCC_OscConfig+0x2f8>)
 8000e2a:	6833      	ldr	r3, [r6, #0]
 8000e2c:	05da      	lsls	r2, r3, #23
 8000e2e:	d503      	bpl.n	8000e38 <HAL_RCC_OscConfig+0x2d0>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000e30:	68e3      	ldr	r3, [r4, #12]
 8000e32:	2b01      	cmp	r3, #1
 8000e34:	d116      	bne.n	8000e64 <HAL_RCC_OscConfig+0x2fc>
 8000e36:	e02b      	b.n	8000e90 <HAL_RCC_OscConfig+0x328>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000e38:	6833      	ldr	r3, [r6, #0]
 8000e3a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000e3e:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 8000e40:	f7ff fe8a 	bl	8000b58 <HAL_GetTick>
 8000e44:	4607      	mov	r7, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000e46:	6833      	ldr	r3, [r6, #0]
 8000e48:	05db      	lsls	r3, r3, #23
 8000e4a:	d4f1      	bmi.n	8000e30 <HAL_RCC_OscConfig+0x2c8>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000e4c:	f7ff fe84 	bl	8000b58 <HAL_GetTick>
 8000e50:	1bc0      	subs	r0, r0, r7
 8000e52:	2864      	cmp	r0, #100	; 0x64
 8000e54:	d9f7      	bls.n	8000e46 <HAL_RCC_OscConfig+0x2de>
 8000e56:	e6ea      	b.n	8000c2e <HAL_RCC_OscConfig+0xc6>
 8000e58:	40021000 	.word	0x40021000
 8000e5c:	10908120 	.word	0x10908120
 8000e60:	40007000 	.word	0x40007000
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000e64:	b973      	cbnz	r3, 8000e84 <HAL_RCC_OscConfig+0x31c>
 8000e66:	6a0b      	ldr	r3, [r1, #32]
 8000e68:	f023 0301 	bic.w	r3, r3, #1
 8000e6c:	620b      	str	r3, [r1, #32]
 8000e6e:	6a0b      	ldr	r3, [r1, #32]
 8000e70:	f023 0304 	bic.w	r3, r3, #4
 8000e74:	620b      	str	r3, [r1, #32]
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000e76:	f7ff fe6f 	bl	8000b58 <HAL_GetTick>
 8000e7a:	2602      	movs	r6, #2
 8000e7c:	4681      	mov	r9, r0
 8000e7e:	46b0      	mov	r8, r6
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000e80:	2701      	movs	r7, #1
 8000e82:	e03c      	b.n	8000efe <HAL_RCC_OscConfig+0x396>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000e84:	2b05      	cmp	r3, #5
 8000e86:	6a0b      	ldr	r3, [r1, #32]
 8000e88:	d106      	bne.n	8000e98 <HAL_RCC_OscConfig+0x330>
 8000e8a:	f043 0304 	orr.w	r3, r3, #4
 8000e8e:	620b      	str	r3, [r1, #32]
 8000e90:	6a0b      	ldr	r3, [r1, #32]
 8000e92:	f043 0301 	orr.w	r3, r3, #1
 8000e96:	e005      	b.n	8000ea4 <HAL_RCC_OscConfig+0x33c>
 8000e98:	f023 0301 	bic.w	r3, r3, #1
 8000e9c:	620b      	str	r3, [r1, #32]
 8000e9e:	6a0b      	ldr	r3, [r1, #32]
 8000ea0:	f023 0304 	bic.w	r3, r3, #4
 8000ea4:	620b      	str	r3, [r1, #32]
      tickstart = HAL_GetTick();
 8000ea6:	f7ff fe57 	bl	8000b58 <HAL_GetTick>
 8000eaa:	2602      	movs	r6, #2
 8000eac:	4681      	mov	r9, r0
 8000eae:	46b0      	mov	r8, r6
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000eb0:	2701      	movs	r7, #1
 8000eb2:	fa96 f3a6 	rbit	r3, r6
 8000eb6:	fa96 f3a6 	rbit	r3, r6
 8000eba:	b10b      	cbz	r3, 8000ec0 <HAL_RCC_OscConfig+0x358>
 8000ebc:	6a0a      	ldr	r2, [r1, #32]
 8000ebe:	e002      	b.n	8000ec6 <HAL_RCC_OscConfig+0x35e>
 8000ec0:	fa96 f3a6 	rbit	r3, r6
 8000ec4:	6a4a      	ldr	r2, [r1, #36]	; 0x24
 8000ec6:	fa98 f3a8 	rbit	r3, r8
 8000eca:	fab3 f383 	clz	r3, r3
 8000ece:	f003 031f 	and.w	r3, r3, #31
 8000ed2:	fa07 f303 	lsl.w	r3, r7, r3
 8000ed6:	4213      	tst	r3, r2
 8000ed8:	d121      	bne.n	8000f1e <HAL_RCC_OscConfig+0x3b6>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000eda:	f7ff fe3d 	bl	8000b58 <HAL_GetTick>
 8000ede:	f241 3388 	movw	r3, #5000	; 0x1388
 8000ee2:	ebc9 0000 	rsb	r0, r9, r0
 8000ee6:	4298      	cmp	r0, r3
 8000ee8:	d9e3      	bls.n	8000eb2 <HAL_RCC_OscConfig+0x34a>
 8000eea:	e6a0      	b.n	8000c2e <HAL_RCC_OscConfig+0xc6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000eec:	f7ff fe34 	bl	8000b58 <HAL_GetTick>
 8000ef0:	f241 3388 	movw	r3, #5000	; 0x1388
 8000ef4:	ebc9 0000 	rsb	r0, r9, r0
 8000ef8:	4298      	cmp	r0, r3
 8000efa:	f63f ae98 	bhi.w	8000c2e <HAL_RCC_OscConfig+0xc6>
 8000efe:	fa96 f3a6 	rbit	r3, r6
 8000f02:	fa96 f3a6 	rbit	r3, r6
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000f06:	b183      	cbz	r3, 8000f2a <HAL_RCC_OscConfig+0x3c2>
 8000f08:	6a0a      	ldr	r2, [r1, #32]
 8000f0a:	fa98 f3a8 	rbit	r3, r8
 8000f0e:	fab3 f383 	clz	r3, r3
 8000f12:	f003 031f 	and.w	r3, r3, #31
 8000f16:	fa07 f303 	lsl.w	r3, r7, r3
 8000f1a:	4213      	tst	r3, r2
 8000f1c:	d1e6      	bne.n	8000eec <HAL_RCC_OscConfig+0x384>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8000f1e:	b145      	cbz	r5, 8000f32 <HAL_RCC_OscConfig+0x3ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8000f20:	69cb      	ldr	r3, [r1, #28]
 8000f22:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8000f26:	61cb      	str	r3, [r1, #28]
 8000f28:	e003      	b.n	8000f32 <HAL_RCC_OscConfig+0x3ca>
 8000f2a:	fa96 f3a6 	rbit	r3, r6
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000f2e:	6a4a      	ldr	r2, [r1, #36]	; 0x24
 8000f30:	e7eb      	b.n	8000f0a <HAL_RCC_OscConfig+0x3a2>
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000f32:	69e2      	ldr	r2, [r4, #28]
 8000f34:	b90a      	cbnz	r2, 8000f3a <HAL_RCC_OscConfig+0x3d2>
    {
      return HAL_ERROR;
    }
  }
  
  return HAL_OK;
 8000f36:	2000      	movs	r0, #0
 8000f38:	e082      	b.n	8001040 <HAL_RCC_OscConfig+0x4d8>
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000f3a:	4943      	ldr	r1, [pc, #268]	; (8001048 <HAL_RCC_OscConfig+0x4e0>)
 8000f3c:	684b      	ldr	r3, [r1, #4]
 8000f3e:	f003 030c 	and.w	r3, r3, #12
 8000f42:	2b08      	cmp	r3, #8
 8000f44:	f43f ae3b 	beq.w	8000bbe <HAL_RCC_OscConfig+0x56>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000f48:	2a02      	cmp	r2, #2
 8000f4a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000f4e:	d153      	bne.n	8000ff8 <HAL_RCC_OscConfig+0x490>
 8000f50:	fa93 f3a3 	rbit	r3, r3
        __HAL_RCC_PLL_DISABLE();
 8000f54:	fab3 f383 	clz	r3, r3
 8000f58:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8000f5c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8000f60:	009b      	lsls	r3, r3, #2
 8000f62:	2200      	movs	r2, #0
 8000f64:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000f66:	f7ff fdf7 	bl	8000b58 <HAL_GetTick>
 8000f6a:	f04f 7600 	mov.w	r6, #33554432	; 0x2000000
 8000f6e:	4680      	mov	r8, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000f70:	2701      	movs	r7, #1
 8000f72:	fa96 f3a6 	rbit	r3, r6
 8000f76:	4834      	ldr	r0, [pc, #208]	; (8001048 <HAL_RCC_OscConfig+0x4e0>)
 8000f78:	680a      	ldr	r2, [r1, #0]
 8000f7a:	fa96 f3a6 	rbit	r3, r6
 8000f7e:	fab3 f383 	clz	r3, r3
 8000f82:	f003 031f 	and.w	r3, r3, #31
 8000f86:	fa07 f303 	lsl.w	r3, r7, r3
 8000f8a:	4213      	tst	r3, r2
 8000f8c:	f04f 0501 	mov.w	r5, #1
 8000f90:	d006      	beq.n	8000fa0 <HAL_RCC_OscConfig+0x438>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000f92:	f7ff fde1 	bl	8000b58 <HAL_GetTick>
 8000f96:	ebc8 0000 	rsb	r0, r8, r0
 8000f9a:	2802      	cmp	r0, #2
 8000f9c:	d9e9      	bls.n	8000f72 <HAL_RCC_OscConfig+0x40a>
 8000f9e:	e646      	b.n	8000c2e <HAL_RCC_OscConfig+0xc6>
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8000fa0:	6843      	ldr	r3, [r0, #4]
 8000fa2:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8000fa4:	6a22      	ldr	r2, [r4, #32]
 8000fa6:	f423 1374 	bic.w	r3, r3, #3997696	; 0x3d0000
 8000faa:	4332      	orrs	r2, r6
 8000fac:	4313      	orrs	r3, r2
 8000fae:	6043      	str	r3, [r0, #4]
 8000fb0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000fb4:	fa93 f3a3 	rbit	r3, r3
        __HAL_RCC_PLL_ENABLE();
 8000fb8:	fab3 f383 	clz	r3, r3
 8000fbc:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8000fc0:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8000fc4:	009b      	lsls	r3, r3, #2
 8000fc6:	f04f 7400 	mov.w	r4, #33554432	; 0x2000000
 8000fca:	601d      	str	r5, [r3, #0]
        tickstart = HAL_GetTick();
 8000fcc:	f7ff fdc4 	bl	8000b58 <HAL_GetTick>
 8000fd0:	4606      	mov	r6, r0
 8000fd2:	fa94 f3a4 	rbit	r3, r4
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8000fd6:	680a      	ldr	r2, [r1, #0]
 8000fd8:	fa94 f3a4 	rbit	r3, r4
 8000fdc:	fab3 f383 	clz	r3, r3
 8000fe0:	f003 031f 	and.w	r3, r3, #31
 8000fe4:	fa05 f303 	lsl.w	r3, r5, r3
 8000fe8:	4213      	tst	r3, r2
 8000fea:	d1a4      	bne.n	8000f36 <HAL_RCC_OscConfig+0x3ce>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000fec:	f7ff fdb4 	bl	8000b58 <HAL_GetTick>
 8000ff0:	1b80      	subs	r0, r0, r6
 8000ff2:	2802      	cmp	r0, #2
 8000ff4:	d9ed      	bls.n	8000fd2 <HAL_RCC_OscConfig+0x46a>
 8000ff6:	e61a      	b.n	8000c2e <HAL_RCC_OscConfig+0xc6>
 8000ff8:	fa93 f3a3 	rbit	r3, r3
        __HAL_RCC_PLL_DISABLE();
 8000ffc:	fab3 f383 	clz	r3, r3
 8001000:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001004:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001008:	009b      	lsls	r3, r3, #2
 800100a:	2200      	movs	r2, #0
 800100c:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 800100e:	f7ff fda3 	bl	8000b58 <HAL_GetTick>
 8001012:	f04f 7400 	mov.w	r4, #33554432	; 0x2000000
 8001016:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001018:	2501      	movs	r5, #1
 800101a:	fa94 f3a4 	rbit	r3, r4
 800101e:	680a      	ldr	r2, [r1, #0]
 8001020:	fa94 f3a4 	rbit	r3, r4
 8001024:	fab3 f383 	clz	r3, r3
 8001028:	f003 031f 	and.w	r3, r3, #31
 800102c:	fa05 f303 	lsl.w	r3, r5, r3
 8001030:	4213      	tst	r3, r2
 8001032:	d080      	beq.n	8000f36 <HAL_RCC_OscConfig+0x3ce>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001034:	f7ff fd90 	bl	8000b58 <HAL_GetTick>
 8001038:	1b80      	subs	r0, r0, r6
 800103a:	2802      	cmp	r0, #2
 800103c:	d9ed      	bls.n	800101a <HAL_RCC_OscConfig+0x4b2>
 800103e:	e5f6      	b.n	8000c2e <HAL_RCC_OscConfig+0xc6>
}
 8001040:	b003      	add	sp, #12
 8001042:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8001046:	bf00      	nop
 8001048:	40021000 	.word	0x40021000

0800104c <HAL_RCC_ClockConfig>:
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 800104c:	4a4f      	ldr	r2, [pc, #316]	; (800118c <HAL_RCC_ClockConfig+0x140>)
{
 800104e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8001050:	6813      	ldr	r3, [r2, #0]
 8001052:	f003 0307 	and.w	r3, r3, #7
 8001056:	428b      	cmp	r3, r1
{
 8001058:	4605      	mov	r5, r0
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 800105a:	d30a      	bcc.n	8001072 <HAL_RCC_ClockConfig+0x26>
      return HAL_ERROR;
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800105c:	6828      	ldr	r0, [r5, #0]
 800105e:	0784      	lsls	r4, r0, #30
 8001060:	d513      	bpl.n	800108a <HAL_RCC_ClockConfig+0x3e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001062:	4c4b      	ldr	r4, [pc, #300]	; (8001190 <HAL_RCC_ClockConfig+0x144>)
 8001064:	6863      	ldr	r3, [r4, #4]
 8001066:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800106a:	68ab      	ldr	r3, [r5, #8]
 800106c:	4313      	orrs	r3, r2
 800106e:	6063      	str	r3, [r4, #4]
 8001070:	e00b      	b.n	800108a <HAL_RCC_ClockConfig+0x3e>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001072:	6813      	ldr	r3, [r2, #0]
 8001074:	f023 0307 	bic.w	r3, r3, #7
 8001078:	430b      	orrs	r3, r1
 800107a:	6013      	str	r3, [r2, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800107c:	6813      	ldr	r3, [r2, #0]
 800107e:	f003 0307 	and.w	r3, r3, #7
 8001082:	4299      	cmp	r1, r3
 8001084:	d0ea      	beq.n	800105c <HAL_RCC_ClockConfig+0x10>
      return HAL_ERROR;
 8001086:	2001      	movs	r0, #1
 8001088:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800108a:	07c2      	lsls	r2, r0, #31
 800108c:	d406      	bmi.n	800109c <HAL_RCC_ClockConfig+0x50>
        }
      }
    }      
  }    
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 800108e:	4a3f      	ldr	r2, [pc, #252]	; (800118c <HAL_RCC_ClockConfig+0x140>)
 8001090:	6813      	ldr	r3, [r2, #0]
 8001092:	f003 0307 	and.w	r3, r3, #7
 8001096:	4299      	cmp	r1, r3
 8001098:	d356      	bcc.n	8001148 <HAL_RCC_ClockConfig+0xfc>
 800109a:	e05f      	b.n	800115c <HAL_RCC_ClockConfig+0x110>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800109c:	686a      	ldr	r2, [r5, #4]
 800109e:	4c3c      	ldr	r4, [pc, #240]	; (8001190 <HAL_RCC_ClockConfig+0x144>)
 80010a0:	2a01      	cmp	r2, #1
 80010a2:	d10e      	bne.n	80010c2 <HAL_RCC_ClockConfig+0x76>
 80010a4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80010a8:	fa93 f0a3 	rbit	r0, r3
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80010ac:	6820      	ldr	r0, [r4, #0]
 80010ae:	fa93 f3a3 	rbit	r3, r3
 80010b2:	fab3 f383 	clz	r3, r3
 80010b6:	f003 031f 	and.w	r3, r3, #31
 80010ba:	fa02 f303 	lsl.w	r3, r2, r3
 80010be:	4203      	tst	r3, r0
 80010c0:	e011      	b.n	80010e6 <HAL_RCC_ClockConfig+0x9a>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80010c2:	2a02      	cmp	r2, #2
 80010c4:	bf0c      	ite	eq
 80010c6:	f04f 7300 	moveq.w	r3, #33554432	; 0x2000000
 80010ca:	2302      	movne	r3, #2
 80010cc:	fa93 f0a3 	rbit	r0, r3
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80010d0:	6826      	ldr	r6, [r4, #0]
 80010d2:	fa93 f3a3 	rbit	r3, r3
 80010d6:	fab3 f383 	clz	r3, r3
 80010da:	f003 031f 	and.w	r3, r3, #31
 80010de:	2001      	movs	r0, #1
 80010e0:	fa00 f303 	lsl.w	r3, r0, r3
 80010e4:	4233      	tst	r3, r6
 80010e6:	d0ce      	beq.n	8001086 <HAL_RCC_ClockConfig+0x3a>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80010e8:	6863      	ldr	r3, [r4, #4]
 80010ea:	f023 0303 	bic.w	r3, r3, #3
 80010ee:	431a      	orrs	r2, r3
 80010f0:	6062      	str	r2, [r4, #4]
    tickstart = HAL_GetTick();
 80010f2:	f7ff fd31 	bl	8000b58 <HAL_GetTick>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80010f6:	686b      	ldr	r3, [r5, #4]
 80010f8:	2b01      	cmp	r3, #1
    tickstart = HAL_GetTick();
 80010fa:	4606      	mov	r6, r0
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80010fc:	f241 3788 	movw	r7, #5000	; 0x1388
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001100:	d10b      	bne.n	800111a <HAL_RCC_ClockConfig+0xce>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8001102:	6863      	ldr	r3, [r4, #4]
 8001104:	f003 030c 	and.w	r3, r3, #12
 8001108:	2b04      	cmp	r3, #4
 800110a:	d0c0      	beq.n	800108e <HAL_RCC_ClockConfig+0x42>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800110c:	f7ff fd24 	bl	8000b58 <HAL_GetTick>
 8001110:	1b80      	subs	r0, r0, r6
 8001112:	42b8      	cmp	r0, r7
 8001114:	d9f5      	bls.n	8001102 <HAL_RCC_ClockConfig+0xb6>
          return HAL_TIMEOUT;
 8001116:	2003      	movs	r0, #3
 8001118:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800111a:	2b02      	cmp	r3, #2
 800111c:	d10f      	bne.n	800113e <HAL_RCC_ClockConfig+0xf2>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800111e:	6863      	ldr	r3, [r4, #4]
 8001120:	f003 030c 	and.w	r3, r3, #12
 8001124:	2b08      	cmp	r3, #8
 8001126:	d0b2      	beq.n	800108e <HAL_RCC_ClockConfig+0x42>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001128:	f7ff fd16 	bl	8000b58 <HAL_GetTick>
 800112c:	1b80      	subs	r0, r0, r6
 800112e:	42b8      	cmp	r0, r7
 8001130:	d9f5      	bls.n	800111e <HAL_RCC_ClockConfig+0xd2>
 8001132:	e7f0      	b.n	8001116 <HAL_RCC_ClockConfig+0xca>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001134:	f7ff fd10 	bl	8000b58 <HAL_GetTick>
 8001138:	1b80      	subs	r0, r0, r6
 800113a:	42b8      	cmp	r0, r7
 800113c:	d8eb      	bhi.n	8001116 <HAL_RCC_ClockConfig+0xca>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 800113e:	6863      	ldr	r3, [r4, #4]
 8001140:	f013 0f0c 	tst.w	r3, #12
 8001144:	d1f6      	bne.n	8001134 <HAL_RCC_ClockConfig+0xe8>
 8001146:	e7a2      	b.n	800108e <HAL_RCC_ClockConfig+0x42>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001148:	6813      	ldr	r3, [r2, #0]
 800114a:	f023 0307 	bic.w	r3, r3, #7
 800114e:	430b      	orrs	r3, r1
 8001150:	6013      	str	r3, [r2, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001152:	6813      	ldr	r3, [r2, #0]
 8001154:	f003 0307 	and.w	r3, r3, #7
 8001158:	4299      	cmp	r1, r3
 800115a:	d194      	bne.n	8001086 <HAL_RCC_ClockConfig+0x3a>
      return HAL_ERROR;
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800115c:	6828      	ldr	r0, [r5, #0]
 800115e:	0743      	lsls	r3, r0, #29
 8001160:	d506      	bpl.n	8001170 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001162:	490b      	ldr	r1, [pc, #44]	; (8001190 <HAL_RCC_ClockConfig+0x144>)
 8001164:	684b      	ldr	r3, [r1, #4]
 8001166:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800116a:	68eb      	ldr	r3, [r5, #12]
 800116c:	4313      	orrs	r3, r2
 800116e:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001170:	f010 0008 	ands.w	r0, r0, #8
 8001174:	d008      	beq.n	8001188 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001176:	4a06      	ldr	r2, [pc, #24]	; (8001190 <HAL_RCC_ClockConfig+0x144>)
 8001178:	6929      	ldr	r1, [r5, #16]
 800117a:	6853      	ldr	r3, [r2, #4]
 800117c:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8001180:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8001184:	6053      	str	r3, [r2, #4]
  //SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];

  /* Configure the source of time base considering new system clocks settings*/
  //HAL_InitTick (TICK_INT_PRIORITY);
  
  return HAL_OK;
 8001186:	2000      	movs	r0, #0
}
 8001188:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800118a:	bf00      	nop
 800118c:	40022000 	.word	0x40022000
 8001190:	40021000 	.word	0x40021000

08001194 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001194:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        temp &= ~((0x0FU) << (4U * (position & 0x03U)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001198:	f8df 9184 	ldr.w	r9, [pc, #388]	; 8001320 <HAL_GPIO_Init+0x18c>
  while (((GPIO_Init->Pin) >> position) != RESET)
 800119c:	680b      	ldr	r3, [r1, #0]
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800119e:	f8df 8184 	ldr.w	r8, [pc, #388]	; 8001324 <HAL_GPIO_Init+0x190>
{
 80011a2:	b085      	sub	sp, #20
 80011a4:	464c      	mov	r4, r9
  while (((GPIO_Init->Pin) >> position) != RESET)
 80011a6:	9301      	str	r3, [sp, #4]
  uint32_t position = 0x00U;
 80011a8:	2300      	movs	r3, #0
  while (((GPIO_Init->Pin) >> position) != RESET)
 80011aa:	9a01      	ldr	r2, [sp, #4]
 80011ac:	40da      	lsrs	r2, r3
 80011ae:	f000 80b1 	beq.w	8001314 <HAL_GPIO_Init+0x180>
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 80011b2:	2201      	movs	r2, #1
 80011b4:	fa02 fa03 	lsl.w	sl, r2, r3
    if(iocurrent)
 80011b8:	9a01      	ldr	r2, [sp, #4]
 80011ba:	ea12 060a 	ands.w	r6, r2, sl
 80011be:	f000 80a7 	beq.w	8001310 <HAL_GPIO_Init+0x17c>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80011c2:	684a      	ldr	r2, [r1, #4]
 80011c4:	f022 0e10 	bic.w	lr, r2, #16
 80011c8:	f1be 0f02 	cmp.w	lr, #2
 80011cc:	d114      	bne.n	80011f8 <HAL_GPIO_Init+0x64>
 80011ce:	ea4f 0cd3 	mov.w	ip, r3, lsr #3
 80011d2:	eb00 0c8c 	add.w	ip, r0, ip, lsl #2
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80011d6:	f003 0b07 	and.w	fp, r3, #7
        temp = GPIOx->AFR[position >> 3];
 80011da:	f8dc 7020 	ldr.w	r7, [ip, #32]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80011de:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 80011e2:	250f      	movs	r5, #15
 80011e4:	fa05 f50b 	lsl.w	r5, r5, fp
 80011e8:	ea27 0505 	bic.w	r5, r7, r5
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80011ec:	690f      	ldr	r7, [r1, #16]
 80011ee:	fa07 f70b 	lsl.w	r7, r7, fp
 80011f2:	432f      	orrs	r7, r5
        GPIOx->AFR[position >> 3] = temp;
 80011f4:	f8cc 7020 	str.w	r7, [ip, #32]
 80011f8:	ea4f 0b43 	mov.w	fp, r3, lsl #1
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80011fc:	2703      	movs	r7, #3
      temp = GPIOx->MODER;
 80011fe:	6805      	ldr	r5, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001200:	fa07 fc0b 	lsl.w	ip, r7, fp
 8001204:	ea6f 0c0c 	mvn.w	ip, ip
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001208:	4017      	ands	r7, r2
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800120a:	ea05 050c 	and.w	r5, r5, ip
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800120e:	fa07 f70b 	lsl.w	r7, r7, fp
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001212:	f10e 3eff 	add.w	lr, lr, #4294967295	; 0xffffffff
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001216:	433d      	orrs	r5, r7
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001218:	f1be 0f01 	cmp.w	lr, #1
      GPIOx->MODER = temp;
 800121c:	6005      	str	r5, [r0, #0]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800121e:	d810      	bhi.n	8001242 <HAL_GPIO_Init+0xae>
        temp = GPIOx->OSPEEDR;
 8001220:	6885      	ldr	r5, [r0, #8]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001222:	68cf      	ldr	r7, [r1, #12]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001224:	ea0c 0505 	and.w	r5, ip, r5
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001228:	fa07 f70b 	lsl.w	r7, r7, fp
 800122c:	432f      	orrs	r7, r5
        GPIOx->OSPEEDR = temp;
 800122e:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 8001230:	6845      	ldr	r5, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001232:	ea25 0a0a 	bic.w	sl, r5, sl
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001236:	f3c2 1500 	ubfx	r5, r2, #4, #1
 800123a:	409d      	lsls	r5, r3
 800123c:	ea45 050a 	orr.w	r5, r5, sl
        GPIOx->OTYPER = temp;
 8001240:	6045      	str	r5, [r0, #4]
      temp = GPIOx->PUPDR;
 8001242:	68c5      	ldr	r5, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001244:	ea0c 0c05 	and.w	ip, ip, r5
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001248:	688d      	ldr	r5, [r1, #8]
 800124a:	fa05 f50b 	lsl.w	r5, r5, fp
 800124e:	ea45 050c 	orr.w	r5, r5, ip
      GPIOx->PUPDR = temp;
 8001252:	60c5      	str	r5, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001254:	00d5      	lsls	r5, r2, #3
 8001256:	d55b      	bpl.n	8001310 <HAL_GPIO_Init+0x17c>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001258:	f8d8 5018 	ldr.w	r5, [r8, #24]
 800125c:	f045 0501 	orr.w	r5, r5, #1
 8001260:	f8c8 5018 	str.w	r5, [r8, #24]
 8001264:	f8d8 5018 	ldr.w	r5, [r8, #24]
 8001268:	f023 0e03 	bic.w	lr, r3, #3
 800126c:	f10e 4e80 	add.w	lr, lr, #1073741824	; 0x40000000
 8001270:	f005 0501 	and.w	r5, r5, #1
 8001274:	f50e 3e80 	add.w	lr, lr, #65536	; 0x10000
 8001278:	9503      	str	r5, [sp, #12]
        temp &= ~((0x0FU) << (4U * (position & 0x03U)));
 800127a:	f003 0c03 	and.w	ip, r3, #3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800127e:	9d03      	ldr	r5, [sp, #12]
        temp = SYSCFG->EXTICR[position >> 2];
 8001280:	f8de 5008 	ldr.w	r5, [lr, #8]
        temp &= ~((0x0FU) << (4U * (position & 0x03U)));
 8001284:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 8001288:	270f      	movs	r7, #15
 800128a:	fa07 f70c 	lsl.w	r7, r7, ip
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800128e:	f1b0 4f90 	cmp.w	r0, #1207959552	; 0x48000000
        temp &= ~((0x0FU) << (4U * (position & 0x03U)));
 8001292:	ea25 0507 	bic.w	r5, r5, r7
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001296:	d011      	beq.n	80012bc <HAL_GPIO_Init+0x128>
 8001298:	4f20      	ldr	r7, [pc, #128]	; (800131c <HAL_GPIO_Init+0x188>)
 800129a:	42b8      	cmp	r0, r7
 800129c:	d010      	beq.n	80012c0 <HAL_GPIO_Init+0x12c>
 800129e:	f507 6780 	add.w	r7, r7, #1024	; 0x400
 80012a2:	42b8      	cmp	r0, r7
 80012a4:	d00e      	beq.n	80012c4 <HAL_GPIO_Init+0x130>
 80012a6:	f507 6780 	add.w	r7, r7, #1024	; 0x400
 80012aa:	42b8      	cmp	r0, r7
 80012ac:	d00c      	beq.n	80012c8 <HAL_GPIO_Init+0x134>
 80012ae:	f507 6780 	add.w	r7, r7, #1024	; 0x400
 80012b2:	42b8      	cmp	r0, r7
 80012b4:	bf14      	ite	ne
 80012b6:	2705      	movne	r7, #5
 80012b8:	2704      	moveq	r7, #4
 80012ba:	e006      	b.n	80012ca <HAL_GPIO_Init+0x136>
 80012bc:	2700      	movs	r7, #0
 80012be:	e004      	b.n	80012ca <HAL_GPIO_Init+0x136>
 80012c0:	2701      	movs	r7, #1
 80012c2:	e002      	b.n	80012ca <HAL_GPIO_Init+0x136>
 80012c4:	2702      	movs	r7, #2
 80012c6:	e000      	b.n	80012ca <HAL_GPIO_Init+0x136>
 80012c8:	2703      	movs	r7, #3
 80012ca:	fa07 fc0c 	lsl.w	ip, r7, ip
 80012ce:	ea4c 0505 	orr.w	r5, ip, r5
        SYSCFG->EXTICR[position >> 2] = temp;
 80012d2:	f8ce 5008 	str.w	r5, [lr, #8]
        temp = EXTI->IMR;
 80012d6:	f8d9 5000 	ldr.w	r5, [r9]
        temp &= ~((uint32_t)iocurrent);
 80012da:	43f7      	mvns	r7, r6
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80012dc:	f412 3f80 	tst.w	r2, #65536	; 0x10000
        temp &= ~((uint32_t)iocurrent);
 80012e0:	bf0c      	ite	eq
 80012e2:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 80012e4:	4335      	orrne	r5, r6
        }
        EXTI->IMR = temp;
 80012e6:	6025      	str	r5, [r4, #0]

        temp = EXTI->EMR;
 80012e8:	6865      	ldr	r5, [r4, #4]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80012ea:	f412 3f00 	tst.w	r2, #131072	; 0x20000
        temp &= ~((uint32_t)iocurrent);
 80012ee:	bf0c      	ite	eq
 80012f0:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 80012f2:	4335      	orrne	r5, r6
        }
        EXTI->EMR = temp;
 80012f4:	6065      	str	r5, [r4, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80012f6:	68a5      	ldr	r5, [r4, #8]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80012f8:	f412 1f80 	tst.w	r2, #1048576	; 0x100000
        temp &= ~((uint32_t)iocurrent);
 80012fc:	bf0c      	ite	eq
 80012fe:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 8001300:	4335      	orrne	r5, r6
        }
        EXTI->RTSR = temp;
 8001302:	60a5      	str	r5, [r4, #8]

        temp = EXTI->FTSR;
 8001304:	68e5      	ldr	r5, [r4, #12]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001306:	0292      	lsls	r2, r2, #10
        temp &= ~((uint32_t)iocurrent);
 8001308:	bf54      	ite	pl
 800130a:	403d      	andpl	r5, r7
        {
          temp |= iocurrent;
 800130c:	4335      	orrmi	r5, r6
        }
        EXTI->FTSR = temp;
 800130e:	60e5      	str	r5, [r4, #12]
      }
    }
    
    position++;
 8001310:	3301      	adds	r3, #1
 8001312:	e74a      	b.n	80011aa <HAL_GPIO_Init+0x16>
  }
}
 8001314:	b005      	add	sp, #20
 8001316:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800131a:	bf00      	nop
 800131c:	48000400 	.word	0x48000400
 8001320:	40010400 	.word	0x40010400
 8001324:	40021000 	.word	0x40021000

08001328 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001328:	b10a      	cbz	r2, 800132e <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800132a:	6181      	str	r1, [r0, #24]
 800132c:	4770      	bx	lr
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800132e:	6281      	str	r1, [r0, #40]	; 0x28
 8001330:	4770      	bx	lr
 8001332:	0000      	movs	r0, r0

08001334 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart: UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001334:	b530      	push	{r4, r5, lr}
   *  set the M bits according to huart->Init.WordLength value
   *  set PCE and PS bits according to huart->Init.Parity value
   *  set TE and RE bits according to huart->Init.Mode value
   *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 8001336:	6902      	ldr	r2, [r0, #16]
 8001338:	6885      	ldr	r5, [r0, #8]
 800133a:	6801      	ldr	r1, [r0, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800133c:	69c3      	ldr	r3, [r0, #28]
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 800133e:	680c      	ldr	r4, [r1, #0]
 8001340:	4315      	orrs	r5, r2
 8001342:	6942      	ldr	r2, [r0, #20]
 8001344:	432a      	orrs	r2, r5
 8001346:	ea42 0503 	orr.w	r5, r2, r3
 800134a:	f424 4216 	bic.w	r2, r4, #38400	; 0x9600
 800134e:	f022 020c 	bic.w	r2, r2, #12
 8001352:	432a      	orrs	r2, r5
 8001354:	600a      	str	r2, [r1, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
   * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001356:	684a      	ldr	r2, [r1, #4]
   * - UART HardWare Flow Control: set CTSE and RTSE bits according
   *   to huart->Init.HwFlowCtl value
   * - one-bit sampling method versus three samples' majority rule according
   *   to huart->Init.OneBitSampling */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
 8001358:	6985      	ldr	r5, [r0, #24]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800135a:	f422 5440 	bic.w	r4, r2, #12288	; 0x3000
 800135e:	68c2      	ldr	r2, [r0, #12]
 8001360:	4322      	orrs	r2, r4
 8001362:	604a      	str	r2, [r1, #4]
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
 8001364:	688a      	ldr	r2, [r1, #8]
 8001366:	6a04      	ldr	r4, [r0, #32]
 8001368:	f422 6230 	bic.w	r2, r2, #2816	; 0xb00
 800136c:	432c      	orrs	r4, r5
 800136e:	4322      	orrs	r2, r4
 8001370:	608a      	str	r2, [r1, #8]

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8001372:	4a5d      	ldr	r2, [pc, #372]	; (80014e8 <UART_SetConfig+0x1b4>)
 8001374:	4291      	cmp	r1, r2
 8001376:	d10a      	bne.n	800138e <UART_SetConfig+0x5a>
 8001378:	f502 4258 	add.w	r2, r2, #55296	; 0xd800
 800137c:	4c5b      	ldr	r4, [pc, #364]	; (80014ec <UART_SetConfig+0x1b8>)
 800137e:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001380:	f002 0203 	and.w	r2, r2, #3

  /* Check UART Over Sampling to set Baud Rate Register */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001384:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001388:	5ca2      	ldrb	r2, [r4, r2]
 800138a:	d04b      	beq.n	8001424 <UART_SetConfig+0xf0>
 800138c:	e07f      	b.n	800148e <UART_SetConfig+0x15a>
  UART_GETCLOCKSOURCE(huart, clocksource);
 800138e:	4a58      	ldr	r2, [pc, #352]	; (80014f0 <UART_SetConfig+0x1bc>)
 8001390:	4291      	cmp	r1, r2
 8001392:	d10e      	bne.n	80013b2 <UART_SetConfig+0x7e>
 8001394:	f502 32e6 	add.w	r2, r2, #117760	; 0x1cc00
 8001398:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800139a:	f402 3240 	and.w	r2, r2, #196608	; 0x30000
 800139e:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 80013a2:	d054      	beq.n	800144e <UART_SetConfig+0x11a>
 80013a4:	d935      	bls.n	8001412 <UART_SetConfig+0xde>
 80013a6:	f5b2 3f00 	cmp.w	r2, #131072	; 0x20000
 80013aa:	d058      	beq.n	800145e <UART_SetConfig+0x12a>
 80013ac:	f5b2 3f40 	cmp.w	r2, #196608	; 0x30000
 80013b0:	e036      	b.n	8001420 <UART_SetConfig+0xec>
 80013b2:	4a50      	ldr	r2, [pc, #320]	; (80014f4 <UART_SetConfig+0x1c0>)
 80013b4:	4291      	cmp	r1, r2
 80013b6:	d10e      	bne.n	80013d6 <UART_SetConfig+0xa2>
 80013b8:	f502 32e4 	add.w	r2, r2, #116736	; 0x1c800
 80013bc:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80013be:	f402 2240 	and.w	r2, r2, #786432	; 0xc0000
 80013c2:	f5b2 2f80 	cmp.w	r2, #262144	; 0x40000
 80013c6:	d042      	beq.n	800144e <UART_SetConfig+0x11a>
 80013c8:	d923      	bls.n	8001412 <UART_SetConfig+0xde>
 80013ca:	f5b2 2f00 	cmp.w	r2, #524288	; 0x80000
 80013ce:	d046      	beq.n	800145e <UART_SetConfig+0x12a>
 80013d0:	f5b2 2f40 	cmp.w	r2, #786432	; 0xc0000
 80013d4:	e024      	b.n	8001420 <UART_SetConfig+0xec>
 80013d6:	4a48      	ldr	r2, [pc, #288]	; (80014f8 <UART_SetConfig+0x1c4>)
 80013d8:	4291      	cmp	r1, r2
 80013da:	d10e      	bne.n	80013fa <UART_SetConfig+0xc6>
 80013dc:	f502 32e2 	add.w	r2, r2, #115712	; 0x1c400
 80013e0:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80013e2:	f402 1240 	and.w	r2, r2, #3145728	; 0x300000
 80013e6:	f5b2 1f80 	cmp.w	r2, #1048576	; 0x100000
 80013ea:	d030      	beq.n	800144e <UART_SetConfig+0x11a>
 80013ec:	d911      	bls.n	8001412 <UART_SetConfig+0xde>
 80013ee:	f5b2 1f00 	cmp.w	r2, #2097152	; 0x200000
 80013f2:	d034      	beq.n	800145e <UART_SetConfig+0x12a>
 80013f4:	f5b2 1f40 	cmp.w	r2, #3145728	; 0x300000
 80013f8:	e012      	b.n	8001420 <UART_SetConfig+0xec>
 80013fa:	4a40      	ldr	r2, [pc, #256]	; (80014fc <UART_SetConfig+0x1c8>)
 80013fc:	4291      	cmp	r1, r2
 80013fe:	d13a      	bne.n	8001476 <UART_SetConfig+0x142>
 8001400:	f502 32e0 	add.w	r2, r2, #114688	; 0x1c000
 8001404:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001406:	f402 0240 	and.w	r2, r2, #12582912	; 0xc00000
 800140a:	f5b2 0f80 	cmp.w	r2, #4194304	; 0x400000
 800140e:	d01e      	beq.n	800144e <UART_SetConfig+0x11a>
 8001410:	d801      	bhi.n	8001416 <UART_SetConfig+0xe2>
 8001412:	b1e2      	cbz	r2, 800144e <UART_SetConfig+0x11a>
 8001414:	e02f      	b.n	8001476 <UART_SetConfig+0x142>
 8001416:	f5b2 0f00 	cmp.w	r2, #8388608	; 0x800000
 800141a:	d020      	beq.n	800145e <UART_SetConfig+0x12a>
 800141c:	f5b2 0f40 	cmp.w	r2, #12582912	; 0xc00000
 8001420:	d009      	beq.n	8001436 <UART_SetConfig+0x102>
 8001422:	e028      	b.n	8001476 <UART_SetConfig+0x142>
  {
    switch (clocksource)
 8001424:	2a08      	cmp	r2, #8
 8001426:	d829      	bhi.n	800147c <UART_SetConfig+0x148>
 8001428:	e8df f002 	tbb	[pc, r2]
 800142c:	28081414 	.word	0x28081414
 8001430:	28282814 	.word	0x28282814
 8001434:	1c          	.byte	0x1c
 8001435:	00          	.byte	0x00
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001436:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800143a:	d13b      	bne.n	80014b4 <UART_SetConfig+0x180>
        break;
      case UART_CLOCKSOURCE_PCLK2:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
        break;
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 800143c:	6840      	ldr	r0, [r0, #4]
 800143e:	0842      	lsrs	r2, r0, #1
 8001440:	f102 73f4 	add.w	r3, r2, #31981568	; 0x1e80000
 8001444:	f503 4390 	add.w	r3, r3, #18432	; 0x4800
 8001448:	fbb3 f3f0 	udiv	r3, r3, r0
 800144c:	e010      	b.n	8001470 <UART_SetConfig+0x13c>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800144e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001452:	d138      	bne.n	80014c6 <UART_SetConfig+0x192>
        break;
      case UART_CLOCKSOURCE_SYSCLK:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8001454:	6842      	ldr	r2, [r0, #4]
 8001456:	0853      	lsrs	r3, r2, #1
 8001458:	f503 0361 	add.w	r3, r3, #14745600	; 0xe10000
 800145c:	e006      	b.n	800146c <UART_SetConfig+0x138>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800145e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001462:	d135      	bne.n	80014d0 <UART_SetConfig+0x19c>
        break;
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8001464:	6842      	ldr	r2, [r0, #4]
 8001466:	0853      	lsrs	r3, r2, #1
 8001468:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 800146c:	fbb3 f3f2 	udiv	r3, r3, r2
 8001470:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 8001472:	2000      	movs	r0, #0
        break;
 8001474:	e004      	b.n	8001480 <UART_SetConfig+0x14c>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001476:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800147a:	d133      	bne.n	80014e4 <UART_SetConfig+0x1b0>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 800147c:	2001      	movs	r0, #1
  uint16_t usartdiv                   = 0x0000U;
 800147e:	2300      	movs	r3, #0
        break;
    }

    brrtemp = usartdiv & 0xFFF0U;
 8001480:	f023 020f 	bic.w	r2, r3, #15
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
    huart->Instance->BRR = brrtemp;
 8001484:	f3c3 0342 	ubfx	r3, r3, #1, #3
 8001488:	4313      	orrs	r3, r2
 800148a:	60cb      	str	r3, [r1, #12]
 800148c:	bd30      	pop	{r4, r5, pc}
  }
  else
  {
    switch (clocksource)
 800148e:	2a08      	cmp	r2, #8
 8001490:	d828      	bhi.n	80014e4 <UART_SetConfig+0x1b0>
 8001492:	e8df f002 	tbb	[pc, r2]
 8001496:	0518      	.short	0x0518
 8001498:	2718270f 	.word	0x2718270f
 800149c:	2727      	.short	0x2727
 800149e:	1d          	.byte	0x1d
 800149f:	00          	.byte	0x00
    {
      case UART_CLOCKSOURCE_PCLK1:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
        break;
      case UART_CLOCKSOURCE_PCLK2:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 80014a0:	6842      	ldr	r2, [r0, #4]
 80014a2:	0853      	lsrs	r3, r2, #1
 80014a4:	f503 03e1 	add.w	r3, r3, #7372800	; 0x708000
 80014a8:	fbb3 f3f2 	udiv	r3, r3, r2
 80014ac:	4a0e      	ldr	r2, [pc, #56]	; (80014e8 <UART_SetConfig+0x1b4>)
 80014ae:	b29b      	uxth	r3, r3
 80014b0:	60d3      	str	r3, [r2, #12]
 80014b2:	e015      	b.n	80014e0 <UART_SetConfig+0x1ac>
        break;
      case UART_CLOCKSOURCE_HSI:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 80014b4:	6840      	ldr	r0, [r0, #4]
 80014b6:	0842      	lsrs	r2, r0, #1
 80014b8:	f502 0374 	add.w	r3, r2, #15990784	; 0xf40000
 80014bc:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
 80014c0:	fbb3 f3f0 	udiv	r3, r3, r0
 80014c4:	e00a      	b.n	80014dc <UART_SetConfig+0x1a8>
        break;
      case UART_CLOCKSOURCE_SYSCLK:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 80014c6:	6842      	ldr	r2, [r0, #4]
 80014c8:	0853      	lsrs	r3, r2, #1
 80014ca:	f503 03e1 	add.w	r3, r3, #7372800	; 0x708000
 80014ce:	e003      	b.n	80014d8 <UART_SetConfig+0x1a4>
        break;
      case UART_CLOCKSOURCE_LSE:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 80014d0:	6842      	ldr	r2, [r0, #4]
 80014d2:	0853      	lsrs	r3, r2, #1
 80014d4:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 80014d8:	fbb3 f3f2 	udiv	r3, r3, r2
 80014dc:	b29b      	uxth	r3, r3
 80014de:	60cb      	str	r3, [r1, #12]
  HAL_StatusTypeDef ret               = HAL_OK;
 80014e0:	2000      	movs	r0, #0
        break;
 80014e2:	bd30      	pop	{r4, r5, pc}
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 80014e4:	2001      	movs	r0, #1
        break;
    }
  }

  return ret;
 80014e6:	bd30      	pop	{r4, r5, pc}
 80014e8:	40013800 	.word	0x40013800
 80014ec:	08001844 	.word	0x08001844
 80014f0:	40004400 	.word	0x40004400
 80014f4:	40004800 	.word	0x40004800
 80014f8:	40004c00 	.word	0x40004c00
 80014fc:	40005000 	.word	0x40005000

08001500 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8001500:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001502:	9d06      	ldr	r5, [sp, #24]
 8001504:	4604      	mov	r4, r0
 8001506:	4616      	mov	r6, r2
 8001508:	461f      	mov	r7, r3
  /* Wait until flag is set */
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800150a:	6820      	ldr	r0, [r4, #0]
 800150c:	69c2      	ldr	r2, [r0, #28]
 800150e:	ea31 0302 	bics.w	r3, r1, r2
 8001512:	bf0c      	ite	eq
 8001514:	2201      	moveq	r2, #1
 8001516:	2200      	movne	r2, #0
 8001518:	42b2      	cmp	r2, r6
 800151a:	d11b      	bne.n	8001554 <UART_WaitOnFlagUntilTimeout+0x54>
  {
    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
 800151c:	1c6b      	adds	r3, r5, #1
 800151e:	d0f5      	beq.n	800150c <UART_WaitOnFlagUntilTimeout+0xc>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 8001520:	b995      	cbnz	r5, 8001548 <UART_WaitOnFlagUntilTimeout+0x48>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8001522:	6823      	ldr	r3, [r4, #0]
 8001524:	681a      	ldr	r2, [r3, #0]
 8001526:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800152a:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800152c:	689a      	ldr	r2, [r3, #8]
 800152e:	f022 0201 	bic.w	r2, r2, #1
 8001532:	609a      	str	r2, [r3, #8]

        huart->gState  = HAL_UART_STATE_READY;
 8001534:	2320      	movs	r3, #32
 8001536:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
        huart->RxState = HAL_UART_STATE_READY;
 800153a:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800153e:	2300      	movs	r3, #0
 8001540:	f884 3068 	strb.w	r3, [r4, #104]	; 0x68
 8001544:	2003      	movs	r0, #3
 8001546:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 8001548:	f7ff fb06 	bl	8000b58 <HAL_GetTick>
 800154c:	1bc0      	subs	r0, r0, r7
 800154e:	4285      	cmp	r5, r0
 8001550:	d2db      	bcs.n	800150a <UART_WaitOnFlagUntilTimeout+0xa>
 8001552:	e7e6      	b.n	8001522 <UART_WaitOnFlagUntilTimeout+0x22>
        return HAL_TIMEOUT;
      }
    }
  }
  return HAL_OK;
 8001554:	2000      	movs	r0, #0
}
 8001556:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08001558 <UART_CheckIdleState>:
{
 8001558:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800155a:	4604      	mov	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800155c:	2100      	movs	r1, #0
 800155e:	66c1      	str	r1, [r0, #108]	; 0x6c
  tickstart = HAL_GetTick();
 8001560:	f7ff fafa 	bl	8000b58 <HAL_GetTick>
  if((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8001564:	6823      	ldr	r3, [r4, #0]
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	071a      	lsls	r2, r3, #28
  tickstart = HAL_GetTick();
 800156a:	4605      	mov	r5, r0
  if((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800156c:	d404      	bmi.n	8001578 <UART_CheckIdleState+0x20>
  if((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800156e:	6823      	ldr	r3, [r4, #0]
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	075b      	lsls	r3, r3, #29
 8001574:	d51a      	bpl.n	80015ac <UART_CheckIdleState+0x54>
 8001576:	e00d      	b.n	8001594 <UART_CheckIdleState+0x3c>
    if(UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8001578:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800157c:	9300      	str	r3, [sp, #0]
 800157e:	460a      	mov	r2, r1
 8001580:	4603      	mov	r3, r0
 8001582:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8001586:	4620      	mov	r0, r4
 8001588:	f7ff ffba 	bl	8001500 <UART_WaitOnFlagUntilTimeout>
 800158c:	2800      	cmp	r0, #0
 800158e:	d0ee      	beq.n	800156e <UART_CheckIdleState+0x16>
      return HAL_TIMEOUT;
 8001590:	2003      	movs	r0, #3
 8001592:	e013      	b.n	80015bc <UART_CheckIdleState+0x64>
    if(UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8001594:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8001598:	9300      	str	r3, [sp, #0]
 800159a:	2200      	movs	r2, #0
 800159c:	462b      	mov	r3, r5
 800159e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80015a2:	4620      	mov	r0, r4
 80015a4:	f7ff ffac 	bl	8001500 <UART_WaitOnFlagUntilTimeout>
 80015a8:	2800      	cmp	r0, #0
 80015aa:	d1f1      	bne.n	8001590 <UART_CheckIdleState+0x38>
  huart->gState  = HAL_UART_STATE_READY;
 80015ac:	2320      	movs	r3, #32
  __HAL_UNLOCK(huart);
 80015ae:	2000      	movs	r0, #0
  huart->gState  = HAL_UART_STATE_READY;
 80015b0:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
  __HAL_UNLOCK(huart);
 80015b4:	f884 0068 	strb.w	r0, [r4, #104]	; 0x68
  huart->RxState = HAL_UART_STATE_READY;
 80015b8:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a
}
 80015bc:	b003      	add	sp, #12
 80015be:	bd30      	pop	{r4, r5, pc}

080015c0 <HAL_UART_Init>:
{
 80015c0:	b510      	push	{r4, lr}
  if(huart == NULL)
 80015c2:	4604      	mov	r4, r0
 80015c4:	b328      	cbz	r0, 8001612 <HAL_UART_Init+0x52>
  if(huart->gState == HAL_UART_STATE_RESET)
 80015c6:	f890 3069 	ldrb.w	r3, [r0, #105]	; 0x69
 80015ca:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80015ce:	b90b      	cbnz	r3, 80015d4 <HAL_UART_Init+0x14>
    huart->Lock = HAL_UNLOCKED;
 80015d0:	f880 2068 	strb.w	r2, [r0, #104]	; 0x68
  __HAL_UART_DISABLE(huart);
 80015d4:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 80015d6:	2324      	movs	r3, #36	; 0x24
 80015d8:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
  __HAL_UART_DISABLE(huart);
 80015dc:	6813      	ldr	r3, [r2, #0]
 80015de:	f023 0301 	bic.w	r3, r3, #1
 80015e2:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 80015e4:	4620      	mov	r0, r4
 80015e6:	f7ff fea5 	bl	8001334 <UART_SetConfig>
 80015ea:	2801      	cmp	r0, #1
 80015ec:	d011      	beq.n	8001612 <HAL_UART_Init+0x52>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80015ee:	6823      	ldr	r3, [r4, #0]
 80015f0:	685a      	ldr	r2, [r3, #4]
 80015f2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80015f6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80015f8:	689a      	ldr	r2, [r3, #8]
 80015fa:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80015fe:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 8001600:	681a      	ldr	r2, [r3, #0]
 8001602:	f042 0201 	orr.w	r2, r2, #1
  return UART_CheckIdleState(huart);
 8001606:	4620      	mov	r0, r4
  __HAL_UART_ENABLE(huart);
 8001608:	601a      	str	r2, [r3, #0]
}
 800160a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return UART_CheckIdleState(huart);
 800160e:	f7ff bfa3 	b.w	8001558 <UART_CheckIdleState>
}
 8001612:	2001      	movs	r0, #1
 8001614:	bd10      	pop	{r4, pc}

08001616 <HAL_UART_Transmit>:
  * @param Size: Amount of data to be sent.
  * @param Timeout: Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001616:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8001618:	461f      	mov	r7, r3
  uint16_t* tmp;
  uint32_t tickstart = 0U;

  /* Check that a Tx process is not already ongoing */
  if(huart->gState == HAL_UART_STATE_READY)
 800161a:	f890 3069 	ldrb.w	r3, [r0, #105]	; 0x69
 800161e:	2b20      	cmp	r3, #32
{
 8001620:	460d      	mov	r5, r1
 8001622:	4604      	mov	r4, r0
 8001624:	4611      	mov	r1, r2
  if(huart->gState == HAL_UART_STATE_READY)
 8001626:	d14b      	bne.n	80016c0 <HAL_UART_Transmit+0xaa>
  {
    if((pData == NULL ) || (Size == 0U))
 8001628:	2d00      	cmp	r5, #0
 800162a:	d047      	beq.n	80016bc <HAL_UART_Transmit+0xa6>
 800162c:	2a00      	cmp	r2, #0
 800162e:	d045      	beq.n	80016bc <HAL_UART_Transmit+0xa6>
    {
      return  HAL_ERROR;
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8001630:	f890 3068 	ldrb.w	r3, [r0, #104]	; 0x68
 8001634:	2b01      	cmp	r3, #1
 8001636:	d043      	beq.n	80016c0 <HAL_UART_Transmit+0xaa>
 8001638:	2301      	movs	r3, #1
 800163a:	f880 3068 	strb.w	r3, [r0, #104]	; 0x68

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800163e:	2300      	movs	r3, #0
 8001640:	66c3      	str	r3, [r0, #108]	; 0x6c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001642:	2321      	movs	r3, #33	; 0x21
 8001644:	f880 3069 	strb.w	r3, [r0, #105]	; 0x69

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 8001648:	f7ff fa86 	bl	8000b58 <HAL_GetTick>
 800164c:	4606      	mov	r6, r0

    huart->TxXferSize = Size;
 800164e:	f8a4 1050 	strh.w	r1, [r4, #80]	; 0x50
    huart->TxXferCount = Size;
 8001652:	f8a4 1052 	strh.w	r1, [r4, #82]	; 0x52
    while(huart->TxXferCount > 0U)
 8001656:	f8b4 2052 	ldrh.w	r2, [r4, #82]	; 0x52
 800165a:	b292      	uxth	r2, r2
 800165c:	b302      	cbz	r2, 80016a0 <HAL_UART_Transmit+0x8a>
    {
      huart->TxXferCount--;
 800165e:	f8b4 3052 	ldrh.w	r3, [r4, #82]	; 0x52
      if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001662:	9700      	str	r7, [sp, #0]
      huart->TxXferCount--;
 8001664:	3b01      	subs	r3, #1
 8001666:	b29b      	uxth	r3, r3
 8001668:	f8a4 3052 	strh.w	r3, [r4, #82]	; 0x52
      if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800166c:	2200      	movs	r2, #0
 800166e:	4633      	mov	r3, r6
 8001670:	2180      	movs	r1, #128	; 0x80
 8001672:	4620      	mov	r0, r4
 8001674:	f7ff ff44 	bl	8001500 <UART_WaitOnFlagUntilTimeout>
 8001678:	b108      	cbz	r0, 800167e <HAL_UART_Transmit+0x68>
      {
        return HAL_TIMEOUT;
 800167a:	2003      	movs	r0, #3
 800167c:	e021      	b.n	80016c2 <HAL_UART_Transmit+0xac>
      }
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800167e:	68a3      	ldr	r3, [r4, #8]
 8001680:	6822      	ldr	r2, [r4, #0]
 8001682:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001686:	d107      	bne.n	8001698 <HAL_UART_Transmit+0x82>
 8001688:	6923      	ldr	r3, [r4, #16]
 800168a:	b92b      	cbnz	r3, 8001698 <HAL_UART_Transmit+0x82>
      {
        tmp = (uint16_t*) pData;
        huart->Instance->TDR = (*tmp & (uint16_t)0x01FFU);
 800168c:	f835 3b02 	ldrh.w	r3, [r5], #2
 8001690:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001694:	8513      	strh	r3, [r2, #40]	; 0x28
        pData += 2U;
 8001696:	e7de      	b.n	8001656 <HAL_UART_Transmit+0x40>
      }
      else
      {
        huart->Instance->TDR = (*pData++ & (uint8_t)0xFFU);
 8001698:	782b      	ldrb	r3, [r5, #0]
 800169a:	8513      	strh	r3, [r2, #40]	; 0x28
 800169c:	3501      	adds	r5, #1
 800169e:	e7da      	b.n	8001656 <HAL_UART_Transmit+0x40>
      }
    }
    if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80016a0:	9700      	str	r7, [sp, #0]
 80016a2:	4633      	mov	r3, r6
 80016a4:	2140      	movs	r1, #64	; 0x40
 80016a6:	4620      	mov	r0, r4
 80016a8:	f7ff ff2a 	bl	8001500 <UART_WaitOnFlagUntilTimeout>
 80016ac:	2800      	cmp	r0, #0
 80016ae:	d1e4      	bne.n	800167a <HAL_UART_Transmit+0x64>
    {
      return HAL_TIMEOUT;
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80016b0:	2320      	movs	r3, #32
 80016b2:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80016b6:	f884 0068 	strb.w	r0, [r4, #104]	; 0x68

    return HAL_OK;
 80016ba:	e002      	b.n	80016c2 <HAL_UART_Transmit+0xac>
      return  HAL_ERROR;
 80016bc:	2001      	movs	r0, #1
 80016be:	e000      	b.n	80016c2 <HAL_UART_Transmit+0xac>
  }
  else
  {
    return HAL_BUSY;
 80016c0:	2002      	movs	r0, #2
  }
}
 80016c2:	b003      	add	sp, #12
 80016c4:	bdf0      	pop	{r4, r5, r6, r7, pc}

080016c6 <HAL_UART_Receive>:
  * @param Size: amount of data to be received.
  * @param Timeout: Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80016c6:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 80016ca:	4698      	mov	r8, r3
  uint16_t* tmp;
  uint16_t uhMask;
  uint32_t tickstart = 0U;

  /* Check that a Rx process is not already ongoing */
  if(huart->RxState == HAL_UART_STATE_READY)
 80016cc:	f890 306a 	ldrb.w	r3, [r0, #106]	; 0x6a
 80016d0:	2b20      	cmp	r3, #32
{
 80016d2:	460d      	mov	r5, r1
 80016d4:	4604      	mov	r4, r0
 80016d6:	4611      	mov	r1, r2
  if(huart->RxState == HAL_UART_STATE_READY)
 80016d8:	d15a      	bne.n	8001790 <HAL_UART_Receive+0xca>
  {
    if((pData == NULL ) || (Size == 0U))
 80016da:	2d00      	cmp	r5, #0
 80016dc:	d056      	beq.n	800178c <HAL_UART_Receive+0xc6>
 80016de:	2a00      	cmp	r2, #0
 80016e0:	d054      	beq.n	800178c <HAL_UART_Receive+0xc6>
    {
      return  HAL_ERROR;
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80016e2:	f890 3068 	ldrb.w	r3, [r0, #104]	; 0x68
 80016e6:	2b01      	cmp	r3, #1
 80016e8:	d052      	beq.n	8001790 <HAL_UART_Receive+0xca>
 80016ea:	2301      	movs	r3, #1
 80016ec:	f880 3068 	strb.w	r3, [r0, #104]	; 0x68

    huart->Instance->ICR = 0xFFFFFFFF;
 80016f0:	6803      	ldr	r3, [r0, #0]
 80016f2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80016f6:	621a      	str	r2, [r3, #32]
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80016f8:	2300      	movs	r3, #0
 80016fa:	66c3      	str	r3, [r0, #108]	; 0x6c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80016fc:	2322      	movs	r3, #34	; 0x22
 80016fe:	f880 306a 	strb.w	r3, [r0, #106]	; 0x6a

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 8001702:	f7ff fa29 	bl	8000b58 <HAL_GetTick>

    huart->RxXferSize = Size;
    huart->RxXferCount = Size;

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8001706:	68a3      	ldr	r3, [r4, #8]
    huart->RxXferSize = Size;
 8001708:	f8a4 1058 	strh.w	r1, [r4, #88]	; 0x58
    UART_MASK_COMPUTATION(huart);
 800170c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
    tickstart = HAL_GetTick();
 8001710:	4607      	mov	r7, r0
    huart->RxXferCount = Size;
 8001712:	f8a4 105a 	strh.w	r1, [r4, #90]	; 0x5a
    UART_MASK_COMPUTATION(huart);
 8001716:	d106      	bne.n	8001726 <HAL_UART_Receive+0x60>
 8001718:	6923      	ldr	r3, [r4, #16]
 800171a:	b913      	cbnz	r3, 8001722 <HAL_UART_Receive+0x5c>
 800171c:	f240 13ff 	movw	r3, #511	; 0x1ff
 8001720:	e006      	b.n	8001730 <HAL_UART_Receive+0x6a>
 8001722:	23ff      	movs	r3, #255	; 0xff
 8001724:	e004      	b.n	8001730 <HAL_UART_Receive+0x6a>
 8001726:	b92b      	cbnz	r3, 8001734 <HAL_UART_Receive+0x6e>
 8001728:	6923      	ldr	r3, [r4, #16]
 800172a:	2b00      	cmp	r3, #0
 800172c:	d0f9      	beq.n	8001722 <HAL_UART_Receive+0x5c>
 800172e:	237f      	movs	r3, #127	; 0x7f
 8001730:	f8a4 305c 	strh.w	r3, [r4, #92]	; 0x5c
    uhMask = huart->Mask;
 8001734:	f8b4 605c 	ldrh.w	r6, [r4, #92]	; 0x5c

    /* as long as data have to be received */
    while(huart->RxXferCount > 0U)
 8001738:	f8b4 005a 	ldrh.w	r0, [r4, #90]	; 0x5a
 800173c:	b280      	uxth	r0, r0
 800173e:	b1f8      	cbz	r0, 8001780 <HAL_UART_Receive+0xba>
    {
      huart->RxXferCount--;
 8001740:	f8b4 305a 	ldrh.w	r3, [r4, #90]	; 0x5a
      if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8001744:	f8cd 8000 	str.w	r8, [sp]
      huart->RxXferCount--;
 8001748:	3b01      	subs	r3, #1
 800174a:	b29b      	uxth	r3, r3
 800174c:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
      if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8001750:	2200      	movs	r2, #0
 8001752:	463b      	mov	r3, r7
 8001754:	2120      	movs	r1, #32
 8001756:	4620      	mov	r0, r4
 8001758:	f7ff fed2 	bl	8001500 <UART_WaitOnFlagUntilTimeout>
 800175c:	b9d0      	cbnz	r0, 8001794 <HAL_UART_Receive+0xce>
      {
        return HAL_TIMEOUT;
      }
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800175e:	68a3      	ldr	r3, [r4, #8]
 8001760:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001764:	6823      	ldr	r3, [r4, #0]
 8001766:	d106      	bne.n	8001776 <HAL_UART_Receive+0xb0>
 8001768:	6922      	ldr	r2, [r4, #16]
 800176a:	b922      	cbnz	r2, 8001776 <HAL_UART_Receive+0xb0>
      {
        tmp = (uint16_t*) pData ;
        *tmp = (uint16_t)(huart->Instance->RDR & uhMask);
 800176c:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800176e:	4033      	ands	r3, r6
 8001770:	f825 3b02 	strh.w	r3, [r5], #2
        pData +=2U;
 8001774:	e7e0      	b.n	8001738 <HAL_UART_Receive+0x72>
      }
      else
      {
        *pData++ = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8001776:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8001778:	4033      	ands	r3, r6
 800177a:	702b      	strb	r3, [r5, #0]
 800177c:	3501      	adds	r5, #1
 800177e:	e7db      	b.n	8001738 <HAL_UART_Receive+0x72>
      }
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8001780:	2320      	movs	r3, #32
 8001782:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8001786:	f884 0068 	strb.w	r0, [r4, #104]	; 0x68

    return HAL_OK;
 800178a:	e004      	b.n	8001796 <HAL_UART_Receive+0xd0>
      return  HAL_ERROR;
 800178c:	2001      	movs	r0, #1
 800178e:	e002      	b.n	8001796 <HAL_UART_Receive+0xd0>
  }
  else
  {
    return HAL_BUSY;
 8001790:	2002      	movs	r0, #2
 8001792:	e000      	b.n	8001796 <HAL_UART_Receive+0xd0>
        return HAL_TIMEOUT;
 8001794:	2003      	movs	r0, #3
  }
}
 8001796:	b002      	add	sp, #8
 8001798:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800179c <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 800179c:	b508      	push	{r3, lr}
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 800179e:	4b0a      	ldr	r3, [pc, #40]	; (80017c8 <_sbrk+0x2c>)
 80017a0:	681a      	ldr	r2, [r3, #0]
 80017a2:	b90a      	cbnz	r2, 80017a8 <_sbrk+0xc>
		heap_end = &end;
 80017a4:	4a09      	ldr	r2, [pc, #36]	; (80017cc <_sbrk+0x30>)
 80017a6:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 80017a8:	681b      	ldr	r3, [r3, #0]
	if (heap_end + incr > stack_ptr)
 80017aa:	466a      	mov	r2, sp
 80017ac:	4418      	add	r0, r3
 80017ae:	4290      	cmp	r0, r2
 80017b0:	d906      	bls.n	80017c0 <_sbrk+0x24>
	{
		errno = ENOMEM;
 80017b2:	f7fe fd3b 	bl	800022c <__errno>
 80017b6:	230c      	movs	r3, #12
 80017b8:	6003      	str	r3, [r0, #0]
		return (caddr_t) -1;
 80017ba:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80017be:	bd08      	pop	{r3, pc}
	}

	heap_end += incr;
 80017c0:	4a01      	ldr	r2, [pc, #4]	; (80017c8 <_sbrk+0x2c>)
 80017c2:	6010      	str	r0, [r2, #0]

	return (caddr_t) prev_heap_end;
 80017c4:	4618      	mov	r0, r3
}
 80017c6:	bd08      	pop	{r3, pc}
 80017c8:	200002dc 	.word	0x200002dc
 80017cc:	20000360 	.word	0x20000360

080017d0 <Reset_Handler>:
 80017d0:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 80017d2:	e003      	b.n	80017dc <LoopCopyDataInit>

080017d4 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 80017d4:	4b0b      	ldr	r3, [pc, #44]	; (8001804 <LoopForever+0x2>)
	ldr	r3, [r3, r1]
 80017d6:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 80017d8:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 80017da:	3104      	adds	r1, #4

080017dc <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 80017dc:	480a      	ldr	r0, [pc, #40]	; (8001808 <LoopForever+0x6>)
	ldr	r3, =_edata
 80017de:	4b0b      	ldr	r3, [pc, #44]	; (800180c <LoopForever+0xa>)
	adds	r2, r0, r1
 80017e0:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 80017e2:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 80017e4:	d3f6      	bcc.n	80017d4 <CopyDataInit>
	ldr	r2, =_sbss
 80017e6:	4a0a      	ldr	r2, [pc, #40]	; (8001810 <LoopForever+0xe>)
	b	LoopFillZerobss
 80017e8:	e002      	b.n	80017f0 <LoopFillZerobss>

080017ea <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs r3, #0
 80017ea:	2300      	movs	r3, #0
 	str  r3, [r2]
 80017ec:	6013      	str	r3, [r2, #0]
	adds r2, r2, #4
 80017ee:	3204      	adds	r2, #4

080017f0 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 80017f0:	4b08      	ldr	r3, [pc, #32]	; (8001814 <LoopForever+0x12>)
	cmp	r2, r3
 80017f2:	429a      	cmp	r2, r3
	bcc	FillZerobss
 80017f4:	d3f9      	bcc.n	80017ea <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80017f6:	f3af 8000 	nop.w
/* Call static constructors */
    bl __libc_init_array
 80017fa:	f7fe fd1d 	bl	8000238 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80017fe:	f7fe ffeb 	bl	80007d8 <main>

08001802 <LoopForever>:



LoopForever:
    b LoopForever
 8001802:	e7fe      	b.n	8001802 <LoopForever>
 8001804:	08001854 	.word	0x08001854
 8001808:	20000000 	.word	0x20000000
 800180c:	20000164 	.word	0x20000164
 8001810:	20000164 	.word	0x20000164
 8001814:	2000035c 	.word	0x2000035c

08001818 <BusFault_Handler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001818:	e7fe      	b.n	8001818 <BusFault_Handler>
 800181a:	0000      	movs	r0, r0

0800181c <_init>:
 800181c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800181e:	bf00      	nop
 8001820:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001822:	bc08      	pop	{r3}
 8001824:	469e      	mov	lr, r3
 8001826:	4770      	bx	lr

08001828 <_fini>:
 8001828:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800182a:	bf00      	nop
 800182c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800182e:	bc08      	pop	{r3}
 8001830:	469e      	mov	lr, r3
 8001832:	4770      	bx	lr
