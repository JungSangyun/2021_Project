
simpleserial-base-CW308_STM32F3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000016ac  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000114  08001834  08001834  00011834  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001948  08001948  00020028  2**0
                  CONTENTS
  4 .ARM          00000000  08001948  08001948  00020028  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001948  08001948  00020028  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001948  08001948  00011948  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800194c  0800194c  0001194c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000028  20000000  08001950  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000158  20000028  08001978  00020028  2**2
                  ALLOC
 10 ._user_heap_stack 00000400  20000180  08001978  00020180  2**0
                  ALLOC
 11 .ARM.attributes 0000002a  00000000  00000000  00020028  2**0
                  CONTENTS, READONLY
 12 .comment      0000002b  00000000  00000000  00020052  2**0
                  CONTENTS, READONLY
 13 .debug_info   00003f4e  00000000  00000000  0002007d  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_abbrev 00000bf5  00000000  00000000  00023fcb  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_loc    00001eec  00000000  00000000  00024bc0  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_aranges 00000200  00000000  00000000  00026aac  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_ranges 00000360  00000000  00000000  00026cac  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_line   00001171  00000000  00000000  0002700c  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_str    000014fc  00000000  00000000  0002817d  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .debug_frame  000005c4  00000000  00000000  0002967c  2**2
                  CONTENTS, READONLY, DEBUGGING
 21 .stab         00000144  00000000  00000000  00029c40  2**2
                  CONTENTS, READONLY, DEBUGGING
 22 .stabstr      00000034  00000000  00000000  00029d84  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <deregister_tm_clones>:
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8000188:	4b04      	ldr	r3, [pc, #16]	; (800019c <deregister_tm_clones+0x14>)
 800018a:	4805      	ldr	r0, [pc, #20]	; (80001a0 <deregister_tm_clones+0x18>)
 800018c:	1a1b      	subs	r3, r3, r0
 800018e:	2b06      	cmp	r3, #6
 8000190:	d902      	bls.n	8000198 <deregister_tm_clones+0x10>
 8000192:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <deregister_tm_clones+0x1c>)
 8000194:	b103      	cbz	r3, 8000198 <deregister_tm_clones+0x10>
 8000196:	4718      	bx	r3
 8000198:	4770      	bx	lr
 800019a:	bf00      	nop
 800019c:	2000002b 	.word	0x2000002b
 80001a0:	20000028 	.word	0x20000028
 80001a4:	00000000 	.word	0x00000000

080001a8 <register_tm_clones>:
 80001a8:	4905      	ldr	r1, [pc, #20]	; (80001c0 <register_tm_clones+0x18>)
 80001aa:	4806      	ldr	r0, [pc, #24]	; (80001c4 <register_tm_clones+0x1c>)
 80001ac:	1a09      	subs	r1, r1, r0
 80001ae:	1089      	asrs	r1, r1, #2
 80001b0:	eb01 71d1 	add.w	r1, r1, r1, lsr #31
 80001b4:	1049      	asrs	r1, r1, #1
 80001b6:	d002      	beq.n	80001be <register_tm_clones+0x16>
 80001b8:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <register_tm_clones+0x20>)
 80001ba:	b103      	cbz	r3, 80001be <register_tm_clones+0x16>
 80001bc:	4718      	bx	r3
 80001be:	4770      	bx	lr
 80001c0:	20000028 	.word	0x20000028
 80001c4:	20000028 	.word	0x20000028
 80001c8:	00000000 	.word	0x00000000

080001cc <__do_global_dtors_aux>:
 80001cc:	b510      	push	{r4, lr}
 80001ce:	4c06      	ldr	r4, [pc, #24]	; (80001e8 <__do_global_dtors_aux+0x1c>)
 80001d0:	7823      	ldrb	r3, [r4, #0]
 80001d2:	b943      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x1a>
 80001d4:	f7ff ffd8 	bl	8000188 <deregister_tm_clones>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x20>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x16>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x24>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000028 	.word	0x20000028
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800181c 	.word	0x0800181c

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b08      	ldr	r3, [pc, #32]	; (8000218 <frame_dummy+0x24>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4908      	ldr	r1, [pc, #32]	; (800021c <frame_dummy+0x28>)
 80001fc:	4808      	ldr	r0, [pc, #32]	; (8000220 <frame_dummy+0x2c>)
 80001fe:	f3af 8000 	nop.w
 8000202:	4808      	ldr	r0, [pc, #32]	; (8000224 <frame_dummy+0x30>)
 8000204:	6803      	ldr	r3, [r0, #0]
 8000206:	b913      	cbnz	r3, 800020e <frame_dummy+0x1a>
 8000208:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800020c:	e7cc      	b.n	80001a8 <register_tm_clones>
 800020e:	4b06      	ldr	r3, [pc, #24]	; (8000228 <frame_dummy+0x34>)
 8000210:	2b00      	cmp	r3, #0
 8000212:	d0f9      	beq.n	8000208 <frame_dummy+0x14>
 8000214:	4798      	blx	r3
 8000216:	e7f7      	b.n	8000208 <frame_dummy+0x14>
 8000218:	00000000 	.word	0x00000000
 800021c:	2000002c 	.word	0x2000002c
 8000220:	0800181c 	.word	0x0800181c
 8000224:	20000028 	.word	0x20000028
 8000228:	00000000 	.word	0x00000000

0800022c <__libc_init_array>:
 800022c:	b570      	push	{r4, r5, r6, lr}
 800022e:	4e0f      	ldr	r6, [pc, #60]	; (800026c <__libc_init_array+0x40>)
 8000230:	4d0f      	ldr	r5, [pc, #60]	; (8000270 <__libc_init_array+0x44>)
 8000232:	1b76      	subs	r6, r6, r5
 8000234:	10b6      	asrs	r6, r6, #2
 8000236:	bf18      	it	ne
 8000238:	2400      	movne	r4, #0
 800023a:	d005      	beq.n	8000248 <__libc_init_array+0x1c>
 800023c:	3401      	adds	r4, #1
 800023e:	f855 3b04 	ldr.w	r3, [r5], #4
 8000242:	4798      	blx	r3
 8000244:	42a6      	cmp	r6, r4
 8000246:	d1f9      	bne.n	800023c <__libc_init_array+0x10>
 8000248:	4e0a      	ldr	r6, [pc, #40]	; (8000274 <__libc_init_array+0x48>)
 800024a:	4d0b      	ldr	r5, [pc, #44]	; (8000278 <__libc_init_array+0x4c>)
 800024c:	1b76      	subs	r6, r6, r5
 800024e:	f001 fae5 	bl	800181c <_init>
 8000252:	10b6      	asrs	r6, r6, #2
 8000254:	bf18      	it	ne
 8000256:	2400      	movne	r4, #0
 8000258:	d006      	beq.n	8000268 <__libc_init_array+0x3c>
 800025a:	3401      	adds	r4, #1
 800025c:	f855 3b04 	ldr.w	r3, [r5], #4
 8000260:	4798      	blx	r3
 8000262:	42a6      	cmp	r6, r4
 8000264:	d1f9      	bne.n	800025a <__libc_init_array+0x2e>
 8000266:	bd70      	pop	{r4, r5, r6, pc}
 8000268:	bd70      	pop	{r4, r5, r6, pc}
 800026a:	bf00      	nop
 800026c:	08001948 	.word	0x08001948
 8000270:	08001948 	.word	0x08001948
 8000274:	0800194c 	.word	0x0800194c
 8000278:	08001948 	.word	0x08001948

0800027c <memset>:
 800027c:	b470      	push	{r4, r5, r6}
 800027e:	0784      	lsls	r4, r0, #30
 8000280:	d046      	beq.n	8000310 <memset+0x94>
 8000282:	1e54      	subs	r4, r2, #1
 8000284:	2a00      	cmp	r2, #0
 8000286:	d041      	beq.n	800030c <memset+0x90>
 8000288:	b2cd      	uxtb	r5, r1
 800028a:	4603      	mov	r3, r0
 800028c:	e002      	b.n	8000294 <memset+0x18>
 800028e:	1e62      	subs	r2, r4, #1
 8000290:	b3e4      	cbz	r4, 800030c <memset+0x90>
 8000292:	4614      	mov	r4, r2
 8000294:	f803 5b01 	strb.w	r5, [r3], #1
 8000298:	079a      	lsls	r2, r3, #30
 800029a:	d1f8      	bne.n	800028e <memset+0x12>
 800029c:	2c03      	cmp	r4, #3
 800029e:	d92e      	bls.n	80002fe <memset+0x82>
 80002a0:	b2cd      	uxtb	r5, r1
 80002a2:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
 80002a6:	2c0f      	cmp	r4, #15
 80002a8:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
 80002ac:	d919      	bls.n	80002e2 <memset+0x66>
 80002ae:	f103 0210 	add.w	r2, r3, #16
 80002b2:	4626      	mov	r6, r4
 80002b4:	3e10      	subs	r6, #16
 80002b6:	2e0f      	cmp	r6, #15
 80002b8:	f842 5c10 	str.w	r5, [r2, #-16]
 80002bc:	f842 5c0c 	str.w	r5, [r2, #-12]
 80002c0:	f842 5c08 	str.w	r5, [r2, #-8]
 80002c4:	f842 5c04 	str.w	r5, [r2, #-4]
 80002c8:	f102 0210 	add.w	r2, r2, #16
 80002cc:	d8f2      	bhi.n	80002b4 <memset+0x38>
 80002ce:	f1a4 0210 	sub.w	r2, r4, #16
 80002d2:	f022 020f 	bic.w	r2, r2, #15
 80002d6:	f004 040f 	and.w	r4, r4, #15
 80002da:	3210      	adds	r2, #16
 80002dc:	2c03      	cmp	r4, #3
 80002de:	4413      	add	r3, r2
 80002e0:	d90d      	bls.n	80002fe <memset+0x82>
 80002e2:	461e      	mov	r6, r3
 80002e4:	4622      	mov	r2, r4
 80002e6:	3a04      	subs	r2, #4
 80002e8:	2a03      	cmp	r2, #3
 80002ea:	f846 5b04 	str.w	r5, [r6], #4
 80002ee:	d8fa      	bhi.n	80002e6 <memset+0x6a>
 80002f0:	1f22      	subs	r2, r4, #4
 80002f2:	f022 0203 	bic.w	r2, r2, #3
 80002f6:	3204      	adds	r2, #4
 80002f8:	4413      	add	r3, r2
 80002fa:	f004 0403 	and.w	r4, r4, #3
 80002fe:	b12c      	cbz	r4, 800030c <memset+0x90>
 8000300:	b2c9      	uxtb	r1, r1
 8000302:	441c      	add	r4, r3
 8000304:	f803 1b01 	strb.w	r1, [r3], #1
 8000308:	42a3      	cmp	r3, r4
 800030a:	d1fb      	bne.n	8000304 <memset+0x88>
 800030c:	bc70      	pop	{r4, r5, r6}
 800030e:	4770      	bx	lr
 8000310:	4614      	mov	r4, r2
 8000312:	4603      	mov	r3, r0
 8000314:	e7c2      	b.n	800029c <memset+0x20>
 8000316:	bf00      	nop

08000318 <reset>:

uint8_t reset(uint8_t* x)
{
	// Reset key here if needed
	return 0x00;
}
 8000318:	2000      	movs	r0, #0
 800031a:	4770      	bx	lr

0800031c <get_key>:
 800031c:	2000      	movs	r0, #0
 800031e:	4770      	bx	lr

08000320 <u4byte_in>:
	return (x[0] << 24) | (x[1] << 16) | (x[2] << 8) | x[3];
 8000320:	7843      	ldrb	r3, [r0, #1]
 8000322:	7802      	ldrb	r2, [r0, #0]
 8000324:	041b      	lsls	r3, r3, #16
 8000326:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800032a:	78c2      	ldrb	r2, [r0, #3]
 800032c:	7880      	ldrb	r0, [r0, #2]
 800032e:	4313      	orrs	r3, r2
}
 8000330:	ea43 2000 	orr.w	r0, r3, r0, lsl #8
 8000334:	4770      	bx	lr

08000336 <u4byte_out>:
	x[0] = (y >> 24) & 0xff;
 8000336:	0e0b      	lsrs	r3, r1, #24
 8000338:	7003      	strb	r3, [r0, #0]
	x[1] = (y >> 16) & 0xff;
 800033a:	0c0b      	lsrs	r3, r1, #16
 800033c:	7043      	strb	r3, [r0, #1]
	x[2] = (y >> 8) & 0xff;
 800033e:	0a0b      	lsrs	r3, r1, #8
 8000340:	7083      	strb	r3, [r0, #2]
	x[3] = y & 0xff;
 8000342:	70c1      	strb	r1, [r0, #3]
 8000344:	4770      	bx	lr

08000346 <AddRoundKey>:
	S[0] ^= RK[0]; S[1] ^= RK[1]; S[2] ^= RK[2]; S[3] ^= RK[3];
 8000346:	780b      	ldrb	r3, [r1, #0]
 8000348:	7802      	ldrb	r2, [r0, #0]
 800034a:	4053      	eors	r3, r2
 800034c:	7003      	strb	r3, [r0, #0]
 800034e:	784b      	ldrb	r3, [r1, #1]
 8000350:	7842      	ldrb	r2, [r0, #1]
 8000352:	4053      	eors	r3, r2
 8000354:	7043      	strb	r3, [r0, #1]
 8000356:	788b      	ldrb	r3, [r1, #2]
 8000358:	7882      	ldrb	r2, [r0, #2]
 800035a:	4053      	eors	r3, r2
 800035c:	7083      	strb	r3, [r0, #2]
 800035e:	78cb      	ldrb	r3, [r1, #3]
 8000360:	78c2      	ldrb	r2, [r0, #3]
 8000362:	4053      	eors	r3, r2
 8000364:	70c3      	strb	r3, [r0, #3]
	S[4] ^= RK[4]; S[5] ^= RK[5]; S[6] ^= RK[6]; S[7] ^= RK[7];
 8000366:	790b      	ldrb	r3, [r1, #4]
 8000368:	7902      	ldrb	r2, [r0, #4]
 800036a:	4053      	eors	r3, r2
 800036c:	7103      	strb	r3, [r0, #4]
 800036e:	794b      	ldrb	r3, [r1, #5]
 8000370:	7942      	ldrb	r2, [r0, #5]
 8000372:	4053      	eors	r3, r2
 8000374:	7143      	strb	r3, [r0, #5]
 8000376:	798b      	ldrb	r3, [r1, #6]
 8000378:	7982      	ldrb	r2, [r0, #6]
 800037a:	4053      	eors	r3, r2
 800037c:	7183      	strb	r3, [r0, #6]
 800037e:	79cb      	ldrb	r3, [r1, #7]
 8000380:	79c2      	ldrb	r2, [r0, #7]
 8000382:	4053      	eors	r3, r2
 8000384:	71c3      	strb	r3, [r0, #7]
	S[8] ^= RK[8]; S[9] ^= RK[9]; S[10] ^= RK[10]; S[11] ^= RK[11];
 8000386:	7a02      	ldrb	r2, [r0, #8]
 8000388:	7a0b      	ldrb	r3, [r1, #8]
 800038a:	4053      	eors	r3, r2
 800038c:	7203      	strb	r3, [r0, #8]
 800038e:	7a42      	ldrb	r2, [r0, #9]
 8000390:	7a4b      	ldrb	r3, [r1, #9]
 8000392:	4053      	eors	r3, r2
 8000394:	7243      	strb	r3, [r0, #9]
 8000396:	7a82      	ldrb	r2, [r0, #10]
 8000398:	7a8b      	ldrb	r3, [r1, #10]
 800039a:	4053      	eors	r3, r2
 800039c:	7283      	strb	r3, [r0, #10]
 800039e:	7acb      	ldrb	r3, [r1, #11]
 80003a0:	7ac2      	ldrb	r2, [r0, #11]
 80003a2:	4053      	eors	r3, r2
 80003a4:	72c3      	strb	r3, [r0, #11]
	S[12] ^= RK[12]; S[13] ^= RK[13]; S[14] ^= RK[14]; S[15] ^= RK[15];
 80003a6:	7b0b      	ldrb	r3, [r1, #12]
 80003a8:	7b02      	ldrb	r2, [r0, #12]
 80003aa:	4053      	eors	r3, r2
 80003ac:	7303      	strb	r3, [r0, #12]
 80003ae:	7b4b      	ldrb	r3, [r1, #13]
 80003b0:	7b42      	ldrb	r2, [r0, #13]
 80003b2:	4053      	eors	r3, r2
 80003b4:	7343      	strb	r3, [r0, #13]
 80003b6:	7b82      	ldrb	r2, [r0, #14]
 80003b8:	7b8b      	ldrb	r3, [r1, #14]
 80003ba:	4053      	eors	r3, r2
 80003bc:	7383      	strb	r3, [r0, #14]
 80003be:	7bc2      	ldrb	r2, [r0, #15]
 80003c0:	7bcb      	ldrb	r3, [r1, #15]
 80003c2:	4053      	eors	r3, r2
 80003c4:	73c3      	strb	r3, [r0, #15]
 80003c6:	4770      	bx	lr

080003c8 <SubBytes>:
	S[0] = Sbox[S[0]];S[1] = Sbox[S[1]];S[2] = Sbox[S[2]];S[3] = Sbox[S[3]];
 80003c8:	4b18      	ldr	r3, [pc, #96]	; (800042c <SubBytes+0x64>)
 80003ca:	7802      	ldrb	r2, [r0, #0]
 80003cc:	5c9a      	ldrb	r2, [r3, r2]
 80003ce:	7002      	strb	r2, [r0, #0]
 80003d0:	7842      	ldrb	r2, [r0, #1]
 80003d2:	5c9a      	ldrb	r2, [r3, r2]
 80003d4:	7042      	strb	r2, [r0, #1]
 80003d6:	7882      	ldrb	r2, [r0, #2]
 80003d8:	5c9a      	ldrb	r2, [r3, r2]
 80003da:	7082      	strb	r2, [r0, #2]
 80003dc:	78c2      	ldrb	r2, [r0, #3]
 80003de:	5c9a      	ldrb	r2, [r3, r2]
 80003e0:	70c2      	strb	r2, [r0, #3]
	S[4] = Sbox[S[4]];S[5] = Sbox[S[5]];S[6] = Sbox[S[6]];S[7] = Sbox[S[7]];
 80003e2:	7902      	ldrb	r2, [r0, #4]
 80003e4:	5c9a      	ldrb	r2, [r3, r2]
 80003e6:	7102      	strb	r2, [r0, #4]
 80003e8:	7942      	ldrb	r2, [r0, #5]
 80003ea:	5c9a      	ldrb	r2, [r3, r2]
 80003ec:	7142      	strb	r2, [r0, #5]
 80003ee:	7982      	ldrb	r2, [r0, #6]
 80003f0:	5c9a      	ldrb	r2, [r3, r2]
 80003f2:	7182      	strb	r2, [r0, #6]
 80003f4:	79c2      	ldrb	r2, [r0, #7]
 80003f6:	5c9a      	ldrb	r2, [r3, r2]
 80003f8:	71c2      	strb	r2, [r0, #7]
	S[8] = Sbox[S[8]];S[9] = Sbox[S[9]];S[10] = Sbox[S[10]];S[11] = Sbox[S[11]];
 80003fa:	7a02      	ldrb	r2, [r0, #8]
 80003fc:	5c9a      	ldrb	r2, [r3, r2]
 80003fe:	7202      	strb	r2, [r0, #8]
 8000400:	7a42      	ldrb	r2, [r0, #9]
 8000402:	5c9a      	ldrb	r2, [r3, r2]
 8000404:	7242      	strb	r2, [r0, #9]
 8000406:	7a82      	ldrb	r2, [r0, #10]
 8000408:	5c9a      	ldrb	r2, [r3, r2]
 800040a:	7282      	strb	r2, [r0, #10]
 800040c:	7ac2      	ldrb	r2, [r0, #11]
 800040e:	5c9a      	ldrb	r2, [r3, r2]
 8000410:	72c2      	strb	r2, [r0, #11]
	S[12] = Sbox[S[12]];S[13] = Sbox[S[13]];S[14] = Sbox[S[14]];S[15] = Sbox[S[15]];
 8000412:	7b02      	ldrb	r2, [r0, #12]
 8000414:	5c9a      	ldrb	r2, [r3, r2]
 8000416:	7302      	strb	r2, [r0, #12]
 8000418:	7b42      	ldrb	r2, [r0, #13]
 800041a:	5c9a      	ldrb	r2, [r3, r2]
 800041c:	7342      	strb	r2, [r0, #13]
 800041e:	7b82      	ldrb	r2, [r0, #14]
 8000420:	5c9a      	ldrb	r2, [r3, r2]
 8000422:	7382      	strb	r2, [r0, #14]
 8000424:	7bc2      	ldrb	r2, [r0, #15]
 8000426:	5c9b      	ldrb	r3, [r3, r2]
 8000428:	73c3      	strb	r3, [r0, #15]
 800042a:	4770      	bx	lr
 800042c:	08001834 	.word	0x08001834

08000430 <ShiftRows>:
	temp = S[1];S[1] = S[5];S[5] = S[9];S[9] = S[13];S[13] = temp;
 8000430:	7942      	ldrb	r2, [r0, #5]
 8000432:	7843      	ldrb	r3, [r0, #1]
 8000434:	7042      	strb	r2, [r0, #1]
 8000436:	7a42      	ldrb	r2, [r0, #9]
 8000438:	7142      	strb	r2, [r0, #5]
 800043a:	7b42      	ldrb	r2, [r0, #13]
 800043c:	7242      	strb	r2, [r0, #9]
	temp = S[2];S[2] = S[10];S[10] = temp;
 800043e:	7a82      	ldrb	r2, [r0, #10]
	temp = S[1];S[1] = S[5];S[5] = S[9];S[9] = S[13];S[13] = temp;
 8000440:	7343      	strb	r3, [r0, #13]
	temp = S[2];S[2] = S[10];S[10] = temp;
 8000442:	7883      	ldrb	r3, [r0, #2]
 8000444:	7082      	strb	r2, [r0, #2]
	temp = S[6];S[6] = S[14];S[14] = temp;
 8000446:	7b82      	ldrb	r2, [r0, #14]
	temp = S[2];S[2] = S[10];S[10] = temp;
 8000448:	7283      	strb	r3, [r0, #10]
	temp = S[6];S[6] = S[14];S[14] = temp;
 800044a:	7983      	ldrb	r3, [r0, #6]
 800044c:	7182      	strb	r2, [r0, #6]
	temp = S[15];S[15] = S[11];S[11] = S[7];S[7] = S[3];S[3] = temp;
 800044e:	7ac2      	ldrb	r2, [r0, #11]
	temp = S[6];S[6] = S[14];S[14] = temp;
 8000450:	7383      	strb	r3, [r0, #14]
	temp = S[15];S[15] = S[11];S[11] = S[7];S[7] = S[3];S[3] = temp;
 8000452:	7bc3      	ldrb	r3, [r0, #15]
 8000454:	73c2      	strb	r2, [r0, #15]
 8000456:	79c2      	ldrb	r2, [r0, #7]
 8000458:	72c2      	strb	r2, [r0, #11]
 800045a:	78c2      	ldrb	r2, [r0, #3]
 800045c:	71c2      	strb	r2, [r0, #7]
 800045e:	70c3      	strb	r3, [r0, #3]
 8000460:	4770      	bx	lr

08000462 <MixColumns>:
void MixColumns(u8 S[]){
 8000462:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000466:	b089      	sub	sp, #36	; 0x24
 8000468:	f100 0310 	add.w	r3, r0, #16
 800046c:	4604      	mov	r4, r0
 800046e:	f10d 0713 	add.w	r7, sp, #19
 8000472:	9303      	str	r3, [sp, #12]
		temp[i] = MUL2(S[i]) ^ MUL3(S[i + 1]) ^ S[i + 2] ^ S[i + 3];
 8000474:	f894 9000 	ldrb.w	r9, [r4]
 8000478:	78a6      	ldrb	r6, [r4, #2]
 800047a:	78e5      	ldrb	r5, [r4, #3]
 800047c:	fa4f f889 	sxtb.w	r8, r9
 8000480:	ea4f 0249 	mov.w	r2, r9, lsl #1
 8000484:	b253      	sxtb	r3, r2
 8000486:	f1b8 0f00 	cmp.w	r8, #0
 800048a:	9301      	str	r3, [sp, #4]
 800048c:	bfac      	ite	ge
 800048e:	2300      	movge	r3, #0
 8000490:	231b      	movlt	r3, #27
 8000492:	9300      	str	r3, [sp, #0]
 8000494:	7863      	ldrb	r3, [r4, #1]
 8000496:	fa4f fa86 	sxtb.w	sl, r6
 800049a:	b25a      	sxtb	r2, r3
 800049c:	fa4f fe85 	sxtb.w	lr, r5
 80004a0:	2a00      	cmp	r2, #0
 80004a2:	ea82 020a 	eor.w	r2, r2, sl
 80004a6:	9202      	str	r2, [sp, #8]
 80004a8:	ea82 010e 	eor.w	r1, r2, lr
 80004ac:	9a01      	ldr	r2, [sp, #4]
 80004ae:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80004b2:	fa4f fc8c 	sxtb.w	ip, ip
 80004b6:	ea81 0102 	eor.w	r1, r1, r2
 80004ba:	9a00      	ldr	r2, [sp, #0]
 80004bc:	ea8c 0101 	eor.w	r1, ip, r1
 80004c0:	bfac      	ite	ge
 80004c2:	f04f 0b00 	movge.w	fp, #0
 80004c6:	f04f 0b1b 	movlt.w	fp, #27
 80004ca:	4051      	eors	r1, r2
 80004cc:	ea8b 0101 	eor.w	r1, fp, r1
 80004d0:	f807 1c03 	strb.w	r1, [r7, #-3]
 80004d4:	ea89 0303 	eor.w	r3, r9, r3
 80004d8:	ea88 010a 	eor.w	r1, r8, sl
 80004dc:	ea8e 0101 	eor.w	r1, lr, r1
		temp[i + 1] = S[i] ^ MUL2(S[i + 1]) ^ MUL3(S[i + 2]) ^ S[i + 3];
 80004e0:	0076      	lsls	r6, r6, #1
 80004e2:	ea8e 0303 	eor.w	r3, lr, r3
 80004e6:	ea8c 0101 	eor.w	r1, ip, r1
 80004ea:	b276      	sxtb	r6, r6
 80004ec:	b25b      	sxtb	r3, r3
 80004ee:	4071      	eors	r1, r6
 80004f0:	405e      	eors	r6, r3
		temp[i + 3] = MUL3(S[i]) ^ S[i + 1] ^ S[i + 2] ^ MUL2(S[i + 3]);
 80004f2:	9b02      	ldr	r3, [sp, #8]
 80004f4:	ea88 0203 	eor.w	r2, r8, r3
 80004f8:	9b01      	ldr	r3, [sp, #4]
		temp[i + 1] = S[i] ^ MUL2(S[i + 1]) ^ MUL3(S[i + 2]) ^ S[i + 3];
 80004fa:	f1ba 0f00 	cmp.w	sl, #0
		temp[i + 2] = S[i] ^ S[i + 1] ^ MUL2(S[i + 2]) ^ MUL3(S[i + 3]);
 80004fe:	ea4f 0545 	mov.w	r5, r5, lsl #1
		temp[i + 1] = S[i] ^ MUL2(S[i + 1]) ^ MUL3(S[i + 2]) ^ S[i + 3];
 8000502:	bfac      	ite	ge
 8000504:	f04f 0a00 	movge.w	sl, #0
 8000508:	f04f 0a1b 	movlt.w	sl, #27
		temp[i + 2] = S[i] ^ S[i + 1] ^ MUL2(S[i + 2]) ^ MUL3(S[i + 3]);
 800050c:	b26d      	sxtb	r5, r5
		temp[i + 3] = MUL3(S[i]) ^ S[i + 1] ^ S[i + 2] ^ MUL2(S[i + 3]);
 800050e:	ea82 0203 	eor.w	r2, r2, r3
		temp[i + 1] = S[i] ^ MUL2(S[i + 1]) ^ MUL3(S[i + 2]) ^ S[i + 3];
 8000512:	ea8b 0101 	eor.w	r1, fp, r1
		temp[i + 3] = MUL3(S[i]) ^ S[i + 1] ^ S[i + 2] ^ MUL2(S[i + 3]);
 8000516:	9b00      	ldr	r3, [sp, #0]
		temp[i + 1] = S[i] ^ MUL2(S[i + 1]) ^ MUL3(S[i + 2]) ^ S[i + 3];
 8000518:	ea8a 0101 	eor.w	r1, sl, r1
		temp[i + 2] = S[i] ^ S[i + 1] ^ MUL2(S[i + 2]) ^ MUL3(S[i + 3]);
 800051c:	bfb4      	ite	lt
 800051e:	f04f 0c1b 	movlt.w	ip, #27
 8000522:	f04f 0c00 	movge.w	ip, #0
 8000526:	406e      	eors	r6, r5
 8000528:	f1be 0f00 	cmp.w	lr, #0
		temp[i + 3] = MUL3(S[i]) ^ S[i + 1] ^ S[i + 2] ^ MUL2(S[i + 3]);
 800052c:	ea82 0205 	eor.w	r2, r2, r5
		temp[i + 1] = S[i] ^ MUL2(S[i + 1]) ^ MUL3(S[i + 2]) ^ S[i + 3];
 8000530:	f807 1c02 	strb.w	r1, [r7, #-2]
		temp[i + 2] = S[i] ^ S[i + 1] ^ MUL2(S[i + 2]) ^ MUL3(S[i + 3]);
 8000534:	ea8c 0c06 	eor.w	ip, ip, r6
 8000538:	bfac      	ite	ge
 800053a:	2100      	movge	r1, #0
 800053c:	211b      	movlt	r1, #27
		temp[i + 3] = MUL3(S[i]) ^ S[i + 1] ^ S[i + 2] ^ MUL2(S[i + 3]);
 800053e:	405a      	eors	r2, r3
 8000540:	ea81 0302 	eor.w	r3, r1, r2
		temp[i + 2] = S[i] ^ S[i + 1] ^ MUL2(S[i + 2]) ^ MUL3(S[i + 3]);
 8000544:	ea81 0c0c 	eor.w	ip, r1, ip
 8000548:	f807 cc01 	strb.w	ip, [r7, #-1]
		temp[i + 3] = MUL3(S[i]) ^ S[i + 1] ^ S[i + 2] ^ MUL2(S[i + 3]);
 800054c:	f807 3b04 	strb.w	r3, [r7], #4
	for (i = 0; i < 16; i += 4){
 8000550:	9b03      	ldr	r3, [sp, #12]
 8000552:	3404      	adds	r4, #4
 8000554:	42a3      	cmp	r3, r4
 8000556:	d18d      	bne.n	8000474 <MixColumns+0x12>
	S[0] = temp[0];S[1] = temp[1];S[2] = temp[2];S[3] = temp[3];
 8000558:	f89d 3010 	ldrb.w	r3, [sp, #16]
 800055c:	7003      	strb	r3, [r0, #0]
 800055e:	f89d 3011 	ldrb.w	r3, [sp, #17]
 8000562:	7043      	strb	r3, [r0, #1]
 8000564:	f89d 3012 	ldrb.w	r3, [sp, #18]
 8000568:	7083      	strb	r3, [r0, #2]
 800056a:	f89d 3013 	ldrb.w	r3, [sp, #19]
 800056e:	70c3      	strb	r3, [r0, #3]
	S[4] = temp[4];S[5] = temp[5];S[6] = temp[6];S[7] = temp[7];
 8000570:	f89d 3014 	ldrb.w	r3, [sp, #20]
 8000574:	7103      	strb	r3, [r0, #4]
 8000576:	f89d 3015 	ldrb.w	r3, [sp, #21]
 800057a:	7143      	strb	r3, [r0, #5]
 800057c:	f89d 3016 	ldrb.w	r3, [sp, #22]
 8000580:	7183      	strb	r3, [r0, #6]
 8000582:	f89d 3017 	ldrb.w	r3, [sp, #23]
 8000586:	71c3      	strb	r3, [r0, #7]
	S[8] = temp[8];S[9] = temp[9];S[10] = temp[10];S[11] = temp[11];
 8000588:	f89d 3018 	ldrb.w	r3, [sp, #24]
 800058c:	7203      	strb	r3, [r0, #8]
 800058e:	f89d 3019 	ldrb.w	r3, [sp, #25]
 8000592:	7243      	strb	r3, [r0, #9]
 8000594:	f89d 301a 	ldrb.w	r3, [sp, #26]
 8000598:	7283      	strb	r3, [r0, #10]
 800059a:	f89d 301b 	ldrb.w	r3, [sp, #27]
 800059e:	72c3      	strb	r3, [r0, #11]
	S[12] = temp[12];S[13] = temp[13];S[14] = temp[14];S[15] = temp[15];
 80005a0:	f89d 301c 	ldrb.w	r3, [sp, #28]
 80005a4:	7303      	strb	r3, [r0, #12]
 80005a6:	f89d 301d 	ldrb.w	r3, [sp, #29]
 80005aa:	7343      	strb	r3, [r0, #13]
 80005ac:	f89d 301e 	ldrb.w	r3, [sp, #30]
 80005b0:	7383      	strb	r3, [r0, #14]
 80005b2:	f89d 301f 	ldrb.w	r3, [sp, #31]
 80005b6:	73c3      	strb	r3, [r0, #15]
}
 80005b8:	b009      	add	sp, #36	; 0x24
 80005ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080005be <AES_ENC>:
void AES_ENC(u8 PT[], u8 RK[], u8 CT[], int keysize){
 80005be:	b5f0      	push	{r4, r5, r6, r7, lr}
	int Nr = keysize / 32 + 6;
 80005c0:	2520      	movs	r5, #32
void AES_ENC(u8 PT[], u8 RK[], u8 CT[], int keysize){
 80005c2:	b085      	sub	sp, #20
	int Nr = keysize / 32 + 6;
 80005c4:	fb93 f5f5 	sdiv	r5, r3, r5
void AES_ENC(u8 PT[], u8 RK[], u8 CT[], int keysize){
 80005c8:	460f      	mov	r7, r1
 80005ca:	4616      	mov	r6, r2
	for (i = 0; i < 16; i++) temp[i] = PT[i];
 80005cc:	2300      	movs	r3, #0
 80005ce:	5cc2      	ldrb	r2, [r0, r3]
 80005d0:	f80d 2003 	strb.w	r2, [sp, r3]
 80005d4:	3301      	adds	r3, #1
 80005d6:	2b10      	cmp	r3, #16
 80005d8:	d1f9      	bne.n	80005ce <AES_ENC+0x10>
	AddRoundKey(temp, RK);
 80005da:	4639      	mov	r1, r7
 80005dc:	4668      	mov	r0, sp
 80005de:	f7ff feb2 	bl	8000346 <AddRoundKey>
	for (i = 0; i < Nr - 1; i++){
 80005e2:	2400      	movs	r4, #0
 80005e4:	3505      	adds	r5, #5
 80005e6:	42ac      	cmp	r4, r5
		SubBytes(temp);
 80005e8:	4668      	mov	r0, sp
 80005ea:	f104 0401 	add.w	r4, r4, #1
	for (i = 0; i < Nr - 1; i++){
 80005ee:	da0d      	bge.n	800060c <AES_ENC+0x4e>
		SubBytes(temp);
 80005f0:	f7ff feea 	bl	80003c8 <SubBytes>
		ShiftRows(temp);
 80005f4:	4668      	mov	r0, sp
 80005f6:	f7ff ff1b 	bl	8000430 <ShiftRows>
		MixColumns(temp);
 80005fa:	4668      	mov	r0, sp
 80005fc:	f7ff ff31 	bl	8000462 <MixColumns>
		AddRoundKey(temp, RK + 16 * (i + 1));
 8000600:	eb07 1104 	add.w	r1, r7, r4, lsl #4
 8000604:	4668      	mov	r0, sp
 8000606:	f7ff fe9e 	bl	8000346 <AddRoundKey>
 800060a:	e7ec      	b.n	80005e6 <AES_ENC+0x28>
	SubBytes(temp);
 800060c:	f7ff fedc 	bl	80003c8 <SubBytes>
	ShiftRows(temp);
 8000610:	4668      	mov	r0, sp
 8000612:	f7ff ff0d 	bl	8000430 <ShiftRows>
	AddRoundKey(temp, RK + 16 * (i + 1));
 8000616:	eb07 1104 	add.w	r1, r7, r4, lsl #4
 800061a:	4668      	mov	r0, sp
 800061c:	f7ff fe93 	bl	8000346 <AddRoundKey>
	for (i = 0; i < 16; i++) CT[i] = temp[i];
 8000620:	2300      	movs	r3, #0
 8000622:	f81d 2003 	ldrb.w	r2, [sp, r3]
 8000626:	54f2      	strb	r2, [r6, r3]
 8000628:	3301      	adds	r3, #1
 800062a:	2b10      	cmp	r3, #16
 800062c:	d1f9      	bne.n	8000622 <AES_ENC+0x64>
}
 800062e:	b005      	add	sp, #20
 8000630:	bdf0      	pop	{r4, r5, r6, r7, pc}

08000632 <AES_KeyWorldToByte>:
void AES_KeyWorldToByte(u32 W[], u8 RK[]){
 8000632:	b538      	push	{r3, r4, r5, lr}
 8000634:	2200      	movs	r2, #0
 8000636:	4605      	mov	r5, r0
 8000638:	460c      	mov	r4, r1
		u4byte_out(RK + 4 * i, W[i]); // RK[4i]||RK[4i+1]||RK[4i+2]||RK[4i+3]
 800063a:	58a9      	ldr	r1, [r5, r2]
 800063c:	18a0      	adds	r0, r4, r2
 800063e:	f7ff fe7a 	bl	8000336 <u4byte_out>
 8000642:	3204      	adds	r2, #4
	for (i = 0; i < 44; i++){
 8000644:	2ab0      	cmp	r2, #176	; 0xb0
 8000646:	d1f8      	bne.n	800063a <AES_KeyWorldToByte+0x8>
}
 8000648:	bd38      	pop	{r3, r4, r5, pc}
 800064a:	0000      	movs	r0, r0

0800064c <RoundKeyGeneration128>:
void RoundKeyGeneration128(u8 MK[], u8 RK[]){
 800064c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800064e:	b0ad      	sub	sp, #180	; 0xb4
 8000650:	4604      	mov	r4, r0
	W[0] = u4byte_in(MK); 		//W[0] = MK[0] || MK[1] || MK[2] || MK[3]
 8000652:	f7ff fe65 	bl	8000320 <u4byte_in>
 8000656:	9000      	str	r0, [sp, #0]
	W[1] = u4byte_in(MK + 4);	//W[1] = MK[4] || MK[5] || MK[6] || MK[7]
 8000658:	1d20      	adds	r0, r4, #4
 800065a:	f7ff fe61 	bl	8000320 <u4byte_in>
 800065e:	9001      	str	r0, [sp, #4]
	W[2] = u4byte_in(MK + 8);	//W[2] = MK[8] || MK[9] || MK[10] || MK[11]
 8000660:	f104 0008 	add.w	r0, r4, #8
 8000664:	f7ff fe5c 	bl	8000320 <u4byte_in>
 8000668:	9002      	str	r0, [sp, #8]
	W[3] = u4byte_in(MK + 12);	//W[3] = MK[12] || MK[13] || MK[14] || MK[15]
 800066a:	f104 000c 	add.w	r0, r4, #12
 800066e:	f7ff fe57 	bl	8000320 <u4byte_in>
		T = SubWord(T);		// 바이트 단위 SubBytes 연산
 8000672:	4f1b      	ldr	r7, [pc, #108]	; (80006e0 <RoundKeyGeneration128+0x94>)
		T ^= Rcons[i]; 		// 상수 Rcons과 xor 연산
 8000674:	f8df e06c 	ldr.w	lr, [pc, #108]	; 80006e4 <RoundKeyGeneration128+0x98>
	W[3] = u4byte_in(MK + 12);	//W[3] = MK[12] || MK[13] || MK[14] || MK[15]
 8000678:	9003      	str	r0, [sp, #12]
 800067a:	ab04      	add	r3, sp, #16
	for (i = 0; i < 10; i++){
 800067c:	2600      	movs	r6, #0
		T = W[4 * i + 3]; // T 에 4N+3 번쨰의 W값을 저장 (N은 0~9round)
 800067e:	f853 cc04 	ldr.w	ip, [r3, #-4]
		W[4 * i + 4] = W[4 * i] ^ T;	// (해당 라운드키의 첫 4byte)= (이전라운드키의 첫4byte 값) xor (이전라운드키의 마지막 4byte가 Gfunc를 거친 값)
 8000682:	f853 2c10 	ldr.w	r2, [r3, #-16]
		T ^= Rcons[i]; 		// 상수 Rcons과 xor 연산
 8000686:	f85e 0026 	ldr.w	r0, [lr, r6, lsl #2]
		T = RotWord(T);		// 바이트 단위 쉬프트 연산
 800068a:	ea4f 653c 	mov.w	r5, ip, ror #24
		W[4 * i + 4] = W[4 * i] ^ T;	// (해당 라운드키의 첫 4byte)= (이전라운드키의 첫4byte 값) xor (이전라운드키의 마지막 4byte가 Gfunc를 거친 값)
 800068e:	4050      	eors	r0, r2
		T = SubWord(T);		// 바이트 단위 SubBytes 연산
 8000690:	b2ea      	uxtb	r2, r5
		W[4 * i + 4] = W[4 * i] ^ T;	// (해당 라운드키의 첫 4byte)= (이전라운드키의 첫4byte 값) xor (이전라운드키의 마지막 4byte가 Gfunc를 거친 값)
 8000692:	3601      	adds	r6, #1
 8000694:	5cbc      	ldrb	r4, [r7, r2]
		T = SubWord(T);		// 바이트 단위 SubBytes 연산
 8000696:	0e2a      	lsrs	r2, r5, #24
		W[4 * i + 4] = W[4 * i] ^ T;	// (해당 라운드키의 첫 4byte)= (이전라운드키의 첫4byte 값) xor (이전라운드키의 마지막 4byte가 Gfunc를 거친 값)
 8000698:	4060      	eors	r0, r4
 800069a:	5cba      	ldrb	r2, [r7, r2]
 800069c:	ea80 6002 	eor.w	r0, r0, r2, lsl #24
		T = SubWord(T);		// 바이트 단위 SubBytes 연산
 80006a0:	f3c5 4207 	ubfx	r2, r5, #16, #8
 80006a4:	f3c5 2507 	ubfx	r5, r5, #8, #8
		W[4 * i + 4] = W[4 * i] ^ T;	// (해당 라운드키의 첫 4byte)= (이전라운드키의 첫4byte 값) xor (이전라운드키의 마지막 4byte가 Gfunc를 거친 값)
 80006a8:	5cba      	ldrb	r2, [r7, r2]
 80006aa:	ea80 4002 	eor.w	r0, r0, r2, lsl #16
 80006ae:	5d7a      	ldrb	r2, [r7, r5]
 80006b0:	ea80 2202 	eor.w	r2, r0, r2, lsl #8
		W[4 * i + 5] = W[4 * i + 1] ^ W[4 * i + 4];	//(해당 라운드키의 두번쨰 4byte) = (해당 라운드 키의 첫 4byte) xor (이전 라운드키의 두번쨰 4byte)
 80006b4:	f853 0c0c 	ldr.w	r0, [r3, #-12]
		W[4 * i + 4] = W[4 * i] ^ T;	// (해당 라운드키의 첫 4byte)= (이전라운드키의 첫4byte 값) xor (이전라운드키의 마지막 4byte가 Gfunc를 거친 값)
 80006b8:	601a      	str	r2, [r3, #0]
		W[4 * i + 5] = W[4 * i + 1] ^ W[4 * i + 4];	//(해당 라운드키의 두번쨰 4byte) = (해당 라운드 키의 첫 4byte) xor (이전 라운드키의 두번쨰 4byte)
 80006ba:	4042      	eors	r2, r0
		W[4 * i + 6] = W[4 * i + 2] ^ W[4 * i + 5];	//(해당 라운드키의 세번쨰 4byte) = (해당 라운드 키의 두번쨰 4byte) xor (이전 라운드키의 세번쨰 4byte)
 80006bc:	f853 0c08 	ldr.w	r0, [r3, #-8]
		W[4 * i + 5] = W[4 * i + 1] ^ W[4 * i + 4];	//(해당 라운드키의 두번쨰 4byte) = (해당 라운드 키의 첫 4byte) xor (이전 라운드키의 두번쨰 4byte)
 80006c0:	605a      	str	r2, [r3, #4]
		W[4 * i + 6] = W[4 * i + 2] ^ W[4 * i + 5];	//(해당 라운드키의 세번쨰 4byte) = (해당 라운드 키의 두번쨰 4byte) xor (이전 라운드키의 세번쨰 4byte)
 80006c2:	4042      	eors	r2, r0
 80006c4:	609a      	str	r2, [r3, #8]
	for (i = 0; i < 10; i++){
 80006c6:	2e0a      	cmp	r6, #10
		W[4 * i + 7] = W[4 * i + 3] ^ W[4 * i + 6];	//(해당 라운드키의 네번쨰 4byte) = (해당 라운드 키의 세번쨰 4byte) xor (이전 라운드키의 네번쨰 4byte)
 80006c8:	ea8c 0202 	eor.w	r2, ip, r2
 80006cc:	60da      	str	r2, [r3, #12]
 80006ce:	f103 0310 	add.w	r3, r3, #16
	for (i = 0; i < 10; i++){
 80006d2:	d1d4      	bne.n	800067e <RoundKeyGeneration128+0x32>
	AES_KeyWorldToByte(W, RK); //생성한 4byte단위의 라운드 키들(W)을 1byte단위 라운드키들(RK)로 저장
 80006d4:	4668      	mov	r0, sp
 80006d6:	f7ff ffac 	bl	8000632 <AES_KeyWorldToByte>
}
 80006da:	b02d      	add	sp, #180	; 0xb4
 80006dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80006de:	bf00      	nop
 80006e0:	08001834 	.word	0x08001834
 80006e4:	20000000 	.word	0x20000000

080006e8 <get_pt>:
{
 80006e8:	b530      	push	{r4, r5, lr}
	u8 CT[16] = { 0x00,};
 80006ea:	2510      	movs	r5, #16
{
 80006ec:	b0c5      	sub	sp, #276	; 0x114
 80006ee:	4604      	mov	r4, r0
	u8 CT[16] = { 0x00,};
 80006f0:	462a      	mov	r2, r5
 80006f2:	2100      	movs	r1, #0
 80006f4:	4668      	mov	r0, sp
 80006f6:	f7ff fdc1 	bl	800027c <memset>
    u8 RK[240] = { 0x00,};
 80006fa:	22f0      	movs	r2, #240	; 0xf0
 80006fc:	2100      	movs	r1, #0
 80006fe:	a808      	add	r0, sp, #32
 8000700:	f7ff fdbc 	bl	800027c <memset>
    u8 MK[16] = {0 , };
 8000704:	462a      	mov	r2, r5
 8000706:	2100      	movs	r1, #0
 8000708:	eb0d 0005 	add.w	r0, sp, r5
 800070c:	f7ff fdb6 	bl	800027c <memset>
    MK[0] = pt[0];
 8000710:	7823      	ldrb	r3, [r4, #0]
 8000712:	f88d 3010 	strb.w	r3, [sp, #16]
    MK[1] = pt[1];
 8000716:	7863      	ldrb	r3, [r4, #1]
 8000718:	f88d 3011 	strb.w	r3, [sp, #17]
    MK[2] = pt[2];
 800071c:	78a3      	ldrb	r3, [r4, #2]
 800071e:	f88d 3012 	strb.w	r3, [sp, #18]
    MK[3] = pt[3];
 8000722:	78e3      	ldrb	r3, [r4, #3]
 8000724:	f88d 3013 	strb.w	r3, [sp, #19]
    MK[4] = pt[4];
 8000728:	7923      	ldrb	r3, [r4, #4]
 800072a:	f88d 3014 	strb.w	r3, [sp, #20]
    MK[5] = pt[5];
 800072e:	7963      	ldrb	r3, [r4, #5]
 8000730:	f88d 3015 	strb.w	r3, [sp, #21]
    MK[6] = pt[6];
 8000734:	79a3      	ldrb	r3, [r4, #6]
 8000736:	f88d 3016 	strb.w	r3, [sp, #22]
    MK[7] = pt[7];
 800073a:	79e3      	ldrb	r3, [r4, #7]
 800073c:	f88d 3017 	strb.w	r3, [sp, #23]
    MK[8] = pt[8];
 8000740:	7a23      	ldrb	r3, [r4, #8]
 8000742:	f88d 3018 	strb.w	r3, [sp, #24]
    MK[9] = pt[9];
 8000746:	7a63      	ldrb	r3, [r4, #9]
 8000748:	f88d 3019 	strb.w	r3, [sp, #25]
    MK[10] = pt[10];
 800074c:	7aa3      	ldrb	r3, [r4, #10]
 800074e:	f88d 301a 	strb.w	r3, [sp, #26]
    MK[11] = pt[11];
 8000752:	7ae3      	ldrb	r3, [r4, #11]
 8000754:	f88d 301b 	strb.w	r3, [sp, #27]
    MK[12] = pt[12];
 8000758:	7b23      	ldrb	r3, [r4, #12]
 800075a:	f88d 301c 	strb.w	r3, [sp, #28]
    MK[13] = pt[13];
 800075e:	7b63      	ldrb	r3, [r4, #13]
 8000760:	f88d 301d 	strb.w	r3, [sp, #29]
    MK[14] = pt[14];
 8000764:	7ba3      	ldrb	r3, [r4, #14]
 8000766:	f88d 301e 	strb.w	r3, [sp, #30]
    MK[15] = pt[15];
 800076a:	7be3      	ldrb	r3, [r4, #15]
 800076c:	f88d 301f 	strb.w	r3, [sp, #31]
	trigger_high();
 8000770:	f000 f9d6 	bl	8000b20 <trigger_high>
		RoundKeyGeneration128(MK, RK);
 8000774:	a908      	add	r1, sp, #32
 8000776:	eb0d 0005 	add.w	r0, sp, r5
 800077a:	f7ff ff67 	bl	800064c <RoundKeyGeneration128>
	AES_ENC(pt,RK,CT,keyS);
 800077e:	466a      	mov	r2, sp
 8000780:	a908      	add	r1, sp, #32
 8000782:	4620      	mov	r0, r4
 8000784:	2380      	movs	r3, #128	; 0x80
 8000786:	f7ff ff1a 	bl	80005be <AES_ENC>
	trigger_low();
 800078a:	f000 f9d0 	bl	8000b2e <trigger_low>
    pt[0] = CT[0];
 800078e:	f89d 3000 	ldrb.w	r3, [sp]
 8000792:	7023      	strb	r3, [r4, #0]
    pt[1] = CT[1];
 8000794:	f89d 3001 	ldrb.w	r3, [sp, #1]
 8000798:	7063      	strb	r3, [r4, #1]
    pt[2] = CT[2];
 800079a:	f89d 3002 	ldrb.w	r3, [sp, #2]
 800079e:	70a3      	strb	r3, [r4, #2]
    pt[3] = CT[3];
 80007a0:	f89d 3003 	ldrb.w	r3, [sp, #3]
 80007a4:	70e3      	strb	r3, [r4, #3]
    pt[4] = CT[4];
 80007a6:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80007aa:	7123      	strb	r3, [r4, #4]
    pt[5] = CT[5];
 80007ac:	f89d 3005 	ldrb.w	r3, [sp, #5]
 80007b0:	7163      	strb	r3, [r4, #5]
    pt[6] = CT[6];
 80007b2:	f89d 3006 	ldrb.w	r3, [sp, #6]
 80007b6:	71a3      	strb	r3, [r4, #6]
    pt[7] = CT[7];
 80007b8:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80007bc:	71e3      	strb	r3, [r4, #7]
    pt[8] = CT[8];
 80007be:	f89d 3008 	ldrb.w	r3, [sp, #8]
 80007c2:	7223      	strb	r3, [r4, #8]
    pt[9] = CT[9];
 80007c4:	f89d 3009 	ldrb.w	r3, [sp, #9]
 80007c8:	7263      	strb	r3, [r4, #9]
    pt[10] = CT[10];
 80007ca:	f89d 300a 	ldrb.w	r3, [sp, #10]
 80007ce:	72a3      	strb	r3, [r4, #10]
    pt[11] = CT[11];
 80007d0:	f89d 300b 	ldrb.w	r3, [sp, #11]
 80007d4:	72e3      	strb	r3, [r4, #11]
    pt[12] = CT[12];
 80007d6:	f89d 300c 	ldrb.w	r3, [sp, #12]
 80007da:	7323      	strb	r3, [r4, #12]
    pt[13] = CT[13];
 80007dc:	f89d 300d 	ldrb.w	r3, [sp, #13]
 80007e0:	7363      	strb	r3, [r4, #13]
    pt[14] = CT[14];
 80007e2:	f89d 300e 	ldrb.w	r3, [sp, #14]
 80007e6:	73a3      	strb	r3, [r4, #14]
    pt[15] = CT[15];
 80007e8:	f89d 300f 	ldrb.w	r3, [sp, #15]
 80007ec:	73e3      	strb	r3, [r4, #15]
    simpleserial_put('r', 16, MK);
 80007ee:	eb0d 0205 	add.w	r2, sp, r5
 80007f2:	4629      	mov	r1, r5
 80007f4:	2072      	movs	r0, #114	; 0x72
 80007f6:	f000 f887 	bl	8000908 <simpleserial_put>
	simpleserial_put('r', 16, pt);
 80007fa:	4622      	mov	r2, r4
 80007fc:	4629      	mov	r1, r5
 80007fe:	2072      	movs	r0, #114	; 0x72
 8000800:	f000 f882 	bl	8000908 <simpleserial_put>
}
 8000804:	2000      	movs	r0, #0
 8000806:	b045      	add	sp, #276	; 0x114
 8000808:	bd30      	pop	{r4, r5, pc}
 800080a:	0000      	movs	r0, r0

0800080c <main>:


int main(void)
{
 800080c:	b508      	push	{r3, lr}
    platform_init();
 800080e:	f000 f8e7 	bl	80009e0 <platform_init>
	init_uart();	
 8000812:	f000 f925 	bl	8000a60 <init_uart>
	trigger_setup();
 8000816:	f000 f95f 	bl	8000ad8 <trigger_setup>
	putch('l');
	putch('o');
	putch('\n');
	*/
		
	simpleserial_init();		
 800081a:	f000 f86d 	bl	80008f8 <simpleserial_init>
	simpleserial_addcmd('p', 16, get_pt);
 800081e:	4a09      	ldr	r2, [pc, #36]	; (8000844 <main+0x38>)
 8000820:	2110      	movs	r1, #16
 8000822:	2070      	movs	r0, #112	; 0x70
 8000824:	f000 f852 	bl	80008cc <simpleserial_addcmd>
#if SS_VER != SS_VER_2_0
	simpleserial_addcmd('k', 16, get_key);
 8000828:	4a07      	ldr	r2, [pc, #28]	; (8000848 <main+0x3c>)
 800082a:	2110      	movs	r1, #16
 800082c:	206b      	movs	r0, #107	; 0x6b
 800082e:	f000 f84d 	bl	80008cc <simpleserial_addcmd>
	simpleserial_addcmd('x', 0, reset);
 8000832:	4a06      	ldr	r2, [pc, #24]	; (800084c <main+0x40>)
 8000834:	2100      	movs	r1, #0
 8000836:	2078      	movs	r0, #120	; 0x78
 8000838:	f000 f848 	bl	80008cc <simpleserial_addcmd>
#endif
	while(1)
		simpleserial_get();
 800083c:	f000 f886 	bl	800094c <simpleserial_get>
 8000840:	e7fc      	b.n	800083c <main+0x30>
 8000842:	bf00      	nop
 8000844:	080006e9 	.word	0x080006e9
 8000848:	0800031d 	.word	0x0800031d
 800084c:	08000319 	.word	0x08000319

08000850 <check_version>:
// Callback function for "v" command.
// This can exist in v1.0 as long as we don't actually send back an ack ("z")
uint8_t check_version(uint8_t *v)
{
	return SS_VER;
}
 8000850:	2001      	movs	r0, #1
 8000852:	4770      	bx	lr

08000854 <hex_decode>:
	'0', '1', '2', '3', '4', '5', '6', '7',
	'8', '9', 'A', 'B', 'C', 'D', 'E', 'F'
};

int hex_decode(int len, char* ascii_buf, uint8_t* data_buf)
{
 8000854:	b570      	push	{r4, r5, r6, lr}
 8000856:	3101      	adds	r1, #1
	for(int i = 0; i < len; i++)
 8000858:	4613      	mov	r3, r2
 800085a:	1a9c      	subs	r4, r3, r2
 800085c:	42a0      	cmp	r0, r4
 800085e:	dd32      	ble.n	80008c6 <hex_decode+0x72>
	{
		char n_hi = ascii_buf[2*i];
		char n_lo = ascii_buf[2*i+1];
 8000860:	780d      	ldrb	r5, [r1, #0]
		char n_hi = ascii_buf[2*i];
 8000862:	f811 4c01 	ldrb.w	r4, [r1, #-1]

		if(n_lo >= '0' && n_lo <= '9')
 8000866:	f1a5 0630 	sub.w	r6, r5, #48	; 0x30
 800086a:	b2f6      	uxtb	r6, r6
 800086c:	2e09      	cmp	r6, #9
 800086e:	d801      	bhi.n	8000874 <hex_decode+0x20>
			data_buf[i] = n_lo - '0';
 8000870:	701e      	strb	r6, [r3, #0]
 8000872:	e00d      	b.n	8000890 <hex_decode+0x3c>
		else if(n_lo >= 'A' && n_lo <= 'F')
 8000874:	f1a5 0641 	sub.w	r6, r5, #65	; 0x41
 8000878:	2e05      	cmp	r6, #5
 800087a:	d801      	bhi.n	8000880 <hex_decode+0x2c>
			data_buf[i] = n_lo - 'A' + 10;
 800087c:	3d37      	subs	r5, #55	; 0x37
 800087e:	e006      	b.n	800088e <hex_decode+0x3a>
		else if(n_lo >= 'a' && n_lo <= 'f')
 8000880:	f1a5 0661 	sub.w	r6, r5, #97	; 0x61
 8000884:	2e05      	cmp	r6, #5
 8000886:	d901      	bls.n	800088c <hex_decode+0x38>
			data_buf[i] = n_lo - 'a' + 10;
		else
			return 1;
 8000888:	2001      	movs	r0, #1
 800088a:	bd70      	pop	{r4, r5, r6, pc}
			data_buf[i] = n_lo - 'a' + 10;
 800088c:	3d57      	subs	r5, #87	; 0x57
 800088e:	701d      	strb	r5, [r3, #0]

		if(n_hi >= '0' && n_hi <= '9')
 8000890:	f1a4 0530 	sub.w	r5, r4, #48	; 0x30
 8000894:	b2ee      	uxtb	r6, r5
 8000896:	2e09      	cmp	r6, #9
 8000898:	d803      	bhi.n	80008a2 <hex_decode+0x4e>
			data_buf[i] |= (n_hi - '0') << 4;
 800089a:	781c      	ldrb	r4, [r3, #0]
 800089c:	ea44 1405 	orr.w	r4, r4, r5, lsl #4
 80008a0:	e00d      	b.n	80008be <hex_decode+0x6a>
		else if(n_hi >= 'A' && n_hi <= 'F')
 80008a2:	f1a4 0541 	sub.w	r5, r4, #65	; 0x41
 80008a6:	2d05      	cmp	r5, #5
 80008a8:	d801      	bhi.n	80008ae <hex_decode+0x5a>
			data_buf[i] |= (n_hi - 'A' + 10) << 4;
 80008aa:	3c37      	subs	r4, #55	; 0x37
 80008ac:	e004      	b.n	80008b8 <hex_decode+0x64>
		else if(n_hi >= 'a' && n_hi <= 'f')
 80008ae:	f1a4 0561 	sub.w	r5, r4, #97	; 0x61
 80008b2:	2d05      	cmp	r5, #5
 80008b4:	d8e8      	bhi.n	8000888 <hex_decode+0x34>
			data_buf[i] |= (n_hi - 'a' + 10) << 4;
 80008b6:	3c57      	subs	r4, #87	; 0x57
 80008b8:	781d      	ldrb	r5, [r3, #0]
 80008ba:	ea45 1404 	orr.w	r4, r5, r4, lsl #4
 80008be:	701c      	strb	r4, [r3, #0]
 80008c0:	3102      	adds	r1, #2
 80008c2:	3301      	adds	r3, #1
 80008c4:	e7c9      	b.n	800085a <hex_decode+0x6>
		else
			return 1;
	}

	return 0;
 80008c6:	2000      	movs	r0, #0
}
 80008c8:	bd70      	pop	{r4, r5, r6, pc}
 80008ca:	0000      	movs	r0, r0

080008cc <simpleserial_addcmd>:
{
	simpleserial_addcmd('v', 0, check_version);
}

int simpleserial_addcmd(char c, unsigned int len, uint8_t (*fp)(uint8_t*))
{
 80008cc:	b530      	push	{r4, r5, lr}
	if(num_commands >= MAX_SS_CMDS)
 80008ce:	4d09      	ldr	r5, [pc, #36]	; (80008f4 <simpleserial_addcmd+0x28>)
 80008d0:	682b      	ldr	r3, [r5, #0]
 80008d2:	2b0f      	cmp	r3, #15
 80008d4:	dc0b      	bgt.n	80008ee <simpleserial_addcmd+0x22>
		return 1;

	if(len >= MAX_SS_LEN)
 80008d6:	29bf      	cmp	r1, #191	; 0xbf
 80008d8:	d809      	bhi.n	80008ee <simpleserial_addcmd+0x22>
		return 1;

	commands[num_commands].c   = c;
 80008da:	240c      	movs	r4, #12
 80008dc:	fb04 5403 	mla	r4, r4, r3, r5
	commands[num_commands].len = len;
	commands[num_commands].fp  = fp;
	num_commands++;
 80008e0:	3301      	adds	r3, #1
	commands[num_commands].c   = c;
 80008e2:	7120      	strb	r0, [r4, #4]
	commands[num_commands].len = len;
 80008e4:	60a1      	str	r1, [r4, #8]
	commands[num_commands].fp  = fp;
 80008e6:	60e2      	str	r2, [r4, #12]
	num_commands++;
 80008e8:	602b      	str	r3, [r5, #0]

	return 0;
 80008ea:	2000      	movs	r0, #0
 80008ec:	bd30      	pop	{r4, r5, pc}
		return 1;
 80008ee:	2001      	movs	r0, #1
}
 80008f0:	bd30      	pop	{r4, r5, pc}
 80008f2:	bf00      	nop
 80008f4:	20000044 	.word	0x20000044

080008f8 <simpleserial_init>:
	simpleserial_addcmd('v', 0, check_version);
 80008f8:	4a02      	ldr	r2, [pc, #8]	; (8000904 <simpleserial_init+0xc>)
 80008fa:	2100      	movs	r1, #0
 80008fc:	2076      	movs	r0, #118	; 0x76
 80008fe:	f7ff bfe5 	b.w	80008cc <simpleserial_addcmd>
 8000902:	bf00      	nop
 8000904:	08000851 	.word	0x08000851

08000908 <simpleserial_put>:
	simpleserial_put('z', 1, ret);
#endif
}

void simpleserial_put(char c, uint8_t size, uint8_t* output)
{
 8000908:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800090c:	4615      	mov	r5, r2
 800090e:	460f      	mov	r7, r1
	// Write first character
	putch(c);
 8000910:	f000 f92c 	bl	8000b6c <putch>

	// Write each byte as two nibbles
	for(int i = 0; i < size; i++)
	{
		putch(hex_lookup[output[i] >> 4 ]);
 8000914:	4e0c      	ldr	r6, [pc, #48]	; (8000948 <simpleserial_put+0x40>)
	for(int i = 0; i < size; i++)
 8000916:	462c      	mov	r4, r5
 8000918:	1b63      	subs	r3, r4, r5
 800091a:	429f      	cmp	r7, r3
 800091c:	dd0e      	ble.n	800093c <simpleserial_put+0x34>
 800091e:	46a0      	mov	r8, r4
		putch(hex_lookup[output[i] >> 4 ]);
 8000920:	f814 3b01 	ldrb.w	r3, [r4], #1
 8000924:	091b      	lsrs	r3, r3, #4
 8000926:	5cf0      	ldrb	r0, [r6, r3]
 8000928:	f000 f920 	bl	8000b6c <putch>
		putch(hex_lookup[output[i] & 0xF]);
 800092c:	f898 3000 	ldrb.w	r3, [r8]
 8000930:	f003 030f 	and.w	r3, r3, #15
 8000934:	5cf0      	ldrb	r0, [r6, r3]
 8000936:	f000 f919 	bl	8000b6c <putch>
 800093a:	e7ed      	b.n	8000918 <simpleserial_put+0x10>
	}

	// Write trailing '\n'
	putch('\n');
 800093c:	200a      	movs	r0, #10
}
 800093e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	putch('\n');
 8000942:	f000 b913 	b.w	8000b6c <putch>
 8000946:	bf00      	nop
 8000948:	08001934 	.word	0x08001934

0800094c <simpleserial_get>:
{
 800094c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	for(cmd = 0; cmd < num_commands; cmd++)
 8000950:	4d22      	ldr	r5, [pc, #136]	; (80009dc <simpleserial_get+0x90>)
{
 8000952:	f5ad 7d12 	sub.w	sp, sp, #584	; 0x248
	c = getch();
 8000956:	f000 f8f1 	bl	8000b3c <getch>
	for(cmd = 0; cmd < num_commands; cmd++)
 800095a:	682b      	ldr	r3, [r5, #0]
 800095c:	2400      	movs	r4, #0
		if(commands[cmd].c == c)
 800095e:	1d2a      	adds	r2, r5, #4
 8000960:	210c      	movs	r1, #12
	for(cmd = 0; cmd < num_commands; cmd++)
 8000962:	429c      	cmp	r4, r3
 8000964:	da0d      	bge.n	8000982 <simpleserial_get+0x36>
		if(commands[cmd].c == c)
 8000966:	fb01 f604 	mul.w	r6, r1, r4
 800096a:	5cb6      	ldrb	r6, [r6, r2]
 800096c:	4286      	cmp	r6, r0
 800096e:	d106      	bne.n	800097e <simpleserial_get+0x32>
	for(int i = 0; i < 2*commands[cmd].len; i++)
 8000970:	270c      	movs	r7, #12
 8000972:	2600      	movs	r6, #0
 8000974:	fb07 5704 	mla	r7, r7, r4, r5
		ascii_buf[i] = c;
 8000978:	f10d 08c8 	add.w	r8, sp, #200	; 0xc8
 800097c:	e00c      	b.n	8000998 <simpleserial_get+0x4c>
	for(cmd = 0; cmd < num_commands; cmd++)
 800097e:	3401      	adds	r4, #1
 8000980:	e7ef      	b.n	8000962 <simpleserial_get+0x16>
	if(cmd == num_commands)
 8000982:	d026      	beq.n	80009d2 <simpleserial_get+0x86>
 8000984:	e7f4      	b.n	8000970 <simpleserial_get+0x24>
		c = getch();
 8000986:	f000 f8d9 	bl	8000b3c <getch>
		if(c == '\n' || c == '\r')
 800098a:	280a      	cmp	r0, #10
 800098c:	d021      	beq.n	80009d2 <simpleserial_get+0x86>
 800098e:	280d      	cmp	r0, #13
 8000990:	d01f      	beq.n	80009d2 <simpleserial_get+0x86>
		ascii_buf[i] = c;
 8000992:	f806 0008 	strb.w	r0, [r6, r8]
	for(int i = 0; i < 2*commands[cmd].len; i++)
 8000996:	3601      	adds	r6, #1
 8000998:	68bb      	ldr	r3, [r7, #8]
 800099a:	ebb6 0f43 	cmp.w	r6, r3, lsl #1
 800099e:	d3f2      	bcc.n	8000986 <simpleserial_get+0x3a>
	c = getch();
 80009a0:	f000 f8cc 	bl	8000b3c <getch>
	if(c != '\n' && c != '\r')
 80009a4:	280a      	cmp	r0, #10
 80009a6:	d001      	beq.n	80009ac <simpleserial_get+0x60>
 80009a8:	280d      	cmp	r0, #13
 80009aa:	d112      	bne.n	80009d2 <simpleserial_get+0x86>
	if(hex_decode(commands[cmd].len, ascii_buf, data_buf))
 80009ac:	230c      	movs	r3, #12
 80009ae:	fb03 5404 	mla	r4, r3, r4, r5
 80009b2:	aa02      	add	r2, sp, #8
 80009b4:	a932      	add	r1, sp, #200	; 0xc8
 80009b6:	68a0      	ldr	r0, [r4, #8]
 80009b8:	f7ff ff4c 	bl	8000854 <hex_decode>
 80009bc:	b948      	cbnz	r0, 80009d2 <simpleserial_get+0x86>
	ret[0] = commands[cmd].fp(data_buf);
 80009be:	68e3      	ldr	r3, [r4, #12]
 80009c0:	a802      	add	r0, sp, #8
 80009c2:	4798      	blx	r3
	simpleserial_put('z', 1, ret);
 80009c4:	aa01      	add	r2, sp, #4
	ret[0] = commands[cmd].fp(data_buf);
 80009c6:	f88d 0004 	strb.w	r0, [sp, #4]
	simpleserial_put('z', 1, ret);
 80009ca:	2101      	movs	r1, #1
 80009cc:	207a      	movs	r0, #122	; 0x7a
 80009ce:	f7ff ff9b 	bl	8000908 <simpleserial_put>
}
 80009d2:	f50d 7d12 	add.w	sp, sp, #584	; 0x248
 80009d6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80009da:	bf00      	nop
 80009dc:	20000044 	.word	0x20000044

080009e0 <platform_init>:

UART_HandleTypeDef UartHandle;


void platform_init(void)
{
 80009e0:	b570      	push	{r4, r5, r6, lr}
 80009e2:	b096      	sub	sp, #88	; 0x58
     HAL_RCC_ClockConfig(&RCC_ClkInitStruct, flash_latency);
  #else
     RCC_OscInitTypeDef RCC_OscInitStruct;
     RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE | RCC_OSCILLATORTYPE_HSI;
     RCC_OscInitStruct.HSEState       = RCC_HSE_BYPASS;
     RCC_OscInitStruct.HSIState       = RCC_HSI_OFF;
 80009e4:	2400      	movs	r4, #0
     RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE | RCC_OSCILLATORTYPE_HSI;
 80009e6:	2603      	movs	r6, #3
     RCC_OscInitStruct.HSEState       = RCC_HSE_BYPASS;
 80009e8:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
     RCC_OscInitStruct.PLL.PLLSource  = RCC_PLL_NONE;
     HAL_RCC_OscConfig(&RCC_OscInitStruct);
 80009ec:	a80c      	add	r0, sp, #48	; 0x30

     RCC_ClkInitTypeDef RCC_ClkInitStruct;
     RCC_ClkInitStruct.ClockType      = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2);
     RCC_ClkInitStruct.SYSCLKSource   = RCC_SYSCLKSOURCE_HSE;
 80009ee:	2501      	movs	r5, #1
     RCC_OscInitStruct.HSEState       = RCC_HSE_BYPASS;
 80009f0:	930d      	str	r3, [sp, #52]	; 0x34
     RCC_OscInitStruct.HSIState       = RCC_HSI_OFF;
 80009f2:	9410      	str	r4, [sp, #64]	; 0x40
     RCC_OscInitStruct.PLL.PLLSource  = RCC_PLL_NONE;
 80009f4:	9414      	str	r4, [sp, #80]	; 0x50
     RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE | RCC_OSCILLATORTYPE_HSI;
 80009f6:	960c      	str	r6, [sp, #48]	; 0x30
     HAL_RCC_OscConfig(&RCC_OscInitStruct);
 80009f8:	f000 f8d0 	bl	8000b9c <HAL_RCC_OscConfig>
     RCC_ClkInitStruct.ClockType      = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2);
 80009fc:	230f      	movs	r3, #15
     RCC_ClkInitStruct.AHBCLKDivider  = RCC_SYSCLK_DIV1;
     RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
     RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
     uint32_t flash_latency = 0;
     HAL_RCC_ClockConfig(&RCC_ClkInitStruct, flash_latency);
 80009fe:	4621      	mov	r1, r4
 8000a00:	a802      	add	r0, sp, #8
     RCC_ClkInitStruct.ClockType      = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2);
 8000a02:	9302      	str	r3, [sp, #8]
     RCC_ClkInitStruct.AHBCLKDivider  = RCC_SYSCLK_DIV1;
 8000a04:	9404      	str	r4, [sp, #16]
     RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000a06:	9405      	str	r4, [sp, #20]
     RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000a08:	9406      	str	r4, [sp, #24]
     RCC_ClkInitStruct.SYSCLKSource   = RCC_SYSCLKSOURCE_HSE;
 8000a0a:	9503      	str	r5, [sp, #12]
     HAL_RCC_ClockConfig(&RCC_ClkInitStruct, flash_latency);
 8000a0c:	f000 fb38 	bl	8001080 <HAL_RCC_ClockConfig>




#if (PLATFORM==CWLITEARM)
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a10:	4b11      	ldr	r3, [pc, #68]	; (8000a58 <platform_init+0x78>)
 8000a12:	695a      	ldr	r2, [r3, #20]
 8000a14:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 8000a18:	615a      	str	r2, [r3, #20]
 8000a1a:	695b      	ldr	r3, [r3, #20]
  GPIO_InitTypeDef GpioInit;
  GpioInit.Pin       = GPIO_PIN_13 | GPIO_PIN_14;
  GpioInit.Mode      = GPIO_MODE_OUTPUT_PP;
  GpioInit.Pull      = GPIO_NOPULL;
 8000a1c:	9409      	str	r4, [sp, #36]	; 0x24
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a1e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
  GpioInit.Speed     = GPIO_SPEED_FREQ_HIGH;
  HAL_GPIO_Init(GPIOC, &GpioInit);
 8000a22:	4c0e      	ldr	r4, [pc, #56]	; (8000a5c <platform_init+0x7c>)
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a24:	9301      	str	r3, [sp, #4]
 8000a26:	9b01      	ldr	r3, [sp, #4]
  GpioInit.Mode      = GPIO_MODE_OUTPUT_PP;
 8000a28:	9508      	str	r5, [sp, #32]
  GpioInit.Pin       = GPIO_PIN_13 | GPIO_PIN_14;
 8000a2a:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
  HAL_GPIO_Init(GPIOC, &GpioInit);
 8000a2e:	a907      	add	r1, sp, #28
 8000a30:	4620      	mov	r0, r4
  GpioInit.Pin       = GPIO_PIN_13 | GPIO_PIN_14;
 8000a32:	9307      	str	r3, [sp, #28]
  GpioInit.Speed     = GPIO_SPEED_FREQ_HIGH;
 8000a34:	960a      	str	r6, [sp, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GpioInit);
 8000a36:	f000 fbc7 	bl	80011c8 <HAL_GPIO_Init>

  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, SET);
 8000a3a:	462a      	mov	r2, r5
 8000a3c:	4620      	mov	r0, r4
 8000a3e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000a42:	f000 fc8b 	bl	800135c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, SET);
 8000a46:	462a      	mov	r2, r5
 8000a48:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000a4c:	4620      	mov	r0, r4
 8000a4e:	f000 fc85 	bl	800135c <HAL_GPIO_WritePin>
#endif
}
 8000a52:	b016      	add	sp, #88	; 0x58
 8000a54:	bd70      	pop	{r4, r5, r6, pc}
 8000a56:	bf00      	nop
 8000a58:	40021000 	.word	0x40021000
 8000a5c:	48000800 	.word	0x48000800

08000a60 <init_uart>:

void init_uart(void)
{
 8000a60:	b510      	push	{r4, lr}
 8000a62:	b088      	sub	sp, #32
  GPIO_InitTypeDef GpioInit;
  GpioInit.Pin       = GPIO_PIN_9 | GPIO_PIN_10;
 8000a64:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000a68:	9303      	str	r3, [sp, #12]
  GpioInit.Mode      = GPIO_MODE_AF_PP;
 8000a6a:	2302      	movs	r3, #2
 8000a6c:	9304      	str	r3, [sp, #16]
  GpioInit.Pull      = GPIO_PULLUP;
 8000a6e:	2301      	movs	r3, #1
 8000a70:	9305      	str	r3, [sp, #20]
  GpioInit.Speed     = GPIO_SPEED_FREQ_HIGH;
 8000a72:	2303      	movs	r3, #3
  GpioInit.Alternate = GPIO_AF7_USART1;
  __GPIOA_CLK_ENABLE();
 8000a74:	4c15      	ldr	r4, [pc, #84]	; (8000acc <init_uart+0x6c>)
  GpioInit.Speed     = GPIO_SPEED_FREQ_HIGH;
 8000a76:	9306      	str	r3, [sp, #24]
  GpioInit.Alternate = GPIO_AF7_USART1;
 8000a78:	2307      	movs	r3, #7
 8000a7a:	9307      	str	r3, [sp, #28]
  __GPIOA_CLK_ENABLE();
 8000a7c:	6963      	ldr	r3, [r4, #20]
 8000a7e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000a82:	6163      	str	r3, [r4, #20]
 8000a84:	6963      	ldr	r3, [r4, #20]
 8000a86:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000a8a:	9301      	str	r3, [sp, #4]
  HAL_GPIO_Init(GPIOA, &GpioInit);
 8000a8c:	a903      	add	r1, sp, #12
 8000a8e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
  __GPIOA_CLK_ENABLE();
 8000a92:	9b01      	ldr	r3, [sp, #4]
  HAL_GPIO_Init(GPIOA, &GpioInit);
 8000a94:	f000 fb98 	bl	80011c8 <HAL_GPIO_Init>

  UartHandle.Instance        = USART1;
 8000a98:	480d      	ldr	r0, [pc, #52]	; (8000ad0 <init_uart+0x70>)
  #if SS_VER==SS_VER_2_0
  UartHandle.Init.BaudRate   = 230400;
  #else
  UartHandle.Init.BaudRate   = 38400;
 8000a9a:	4b0e      	ldr	r3, [pc, #56]	; (8000ad4 <init_uart+0x74>)
 8000a9c:	f44f 4e16 	mov.w	lr, #38400	; 0x9600
 8000aa0:	e880 4008 	stmia.w	r0, {r3, lr}
  #endif
  UartHandle.Init.WordLength = UART_WORDLENGTH_8B;
 8000aa4:	2300      	movs	r3, #0
 8000aa6:	6083      	str	r3, [r0, #8]
  UartHandle.Init.StopBits   = UART_STOPBITS_1;
 8000aa8:	60c3      	str	r3, [r0, #12]
  UartHandle.Init.Parity     = UART_PARITY_NONE;
 8000aaa:	6103      	str	r3, [r0, #16]
  UartHandle.Init.HwFlowCtl  = UART_HWCONTROL_NONE;
 8000aac:	6183      	str	r3, [r0, #24]
  UartHandle.Init.Mode       = UART_MODE_TX_RX;
 8000aae:	230c      	movs	r3, #12
 8000ab0:	6143      	str	r3, [r0, #20]
  __USART1_CLK_ENABLE();
 8000ab2:	69a3      	ldr	r3, [r4, #24]
 8000ab4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000ab8:	61a3      	str	r3, [r4, #24]
 8000aba:	69a3      	ldr	r3, [r4, #24]
 8000abc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000ac0:	9302      	str	r3, [sp, #8]
 8000ac2:	9b02      	ldr	r3, [sp, #8]
  HAL_UART_Init(&UartHandle);
 8000ac4:	f000 fd96 	bl	80015f4 <HAL_UART_Init>
}
 8000ac8:	b008      	add	sp, #32
 8000aca:	bd10      	pop	{r4, pc}
 8000acc:	40021000 	.word	0x40021000
 8000ad0:	20000110 	.word	0x20000110
 8000ad4:	40013800 	.word	0x40013800

08000ad8 <trigger_setup>:

void trigger_setup(void)
{
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ad8:	4b10      	ldr	r3, [pc, #64]	; (8000b1c <trigger_setup+0x44>)
{
 8000ada:	b530      	push	{r4, r5, lr}
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000adc:	695a      	ldr	r2, [r3, #20]
 8000ade:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8000ae2:	615a      	str	r2, [r3, #20]
 8000ae4:	695b      	ldr	r3, [r3, #20]
{
 8000ae6:	b087      	sub	sp, #28
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ae8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000aec:	9300      	str	r3, [sp, #0]
 8000aee:	9b00      	ldr	r3, [sp, #0]

  GPIO_InitTypeDef GpioInit;
  GpioInit.Pin       = GPIO_PIN_12;
  GpioInit.Mode      = GPIO_MODE_OUTPUT_PP;
 8000af0:	2301      	movs	r3, #1
  GpioInit.Pin       = GPIO_PIN_12;
 8000af2:	f44f 5480 	mov.w	r4, #4096	; 0x1000
  GpioInit.Mode      = GPIO_MODE_OUTPUT_PP;
 8000af6:	9302      	str	r3, [sp, #8]
  GpioInit.Pull      = GPIO_NOPULL;
 8000af8:	2500      	movs	r5, #0
  GpioInit.Speed     = GPIO_SPEED_FREQ_HIGH;
 8000afa:	2303      	movs	r3, #3
  HAL_GPIO_Init(GPIOA, &GpioInit);
 8000afc:	a901      	add	r1, sp, #4
 8000afe:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
  GpioInit.Speed     = GPIO_SPEED_FREQ_HIGH;
 8000b02:	9304      	str	r3, [sp, #16]
  GpioInit.Pin       = GPIO_PIN_12;
 8000b04:	9401      	str	r4, [sp, #4]
  GpioInit.Pull      = GPIO_NOPULL;
 8000b06:	9503      	str	r5, [sp, #12]
  HAL_GPIO_Init(GPIOA, &GpioInit);
 8000b08:	f000 fb5e 	bl	80011c8 <HAL_GPIO_Init>

  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, RESET);
 8000b0c:	462a      	mov	r2, r5
 8000b0e:	4621      	mov	r1, r4
 8000b10:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b14:	f000 fc22 	bl	800135c <HAL_GPIO_WritePin>
}
 8000b18:	b007      	add	sp, #28
 8000b1a:	bd30      	pop	{r4, r5, pc}
 8000b1c:	40021000 	.word	0x40021000

08000b20 <trigger_high>:

void trigger_high(void)
{
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, SET);
 8000b20:	2201      	movs	r2, #1
 8000b22:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000b26:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b2a:	f000 bc17 	b.w	800135c <HAL_GPIO_WritePin>

08000b2e <trigger_low>:
}

void trigger_low(void)
{
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, RESET);
 8000b2e:	2200      	movs	r2, #0
 8000b30:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000b34:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b38:	f000 bc10 	b.w	800135c <HAL_GPIO_WritePin>

08000b3c <getch>:
}

char getch(void)
{
 8000b3c:	b513      	push	{r0, r1, r4, lr}
  uint8_t d;
  while (HAL_UART_Receive(&UartHandle, &d, 1, 5000) != HAL_OK)
    USART1->ICR |= (1 << 3);
 8000b3e:	4c09      	ldr	r4, [pc, #36]	; (8000b64 <getch+0x28>)
  while (HAL_UART_Receive(&UartHandle, &d, 1, 5000) != HAL_OK)
 8000b40:	4809      	ldr	r0, [pc, #36]	; (8000b68 <getch+0x2c>)
 8000b42:	f241 3388 	movw	r3, #5000	; 0x1388
 8000b46:	2201      	movs	r2, #1
 8000b48:	f10d 0107 	add.w	r1, sp, #7
 8000b4c:	f000 fdd5 	bl	80016fa <HAL_UART_Receive>
 8000b50:	b120      	cbz	r0, 8000b5c <getch+0x20>
    USART1->ICR |= (1 << 3);
 8000b52:	6a23      	ldr	r3, [r4, #32]
 8000b54:	f043 0308 	orr.w	r3, r3, #8
 8000b58:	6223      	str	r3, [r4, #32]
 8000b5a:	e7f1      	b.n	8000b40 <getch+0x4>
  //putch(d);
  return d;
}
 8000b5c:	f89d 0007 	ldrb.w	r0, [sp, #7]
 8000b60:	b002      	add	sp, #8
 8000b62:	bd10      	pop	{r4, pc}
 8000b64:	40013800 	.word	0x40013800
 8000b68:	20000110 	.word	0x20000110

08000b6c <putch>:

void putch(char c)
{
 8000b6c:	b507      	push	{r0, r1, r2, lr}
  uint8_t d  = c;
 8000b6e:	a902      	add	r1, sp, #8
  HAL_UART_Transmit(&UartHandle,  &d, 1, 5000);
 8000b70:	f241 3388 	movw	r3, #5000	; 0x1388
  uint8_t d  = c;
 8000b74:	f801 0d01 	strb.w	r0, [r1, #-1]!
  HAL_UART_Transmit(&UartHandle,  &d, 1, 5000);
 8000b78:	2201      	movs	r2, #1
 8000b7a:	4803      	ldr	r0, [pc, #12]	; (8000b88 <putch+0x1c>)
 8000b7c:	f000 fd65 	bl	800164a <HAL_UART_Transmit>
}
 8000b80:	b003      	add	sp, #12
 8000b82:	f85d fb04 	ldr.w	pc, [sp], #4
 8000b86:	bf00      	nop
 8000b88:	20000110 	.word	0x20000110

08000b8c <HAL_GetTick>:
	hal_sys_tick = 0;
	return HAL_OK;
}
uint32_t HAL_GetTick(void)
{
	return hal_sys_tick++;
 8000b8c:	4b02      	ldr	r3, [pc, #8]	; (8000b98 <HAL_GetTick+0xc>)
 8000b8e:	6818      	ldr	r0, [r3, #0]
 8000b90:	1c42      	adds	r2, r0, #1
 8000b92:	601a      	str	r2, [r3, #0]
}
 8000b94:	4770      	bx	lr
 8000b96:	bf00      	nop
 8000b98:	20000108 	.word	0x20000108

08000b9c <HAL_RCC_OscConfig>:
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000b9c:	6803      	ldr	r3, [r0, #0]
{
 8000b9e:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000ba2:	07d9      	lsls	r1, r3, #31
{
 8000ba4:	4604      	mov	r4, r0
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000ba6:	d403      	bmi.n	8000bb0 <HAL_RCC_OscConfig+0x14>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000ba8:	6823      	ldr	r3, [r4, #0]
 8000baa:	079a      	lsls	r2, r3, #30
 8000bac:	d474      	bmi.n	8000c98 <HAL_RCC_OscConfig+0xfc>
 8000bae:	e0f4      	b.n	8000d9a <HAL_RCC_OscConfig+0x1fe>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8000bb0:	49b6      	ldr	r1, [pc, #728]	; (8000e8c <HAL_RCC_OscConfig+0x2f0>)
 8000bb2:	684b      	ldr	r3, [r1, #4]
 8000bb4:	f003 030c 	and.w	r3, r3, #12
 8000bb8:	2b04      	cmp	r3, #4
 8000bba:	d007      	beq.n	8000bcc <HAL_RCC_OscConfig+0x30>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000bbc:	684b      	ldr	r3, [r1, #4]
 8000bbe:	f003 030c 	and.w	r3, r3, #12
 8000bc2:	2b08      	cmp	r3, #8
 8000bc4:	d117      	bne.n	8000bf6 <HAL_RCC_OscConfig+0x5a>
 8000bc6:	684b      	ldr	r3, [r1, #4]
 8000bc8:	03db      	lsls	r3, r3, #15
 8000bca:	d514      	bpl.n	8000bf6 <HAL_RCC_OscConfig+0x5a>
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000bcc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000bd0:	fa93 f2a3 	rbit	r2, r3
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000bd4:	6809      	ldr	r1, [r1, #0]
 8000bd6:	fa93 f3a3 	rbit	r3, r3
 8000bda:	fab3 f383 	clz	r3, r3
 8000bde:	f003 031f 	and.w	r3, r3, #31
 8000be2:	2201      	movs	r2, #1
 8000be4:	fa02 f303 	lsl.w	r3, r2, r3
 8000be8:	420b      	tst	r3, r1
 8000bea:	d0dd      	beq.n	8000ba8 <HAL_RCC_OscConfig+0xc>
 8000bec:	6863      	ldr	r3, [r4, #4]
 8000bee:	2b00      	cmp	r3, #0
 8000bf0:	d1da      	bne.n	8000ba8 <HAL_RCC_OscConfig+0xc>
        return HAL_ERROR;
 8000bf2:	2001      	movs	r0, #1
 8000bf4:	e23e      	b.n	8001074 <HAL_RCC_OscConfig+0x4d8>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000bf6:	6863      	ldr	r3, [r4, #4]
 8000bf8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000bfc:	d007      	beq.n	8000c0e <HAL_RCC_OscConfig+0x72>
 8000bfe:	680a      	ldr	r2, [r1, #0]
 8000c00:	b14b      	cbz	r3, 8000c16 <HAL_RCC_OscConfig+0x7a>
 8000c02:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000c06:	d106      	bne.n	8000c16 <HAL_RCC_OscConfig+0x7a>
 8000c08:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8000c0c:	600a      	str	r2, [r1, #0]
 8000c0e:	680a      	ldr	r2, [r1, #0]
 8000c10:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8000c14:	e005      	b.n	8000c22 <HAL_RCC_OscConfig+0x86>
 8000c16:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8000c1a:	600a      	str	r2, [r1, #0]
 8000c1c:	680a      	ldr	r2, [r1, #0]
 8000c1e:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8000c22:	600a      	str	r2, [r1, #0]
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8000c24:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 8000c26:	f022 000f 	bic.w	r0, r2, #15
 8000c2a:	68a2      	ldr	r2, [r4, #8]
 8000c2c:	4302      	orrs	r2, r0
 8000c2e:	62ca      	str	r2, [r1, #44]	; 0x2c
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000c30:	b1cb      	cbz	r3, 8000c66 <HAL_RCC_OscConfig+0xca>
        tickstart = HAL_GetTick();
 8000c32:	f7ff ffab 	bl	8000b8c <HAL_GetTick>
 8000c36:	f44f 3500 	mov.w	r5, #131072	; 0x20000
 8000c3a:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000c3c:	2601      	movs	r6, #1
 8000c3e:	fa95 f3a5 	rbit	r3, r5
 8000c42:	680a      	ldr	r2, [r1, #0]
 8000c44:	fa95 f3a5 	rbit	r3, r5
 8000c48:	fab3 f383 	clz	r3, r3
 8000c4c:	f003 031f 	and.w	r3, r3, #31
 8000c50:	fa06 f303 	lsl.w	r3, r6, r3
 8000c54:	4213      	tst	r3, r2
 8000c56:	d1a7      	bne.n	8000ba8 <HAL_RCC_OscConfig+0xc>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000c58:	f7ff ff98 	bl	8000b8c <HAL_GetTick>
 8000c5c:	1bc0      	subs	r0, r0, r7
 8000c5e:	2864      	cmp	r0, #100	; 0x64
 8000c60:	d9ed      	bls.n	8000c3e <HAL_RCC_OscConfig+0xa2>
            return HAL_TIMEOUT;
 8000c62:	2003      	movs	r0, #3
 8000c64:	e206      	b.n	8001074 <HAL_RCC_OscConfig+0x4d8>
        tickstart = HAL_GetTick();
 8000c66:	f7ff ff91 	bl	8000b8c <HAL_GetTick>
 8000c6a:	f44f 3500 	mov.w	r5, #131072	; 0x20000
 8000c6e:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000c70:	2601      	movs	r6, #1
 8000c72:	fa95 f3a5 	rbit	r3, r5
 8000c76:	680a      	ldr	r2, [r1, #0]
 8000c78:	fa95 f3a5 	rbit	r3, r5
 8000c7c:	fab3 f383 	clz	r3, r3
 8000c80:	f003 031f 	and.w	r3, r3, #31
 8000c84:	fa06 f303 	lsl.w	r3, r6, r3
 8000c88:	4213      	tst	r3, r2
 8000c8a:	d08d      	beq.n	8000ba8 <HAL_RCC_OscConfig+0xc>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000c8c:	f7ff ff7e 	bl	8000b8c <HAL_GetTick>
 8000c90:	1bc0      	subs	r0, r0, r7
 8000c92:	2864      	cmp	r0, #100	; 0x64
 8000c94:	d9ed      	bls.n	8000c72 <HAL_RCC_OscConfig+0xd6>
 8000c96:	e7e4      	b.n	8000c62 <HAL_RCC_OscConfig+0xc6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8000c98:	497c      	ldr	r1, [pc, #496]	; (8000e8c <HAL_RCC_OscConfig+0x2f0>)
 8000c9a:	684b      	ldr	r3, [r1, #4]
 8000c9c:	f013 0f0c 	tst.w	r3, #12
 8000ca0:	d007      	beq.n	8000cb2 <HAL_RCC_OscConfig+0x116>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8000ca2:	684b      	ldr	r3, [r1, #4]
 8000ca4:	f003 030c 	and.w	r3, r3, #12
 8000ca8:	2b08      	cmp	r3, #8
 8000caa:	d122      	bne.n	8000cf2 <HAL_RCC_OscConfig+0x156>
 8000cac:	684b      	ldr	r3, [r1, #4]
 8000cae:	03df      	lsls	r7, r3, #15
 8000cb0:	d41f      	bmi.n	8000cf2 <HAL_RCC_OscConfig+0x156>
 8000cb2:	2302      	movs	r3, #2
 8000cb4:	fa93 f2a3 	rbit	r2, r3
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000cb8:	6808      	ldr	r0, [r1, #0]
 8000cba:	fa93 f3a3 	rbit	r3, r3
 8000cbe:	fab3 f383 	clz	r3, r3
 8000cc2:	f003 031f 	and.w	r3, r3, #31
 8000cc6:	2201      	movs	r2, #1
 8000cc8:	fa02 f303 	lsl.w	r3, r2, r3
 8000ccc:	4203      	tst	r3, r0
 8000cce:	d002      	beq.n	8000cd6 <HAL_RCC_OscConfig+0x13a>
 8000cd0:	6923      	ldr	r3, [r4, #16]
 8000cd2:	4293      	cmp	r3, r2
 8000cd4:	d18d      	bne.n	8000bf2 <HAL_RCC_OscConfig+0x56>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000cd6:	680b      	ldr	r3, [r1, #0]
 8000cd8:	22f8      	movs	r2, #248	; 0xf8
 8000cda:	fa92 f2a2 	rbit	r2, r2
 8000cde:	6960      	ldr	r0, [r4, #20]
 8000ce0:	fab2 f282 	clz	r2, r2
 8000ce4:	fa00 f202 	lsl.w	r2, r0, r2
 8000ce8:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8000cec:	4313      	orrs	r3, r2
 8000cee:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000cf0:	e053      	b.n	8000d9a <HAL_RCC_OscConfig+0x1fe>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000cf2:	6922      	ldr	r2, [r4, #16]
 8000cf4:	2501      	movs	r5, #1
 8000cf6:	b37a      	cbz	r2, 8000d58 <HAL_RCC_OscConfig+0x1bc>
 8000cf8:	fa95 f3a5 	rbit	r3, r5
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000cfc:	fab3 f383 	clz	r3, r3
 8000d00:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8000d04:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8000d08:	009b      	lsls	r3, r3, #2
 8000d0a:	2602      	movs	r6, #2
 8000d0c:	601d      	str	r5, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000d0e:	f7ff ff3d 	bl	8000b8c <HAL_GetTick>
 8000d12:	4607      	mov	r7, r0
 8000d14:	fa96 f3a6 	rbit	r3, r6
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000d18:	485c      	ldr	r0, [pc, #368]	; (8000e8c <HAL_RCC_OscConfig+0x2f0>)
 8000d1a:	680a      	ldr	r2, [r1, #0]
 8000d1c:	fa96 f3a6 	rbit	r3, r6
 8000d20:	fab3 f383 	clz	r3, r3
 8000d24:	f003 031f 	and.w	r3, r3, #31
 8000d28:	fa05 f303 	lsl.w	r3, r5, r3
 8000d2c:	4213      	tst	r3, r2
 8000d2e:	d105      	bne.n	8000d3c <HAL_RCC_OscConfig+0x1a0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000d30:	f7ff ff2c 	bl	8000b8c <HAL_GetTick>
 8000d34:	1bc0      	subs	r0, r0, r7
 8000d36:	2802      	cmp	r0, #2
 8000d38:	d9ec      	bls.n	8000d14 <HAL_RCC_OscConfig+0x178>
 8000d3a:	e792      	b.n	8000c62 <HAL_RCC_OscConfig+0xc6>
            return HAL_TIMEOUT;
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000d3c:	6803      	ldr	r3, [r0, #0]
 8000d3e:	22f8      	movs	r2, #248	; 0xf8
 8000d40:	fa92 f2a2 	rbit	r2, r2
 8000d44:	6961      	ldr	r1, [r4, #20]
 8000d46:	fab2 f282 	clz	r2, r2
 8000d4a:	fa01 f202 	lsl.w	r2, r1, r2
 8000d4e:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8000d52:	4313      	orrs	r3, r2
 8000d54:	6003      	str	r3, [r0, #0]
 8000d56:	e020      	b.n	8000d9a <HAL_RCC_OscConfig+0x1fe>
 8000d58:	fa95 f3a5 	rbit	r3, r5
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000d5c:	fab3 f383 	clz	r3, r3
 8000d60:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8000d64:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8000d68:	009b      	lsls	r3, r3, #2
 8000d6a:	2602      	movs	r6, #2
 8000d6c:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000d6e:	f7ff ff0d 	bl	8000b8c <HAL_GetTick>
 8000d72:	4607      	mov	r7, r0
 8000d74:	fa96 f3a6 	rbit	r3, r6
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000d78:	680a      	ldr	r2, [r1, #0]
 8000d7a:	fa96 f3a6 	rbit	r3, r6
 8000d7e:	fab3 f383 	clz	r3, r3
 8000d82:	f003 031f 	and.w	r3, r3, #31
 8000d86:	fa05 f303 	lsl.w	r3, r5, r3
 8000d8a:	4213      	tst	r3, r2
 8000d8c:	d005      	beq.n	8000d9a <HAL_RCC_OscConfig+0x1fe>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000d8e:	f7ff fefd 	bl	8000b8c <HAL_GetTick>
 8000d92:	1bc0      	subs	r0, r0, r7
 8000d94:	2802      	cmp	r0, #2
 8000d96:	d9ed      	bls.n	8000d74 <HAL_RCC_OscConfig+0x1d8>
 8000d98:	e763      	b.n	8000c62 <HAL_RCC_OscConfig+0xc6>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000d9a:	6823      	ldr	r3, [r4, #0]
 8000d9c:	071e      	lsls	r6, r3, #28
 8000d9e:	d403      	bmi.n	8000da8 <HAL_RCC_OscConfig+0x20c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000da0:	6823      	ldr	r3, [r4, #0]
 8000da2:	075d      	lsls	r5, r3, #29
 8000da4:	d44a      	bmi.n	8000e3c <HAL_RCC_OscConfig+0x2a0>
 8000da6:	e0de      	b.n	8000f66 <HAL_RCC_OscConfig+0x3ca>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000da8:	69a0      	ldr	r0, [r4, #24]
 8000daa:	4d38      	ldr	r5, [pc, #224]	; (8000e8c <HAL_RCC_OscConfig+0x2f0>)
 8000dac:	2101      	movs	r1, #1
 8000dae:	b310      	cbz	r0, 8000df6 <HAL_RCC_OscConfig+0x25a>
 8000db0:	fa91 f2a1 	rbit	r2, r1
      __HAL_RCC_LSI_ENABLE();
 8000db4:	4b36      	ldr	r3, [pc, #216]	; (8000e90 <HAL_RCC_OscConfig+0x2f4>)
 8000db6:	fab2 f282 	clz	r2, r2
 8000dba:	4413      	add	r3, r2
 8000dbc:	009b      	lsls	r3, r3, #2
 8000dbe:	2602      	movs	r6, #2
 8000dc0:	6019      	str	r1, [r3, #0]
      tickstart = HAL_GetTick();
 8000dc2:	f7ff fee3 	bl	8000b8c <HAL_GetTick>
 8000dc6:	4607      	mov	r7, r0
 8000dc8:	fa96 f3a6 	rbit	r3, r6
 8000dcc:	fa96 f3a6 	rbit	r3, r6
 8000dd0:	fa96 f3a6 	rbit	r3, r6
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000dd4:	6a6a      	ldr	r2, [r5, #36]	; 0x24
 8000dd6:	fa96 f3a6 	rbit	r3, r6
 8000dda:	fab3 f383 	clz	r3, r3
 8000dde:	f003 031f 	and.w	r3, r3, #31
 8000de2:	fa01 f303 	lsl.w	r3, r1, r3
 8000de6:	4213      	tst	r3, r2
 8000de8:	d1da      	bne.n	8000da0 <HAL_RCC_OscConfig+0x204>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000dea:	f7ff fecf 	bl	8000b8c <HAL_GetTick>
 8000dee:	1bc0      	subs	r0, r0, r7
 8000df0:	2802      	cmp	r0, #2
 8000df2:	d9e9      	bls.n	8000dc8 <HAL_RCC_OscConfig+0x22c>
 8000df4:	e735      	b.n	8000c62 <HAL_RCC_OscConfig+0xc6>
 8000df6:	fa91 f2a1 	rbit	r2, r1
      __HAL_RCC_LSI_DISABLE();
 8000dfa:	4b25      	ldr	r3, [pc, #148]	; (8000e90 <HAL_RCC_OscConfig+0x2f4>)
 8000dfc:	fab2 f282 	clz	r2, r2
 8000e00:	4413      	add	r3, r2
 8000e02:	009b      	lsls	r3, r3, #2
 8000e04:	2602      	movs	r6, #2
 8000e06:	6018      	str	r0, [r3, #0]
      tickstart = HAL_GetTick();
 8000e08:	f7ff fec0 	bl	8000b8c <HAL_GetTick>
 8000e0c:	4607      	mov	r7, r0
 8000e0e:	fa96 f3a6 	rbit	r3, r6
 8000e12:	fa96 f3a6 	rbit	r3, r6
 8000e16:	fa96 f3a6 	rbit	r3, r6
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000e1a:	6a6a      	ldr	r2, [r5, #36]	; 0x24
 8000e1c:	fa96 f3a6 	rbit	r3, r6
 8000e20:	fab3 f383 	clz	r3, r3
 8000e24:	f003 031f 	and.w	r3, r3, #31
 8000e28:	fa01 f303 	lsl.w	r3, r1, r3
 8000e2c:	4213      	tst	r3, r2
 8000e2e:	d0b7      	beq.n	8000da0 <HAL_RCC_OscConfig+0x204>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000e30:	f7ff feac 	bl	8000b8c <HAL_GetTick>
 8000e34:	1bc0      	subs	r0, r0, r7
 8000e36:	2802      	cmp	r0, #2
 8000e38:	d9e9      	bls.n	8000e0e <HAL_RCC_OscConfig+0x272>
 8000e3a:	e712      	b.n	8000c62 <HAL_RCC_OscConfig+0xc6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000e3c:	4913      	ldr	r1, [pc, #76]	; (8000e8c <HAL_RCC_OscConfig+0x2f0>)
 8000e3e:	69cb      	ldr	r3, [r1, #28]
 8000e40:	00d8      	lsls	r0, r3, #3
 8000e42:	d40a      	bmi.n	8000e5a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000e44:	69cb      	ldr	r3, [r1, #28]
 8000e46:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000e4a:	61cb      	str	r3, [r1, #28]
 8000e4c:	69cb      	ldr	r3, [r1, #28]
 8000e4e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e52:	9301      	str	r3, [sp, #4]
 8000e54:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8000e56:	2501      	movs	r5, #1
 8000e58:	e000      	b.n	8000e5c <HAL_RCC_OscConfig+0x2c0>
    FlagStatus       pwrclkchanged = RESET;
 8000e5a:	2500      	movs	r5, #0
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000e5c:	4e0d      	ldr	r6, [pc, #52]	; (8000e94 <HAL_RCC_OscConfig+0x2f8>)
 8000e5e:	6833      	ldr	r3, [r6, #0]
 8000e60:	05da      	lsls	r2, r3, #23
 8000e62:	d503      	bpl.n	8000e6c <HAL_RCC_OscConfig+0x2d0>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000e64:	68e3      	ldr	r3, [r4, #12]
 8000e66:	2b01      	cmp	r3, #1
 8000e68:	d116      	bne.n	8000e98 <HAL_RCC_OscConfig+0x2fc>
 8000e6a:	e02b      	b.n	8000ec4 <HAL_RCC_OscConfig+0x328>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000e6c:	6833      	ldr	r3, [r6, #0]
 8000e6e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000e72:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 8000e74:	f7ff fe8a 	bl	8000b8c <HAL_GetTick>
 8000e78:	4607      	mov	r7, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000e7a:	6833      	ldr	r3, [r6, #0]
 8000e7c:	05db      	lsls	r3, r3, #23
 8000e7e:	d4f1      	bmi.n	8000e64 <HAL_RCC_OscConfig+0x2c8>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000e80:	f7ff fe84 	bl	8000b8c <HAL_GetTick>
 8000e84:	1bc0      	subs	r0, r0, r7
 8000e86:	2864      	cmp	r0, #100	; 0x64
 8000e88:	d9f7      	bls.n	8000e7a <HAL_RCC_OscConfig+0x2de>
 8000e8a:	e6ea      	b.n	8000c62 <HAL_RCC_OscConfig+0xc6>
 8000e8c:	40021000 	.word	0x40021000
 8000e90:	10908120 	.word	0x10908120
 8000e94:	40007000 	.word	0x40007000
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000e98:	b973      	cbnz	r3, 8000eb8 <HAL_RCC_OscConfig+0x31c>
 8000e9a:	6a0b      	ldr	r3, [r1, #32]
 8000e9c:	f023 0301 	bic.w	r3, r3, #1
 8000ea0:	620b      	str	r3, [r1, #32]
 8000ea2:	6a0b      	ldr	r3, [r1, #32]
 8000ea4:	f023 0304 	bic.w	r3, r3, #4
 8000ea8:	620b      	str	r3, [r1, #32]
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000eaa:	f7ff fe6f 	bl	8000b8c <HAL_GetTick>
 8000eae:	2602      	movs	r6, #2
 8000eb0:	4681      	mov	r9, r0
 8000eb2:	46b0      	mov	r8, r6
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000eb4:	2701      	movs	r7, #1
 8000eb6:	e03c      	b.n	8000f32 <HAL_RCC_OscConfig+0x396>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000eb8:	2b05      	cmp	r3, #5
 8000eba:	6a0b      	ldr	r3, [r1, #32]
 8000ebc:	d106      	bne.n	8000ecc <HAL_RCC_OscConfig+0x330>
 8000ebe:	f043 0304 	orr.w	r3, r3, #4
 8000ec2:	620b      	str	r3, [r1, #32]
 8000ec4:	6a0b      	ldr	r3, [r1, #32]
 8000ec6:	f043 0301 	orr.w	r3, r3, #1
 8000eca:	e005      	b.n	8000ed8 <HAL_RCC_OscConfig+0x33c>
 8000ecc:	f023 0301 	bic.w	r3, r3, #1
 8000ed0:	620b      	str	r3, [r1, #32]
 8000ed2:	6a0b      	ldr	r3, [r1, #32]
 8000ed4:	f023 0304 	bic.w	r3, r3, #4
 8000ed8:	620b      	str	r3, [r1, #32]
      tickstart = HAL_GetTick();
 8000eda:	f7ff fe57 	bl	8000b8c <HAL_GetTick>
 8000ede:	2602      	movs	r6, #2
 8000ee0:	4681      	mov	r9, r0
 8000ee2:	46b0      	mov	r8, r6
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000ee4:	2701      	movs	r7, #1
 8000ee6:	fa96 f3a6 	rbit	r3, r6
 8000eea:	fa96 f3a6 	rbit	r3, r6
 8000eee:	b10b      	cbz	r3, 8000ef4 <HAL_RCC_OscConfig+0x358>
 8000ef0:	6a0a      	ldr	r2, [r1, #32]
 8000ef2:	e002      	b.n	8000efa <HAL_RCC_OscConfig+0x35e>
 8000ef4:	fa96 f3a6 	rbit	r3, r6
 8000ef8:	6a4a      	ldr	r2, [r1, #36]	; 0x24
 8000efa:	fa98 f3a8 	rbit	r3, r8
 8000efe:	fab3 f383 	clz	r3, r3
 8000f02:	f003 031f 	and.w	r3, r3, #31
 8000f06:	fa07 f303 	lsl.w	r3, r7, r3
 8000f0a:	4213      	tst	r3, r2
 8000f0c:	d121      	bne.n	8000f52 <HAL_RCC_OscConfig+0x3b6>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000f0e:	f7ff fe3d 	bl	8000b8c <HAL_GetTick>
 8000f12:	f241 3388 	movw	r3, #5000	; 0x1388
 8000f16:	ebc9 0000 	rsb	r0, r9, r0
 8000f1a:	4298      	cmp	r0, r3
 8000f1c:	d9e3      	bls.n	8000ee6 <HAL_RCC_OscConfig+0x34a>
 8000f1e:	e6a0      	b.n	8000c62 <HAL_RCC_OscConfig+0xc6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000f20:	f7ff fe34 	bl	8000b8c <HAL_GetTick>
 8000f24:	f241 3388 	movw	r3, #5000	; 0x1388
 8000f28:	ebc9 0000 	rsb	r0, r9, r0
 8000f2c:	4298      	cmp	r0, r3
 8000f2e:	f63f ae98 	bhi.w	8000c62 <HAL_RCC_OscConfig+0xc6>
 8000f32:	fa96 f3a6 	rbit	r3, r6
 8000f36:	fa96 f3a6 	rbit	r3, r6
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000f3a:	b183      	cbz	r3, 8000f5e <HAL_RCC_OscConfig+0x3c2>
 8000f3c:	6a0a      	ldr	r2, [r1, #32]
 8000f3e:	fa98 f3a8 	rbit	r3, r8
 8000f42:	fab3 f383 	clz	r3, r3
 8000f46:	f003 031f 	and.w	r3, r3, #31
 8000f4a:	fa07 f303 	lsl.w	r3, r7, r3
 8000f4e:	4213      	tst	r3, r2
 8000f50:	d1e6      	bne.n	8000f20 <HAL_RCC_OscConfig+0x384>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8000f52:	b145      	cbz	r5, 8000f66 <HAL_RCC_OscConfig+0x3ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8000f54:	69cb      	ldr	r3, [r1, #28]
 8000f56:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8000f5a:	61cb      	str	r3, [r1, #28]
 8000f5c:	e003      	b.n	8000f66 <HAL_RCC_OscConfig+0x3ca>
 8000f5e:	fa96 f3a6 	rbit	r3, r6
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000f62:	6a4a      	ldr	r2, [r1, #36]	; 0x24
 8000f64:	e7eb      	b.n	8000f3e <HAL_RCC_OscConfig+0x3a2>
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000f66:	69e2      	ldr	r2, [r4, #28]
 8000f68:	b90a      	cbnz	r2, 8000f6e <HAL_RCC_OscConfig+0x3d2>
    {
      return HAL_ERROR;
    }
  }
  
  return HAL_OK;
 8000f6a:	2000      	movs	r0, #0
 8000f6c:	e082      	b.n	8001074 <HAL_RCC_OscConfig+0x4d8>
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000f6e:	4943      	ldr	r1, [pc, #268]	; (800107c <HAL_RCC_OscConfig+0x4e0>)
 8000f70:	684b      	ldr	r3, [r1, #4]
 8000f72:	f003 030c 	and.w	r3, r3, #12
 8000f76:	2b08      	cmp	r3, #8
 8000f78:	f43f ae3b 	beq.w	8000bf2 <HAL_RCC_OscConfig+0x56>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000f7c:	2a02      	cmp	r2, #2
 8000f7e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000f82:	d153      	bne.n	800102c <HAL_RCC_OscConfig+0x490>
 8000f84:	fa93 f3a3 	rbit	r3, r3
        __HAL_RCC_PLL_DISABLE();
 8000f88:	fab3 f383 	clz	r3, r3
 8000f8c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8000f90:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8000f94:	009b      	lsls	r3, r3, #2
 8000f96:	2200      	movs	r2, #0
 8000f98:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000f9a:	f7ff fdf7 	bl	8000b8c <HAL_GetTick>
 8000f9e:	f04f 7600 	mov.w	r6, #33554432	; 0x2000000
 8000fa2:	4680      	mov	r8, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000fa4:	2701      	movs	r7, #1
 8000fa6:	fa96 f3a6 	rbit	r3, r6
 8000faa:	4834      	ldr	r0, [pc, #208]	; (800107c <HAL_RCC_OscConfig+0x4e0>)
 8000fac:	680a      	ldr	r2, [r1, #0]
 8000fae:	fa96 f3a6 	rbit	r3, r6
 8000fb2:	fab3 f383 	clz	r3, r3
 8000fb6:	f003 031f 	and.w	r3, r3, #31
 8000fba:	fa07 f303 	lsl.w	r3, r7, r3
 8000fbe:	4213      	tst	r3, r2
 8000fc0:	f04f 0501 	mov.w	r5, #1
 8000fc4:	d006      	beq.n	8000fd4 <HAL_RCC_OscConfig+0x438>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000fc6:	f7ff fde1 	bl	8000b8c <HAL_GetTick>
 8000fca:	ebc8 0000 	rsb	r0, r8, r0
 8000fce:	2802      	cmp	r0, #2
 8000fd0:	d9e9      	bls.n	8000fa6 <HAL_RCC_OscConfig+0x40a>
 8000fd2:	e646      	b.n	8000c62 <HAL_RCC_OscConfig+0xc6>
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8000fd4:	6843      	ldr	r3, [r0, #4]
 8000fd6:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8000fd8:	6a22      	ldr	r2, [r4, #32]
 8000fda:	f423 1374 	bic.w	r3, r3, #3997696	; 0x3d0000
 8000fde:	4332      	orrs	r2, r6
 8000fe0:	4313      	orrs	r3, r2
 8000fe2:	6043      	str	r3, [r0, #4]
 8000fe4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000fe8:	fa93 f3a3 	rbit	r3, r3
        __HAL_RCC_PLL_ENABLE();
 8000fec:	fab3 f383 	clz	r3, r3
 8000ff0:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8000ff4:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8000ff8:	009b      	lsls	r3, r3, #2
 8000ffa:	f04f 7400 	mov.w	r4, #33554432	; 0x2000000
 8000ffe:	601d      	str	r5, [r3, #0]
        tickstart = HAL_GetTick();
 8001000:	f7ff fdc4 	bl	8000b8c <HAL_GetTick>
 8001004:	4606      	mov	r6, r0
 8001006:	fa94 f3a4 	rbit	r3, r4
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800100a:	680a      	ldr	r2, [r1, #0]
 800100c:	fa94 f3a4 	rbit	r3, r4
 8001010:	fab3 f383 	clz	r3, r3
 8001014:	f003 031f 	and.w	r3, r3, #31
 8001018:	fa05 f303 	lsl.w	r3, r5, r3
 800101c:	4213      	tst	r3, r2
 800101e:	d1a4      	bne.n	8000f6a <HAL_RCC_OscConfig+0x3ce>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001020:	f7ff fdb4 	bl	8000b8c <HAL_GetTick>
 8001024:	1b80      	subs	r0, r0, r6
 8001026:	2802      	cmp	r0, #2
 8001028:	d9ed      	bls.n	8001006 <HAL_RCC_OscConfig+0x46a>
 800102a:	e61a      	b.n	8000c62 <HAL_RCC_OscConfig+0xc6>
 800102c:	fa93 f3a3 	rbit	r3, r3
        __HAL_RCC_PLL_DISABLE();
 8001030:	fab3 f383 	clz	r3, r3
 8001034:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001038:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800103c:	009b      	lsls	r3, r3, #2
 800103e:	2200      	movs	r2, #0
 8001040:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001042:	f7ff fda3 	bl	8000b8c <HAL_GetTick>
 8001046:	f04f 7400 	mov.w	r4, #33554432	; 0x2000000
 800104a:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800104c:	2501      	movs	r5, #1
 800104e:	fa94 f3a4 	rbit	r3, r4
 8001052:	680a      	ldr	r2, [r1, #0]
 8001054:	fa94 f3a4 	rbit	r3, r4
 8001058:	fab3 f383 	clz	r3, r3
 800105c:	f003 031f 	and.w	r3, r3, #31
 8001060:	fa05 f303 	lsl.w	r3, r5, r3
 8001064:	4213      	tst	r3, r2
 8001066:	d080      	beq.n	8000f6a <HAL_RCC_OscConfig+0x3ce>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001068:	f7ff fd90 	bl	8000b8c <HAL_GetTick>
 800106c:	1b80      	subs	r0, r0, r6
 800106e:	2802      	cmp	r0, #2
 8001070:	d9ed      	bls.n	800104e <HAL_RCC_OscConfig+0x4b2>
 8001072:	e5f6      	b.n	8000c62 <HAL_RCC_OscConfig+0xc6>
}
 8001074:	b003      	add	sp, #12
 8001076:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800107a:	bf00      	nop
 800107c:	40021000 	.word	0x40021000

08001080 <HAL_RCC_ClockConfig>:
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8001080:	4a4f      	ldr	r2, [pc, #316]	; (80011c0 <HAL_RCC_ClockConfig+0x140>)
{
 8001082:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8001084:	6813      	ldr	r3, [r2, #0]
 8001086:	f003 0307 	and.w	r3, r3, #7
 800108a:	428b      	cmp	r3, r1
{
 800108c:	4605      	mov	r5, r0
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 800108e:	d30a      	bcc.n	80010a6 <HAL_RCC_ClockConfig+0x26>
      return HAL_ERROR;
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001090:	6828      	ldr	r0, [r5, #0]
 8001092:	0784      	lsls	r4, r0, #30
 8001094:	d513      	bpl.n	80010be <HAL_RCC_ClockConfig+0x3e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001096:	4c4b      	ldr	r4, [pc, #300]	; (80011c4 <HAL_RCC_ClockConfig+0x144>)
 8001098:	6863      	ldr	r3, [r4, #4]
 800109a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800109e:	68ab      	ldr	r3, [r5, #8]
 80010a0:	4313      	orrs	r3, r2
 80010a2:	6063      	str	r3, [r4, #4]
 80010a4:	e00b      	b.n	80010be <HAL_RCC_ClockConfig+0x3e>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80010a6:	6813      	ldr	r3, [r2, #0]
 80010a8:	f023 0307 	bic.w	r3, r3, #7
 80010ac:	430b      	orrs	r3, r1
 80010ae:	6013      	str	r3, [r2, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80010b0:	6813      	ldr	r3, [r2, #0]
 80010b2:	f003 0307 	and.w	r3, r3, #7
 80010b6:	4299      	cmp	r1, r3
 80010b8:	d0ea      	beq.n	8001090 <HAL_RCC_ClockConfig+0x10>
      return HAL_ERROR;
 80010ba:	2001      	movs	r0, #1
 80010bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80010be:	07c2      	lsls	r2, r0, #31
 80010c0:	d406      	bmi.n	80010d0 <HAL_RCC_ClockConfig+0x50>
        }
      }
    }      
  }    
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 80010c2:	4a3f      	ldr	r2, [pc, #252]	; (80011c0 <HAL_RCC_ClockConfig+0x140>)
 80010c4:	6813      	ldr	r3, [r2, #0]
 80010c6:	f003 0307 	and.w	r3, r3, #7
 80010ca:	4299      	cmp	r1, r3
 80010cc:	d356      	bcc.n	800117c <HAL_RCC_ClockConfig+0xfc>
 80010ce:	e05f      	b.n	8001190 <HAL_RCC_ClockConfig+0x110>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80010d0:	686a      	ldr	r2, [r5, #4]
 80010d2:	4c3c      	ldr	r4, [pc, #240]	; (80011c4 <HAL_RCC_ClockConfig+0x144>)
 80010d4:	2a01      	cmp	r2, #1
 80010d6:	d10e      	bne.n	80010f6 <HAL_RCC_ClockConfig+0x76>
 80010d8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80010dc:	fa93 f0a3 	rbit	r0, r3
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80010e0:	6820      	ldr	r0, [r4, #0]
 80010e2:	fa93 f3a3 	rbit	r3, r3
 80010e6:	fab3 f383 	clz	r3, r3
 80010ea:	f003 031f 	and.w	r3, r3, #31
 80010ee:	fa02 f303 	lsl.w	r3, r2, r3
 80010f2:	4203      	tst	r3, r0
 80010f4:	e011      	b.n	800111a <HAL_RCC_ClockConfig+0x9a>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80010f6:	2a02      	cmp	r2, #2
 80010f8:	bf0c      	ite	eq
 80010fa:	f04f 7300 	moveq.w	r3, #33554432	; 0x2000000
 80010fe:	2302      	movne	r3, #2
 8001100:	fa93 f0a3 	rbit	r0, r3
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001104:	6826      	ldr	r6, [r4, #0]
 8001106:	fa93 f3a3 	rbit	r3, r3
 800110a:	fab3 f383 	clz	r3, r3
 800110e:	f003 031f 	and.w	r3, r3, #31
 8001112:	2001      	movs	r0, #1
 8001114:	fa00 f303 	lsl.w	r3, r0, r3
 8001118:	4233      	tst	r3, r6
 800111a:	d0ce      	beq.n	80010ba <HAL_RCC_ClockConfig+0x3a>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800111c:	6863      	ldr	r3, [r4, #4]
 800111e:	f023 0303 	bic.w	r3, r3, #3
 8001122:	431a      	orrs	r2, r3
 8001124:	6062      	str	r2, [r4, #4]
    tickstart = HAL_GetTick();
 8001126:	f7ff fd31 	bl	8000b8c <HAL_GetTick>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800112a:	686b      	ldr	r3, [r5, #4]
 800112c:	2b01      	cmp	r3, #1
    tickstart = HAL_GetTick();
 800112e:	4606      	mov	r6, r0
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001130:	f241 3788 	movw	r7, #5000	; 0x1388
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001134:	d10b      	bne.n	800114e <HAL_RCC_ClockConfig+0xce>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8001136:	6863      	ldr	r3, [r4, #4]
 8001138:	f003 030c 	and.w	r3, r3, #12
 800113c:	2b04      	cmp	r3, #4
 800113e:	d0c0      	beq.n	80010c2 <HAL_RCC_ClockConfig+0x42>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001140:	f7ff fd24 	bl	8000b8c <HAL_GetTick>
 8001144:	1b80      	subs	r0, r0, r6
 8001146:	42b8      	cmp	r0, r7
 8001148:	d9f5      	bls.n	8001136 <HAL_RCC_ClockConfig+0xb6>
          return HAL_TIMEOUT;
 800114a:	2003      	movs	r0, #3
 800114c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800114e:	2b02      	cmp	r3, #2
 8001150:	d10f      	bne.n	8001172 <HAL_RCC_ClockConfig+0xf2>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001152:	6863      	ldr	r3, [r4, #4]
 8001154:	f003 030c 	and.w	r3, r3, #12
 8001158:	2b08      	cmp	r3, #8
 800115a:	d0b2      	beq.n	80010c2 <HAL_RCC_ClockConfig+0x42>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800115c:	f7ff fd16 	bl	8000b8c <HAL_GetTick>
 8001160:	1b80      	subs	r0, r0, r6
 8001162:	42b8      	cmp	r0, r7
 8001164:	d9f5      	bls.n	8001152 <HAL_RCC_ClockConfig+0xd2>
 8001166:	e7f0      	b.n	800114a <HAL_RCC_ClockConfig+0xca>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001168:	f7ff fd10 	bl	8000b8c <HAL_GetTick>
 800116c:	1b80      	subs	r0, r0, r6
 800116e:	42b8      	cmp	r0, r7
 8001170:	d8eb      	bhi.n	800114a <HAL_RCC_ClockConfig+0xca>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8001172:	6863      	ldr	r3, [r4, #4]
 8001174:	f013 0f0c 	tst.w	r3, #12
 8001178:	d1f6      	bne.n	8001168 <HAL_RCC_ClockConfig+0xe8>
 800117a:	e7a2      	b.n	80010c2 <HAL_RCC_ClockConfig+0x42>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800117c:	6813      	ldr	r3, [r2, #0]
 800117e:	f023 0307 	bic.w	r3, r3, #7
 8001182:	430b      	orrs	r3, r1
 8001184:	6013      	str	r3, [r2, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001186:	6813      	ldr	r3, [r2, #0]
 8001188:	f003 0307 	and.w	r3, r3, #7
 800118c:	4299      	cmp	r1, r3
 800118e:	d194      	bne.n	80010ba <HAL_RCC_ClockConfig+0x3a>
      return HAL_ERROR;
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001190:	6828      	ldr	r0, [r5, #0]
 8001192:	0743      	lsls	r3, r0, #29
 8001194:	d506      	bpl.n	80011a4 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001196:	490b      	ldr	r1, [pc, #44]	; (80011c4 <HAL_RCC_ClockConfig+0x144>)
 8001198:	684b      	ldr	r3, [r1, #4]
 800119a:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800119e:	68eb      	ldr	r3, [r5, #12]
 80011a0:	4313      	orrs	r3, r2
 80011a2:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80011a4:	f010 0008 	ands.w	r0, r0, #8
 80011a8:	d008      	beq.n	80011bc <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80011aa:	4a06      	ldr	r2, [pc, #24]	; (80011c4 <HAL_RCC_ClockConfig+0x144>)
 80011ac:	6929      	ldr	r1, [r5, #16]
 80011ae:	6853      	ldr	r3, [r2, #4]
 80011b0:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 80011b4:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 80011b8:	6053      	str	r3, [r2, #4]
  //SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];

  /* Configure the source of time base considering new system clocks settings*/
  //HAL_InitTick (TICK_INT_PRIORITY);
  
  return HAL_OK;
 80011ba:	2000      	movs	r0, #0
}
 80011bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80011be:	bf00      	nop
 80011c0:	40022000 	.word	0x40022000
 80011c4:	40021000 	.word	0x40021000

080011c8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80011c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        temp &= ~((0x0FU) << (4U * (position & 0x03U)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80011cc:	f8df 9184 	ldr.w	r9, [pc, #388]	; 8001354 <HAL_GPIO_Init+0x18c>
  while (((GPIO_Init->Pin) >> position) != RESET)
 80011d0:	680b      	ldr	r3, [r1, #0]
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80011d2:	f8df 8184 	ldr.w	r8, [pc, #388]	; 8001358 <HAL_GPIO_Init+0x190>
{
 80011d6:	b085      	sub	sp, #20
 80011d8:	464c      	mov	r4, r9
  while (((GPIO_Init->Pin) >> position) != RESET)
 80011da:	9301      	str	r3, [sp, #4]
  uint32_t position = 0x00U;
 80011dc:	2300      	movs	r3, #0
  while (((GPIO_Init->Pin) >> position) != RESET)
 80011de:	9a01      	ldr	r2, [sp, #4]
 80011e0:	40da      	lsrs	r2, r3
 80011e2:	f000 80b1 	beq.w	8001348 <HAL_GPIO_Init+0x180>
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 80011e6:	2201      	movs	r2, #1
 80011e8:	fa02 fa03 	lsl.w	sl, r2, r3
    if(iocurrent)
 80011ec:	9a01      	ldr	r2, [sp, #4]
 80011ee:	ea12 060a 	ands.w	r6, r2, sl
 80011f2:	f000 80a7 	beq.w	8001344 <HAL_GPIO_Init+0x17c>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80011f6:	684a      	ldr	r2, [r1, #4]
 80011f8:	f022 0e10 	bic.w	lr, r2, #16
 80011fc:	f1be 0f02 	cmp.w	lr, #2
 8001200:	d114      	bne.n	800122c <HAL_GPIO_Init+0x64>
 8001202:	ea4f 0cd3 	mov.w	ip, r3, lsr #3
 8001206:	eb00 0c8c 	add.w	ip, r0, ip, lsl #2
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800120a:	f003 0b07 	and.w	fp, r3, #7
        temp = GPIOx->AFR[position >> 3];
 800120e:	f8dc 7020 	ldr.w	r7, [ip, #32]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001212:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 8001216:	250f      	movs	r5, #15
 8001218:	fa05 f50b 	lsl.w	r5, r5, fp
 800121c:	ea27 0505 	bic.w	r5, r7, r5
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001220:	690f      	ldr	r7, [r1, #16]
 8001222:	fa07 f70b 	lsl.w	r7, r7, fp
 8001226:	432f      	orrs	r7, r5
        GPIOx->AFR[position >> 3] = temp;
 8001228:	f8cc 7020 	str.w	r7, [ip, #32]
 800122c:	ea4f 0b43 	mov.w	fp, r3, lsl #1
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001230:	2703      	movs	r7, #3
      temp = GPIOx->MODER;
 8001232:	6805      	ldr	r5, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001234:	fa07 fc0b 	lsl.w	ip, r7, fp
 8001238:	ea6f 0c0c 	mvn.w	ip, ip
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800123c:	4017      	ands	r7, r2
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800123e:	ea05 050c 	and.w	r5, r5, ip
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001242:	fa07 f70b 	lsl.w	r7, r7, fp
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001246:	f10e 3eff 	add.w	lr, lr, #4294967295	; 0xffffffff
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800124a:	433d      	orrs	r5, r7
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800124c:	f1be 0f01 	cmp.w	lr, #1
      GPIOx->MODER = temp;
 8001250:	6005      	str	r5, [r0, #0]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001252:	d810      	bhi.n	8001276 <HAL_GPIO_Init+0xae>
        temp = GPIOx->OSPEEDR;
 8001254:	6885      	ldr	r5, [r0, #8]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001256:	68cf      	ldr	r7, [r1, #12]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001258:	ea0c 0505 	and.w	r5, ip, r5
        temp |= (GPIO_Init->Speed << (position * 2U));
 800125c:	fa07 f70b 	lsl.w	r7, r7, fp
 8001260:	432f      	orrs	r7, r5
        GPIOx->OSPEEDR = temp;
 8001262:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 8001264:	6845      	ldr	r5, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001266:	ea25 0a0a 	bic.w	sl, r5, sl
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800126a:	f3c2 1500 	ubfx	r5, r2, #4, #1
 800126e:	409d      	lsls	r5, r3
 8001270:	ea45 050a 	orr.w	r5, r5, sl
        GPIOx->OTYPER = temp;
 8001274:	6045      	str	r5, [r0, #4]
      temp = GPIOx->PUPDR;
 8001276:	68c5      	ldr	r5, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001278:	ea0c 0c05 	and.w	ip, ip, r5
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800127c:	688d      	ldr	r5, [r1, #8]
 800127e:	fa05 f50b 	lsl.w	r5, r5, fp
 8001282:	ea45 050c 	orr.w	r5, r5, ip
      GPIOx->PUPDR = temp;
 8001286:	60c5      	str	r5, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001288:	00d5      	lsls	r5, r2, #3
 800128a:	d55b      	bpl.n	8001344 <HAL_GPIO_Init+0x17c>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800128c:	f8d8 5018 	ldr.w	r5, [r8, #24]
 8001290:	f045 0501 	orr.w	r5, r5, #1
 8001294:	f8c8 5018 	str.w	r5, [r8, #24]
 8001298:	f8d8 5018 	ldr.w	r5, [r8, #24]
 800129c:	f023 0e03 	bic.w	lr, r3, #3
 80012a0:	f10e 4e80 	add.w	lr, lr, #1073741824	; 0x40000000
 80012a4:	f005 0501 	and.w	r5, r5, #1
 80012a8:	f50e 3e80 	add.w	lr, lr, #65536	; 0x10000
 80012ac:	9503      	str	r5, [sp, #12]
        temp &= ~((0x0FU) << (4U * (position & 0x03U)));
 80012ae:	f003 0c03 	and.w	ip, r3, #3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80012b2:	9d03      	ldr	r5, [sp, #12]
        temp = SYSCFG->EXTICR[position >> 2];
 80012b4:	f8de 5008 	ldr.w	r5, [lr, #8]
        temp &= ~((0x0FU) << (4U * (position & 0x03U)));
 80012b8:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 80012bc:	270f      	movs	r7, #15
 80012be:	fa07 f70c 	lsl.w	r7, r7, ip
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80012c2:	f1b0 4f90 	cmp.w	r0, #1207959552	; 0x48000000
        temp &= ~((0x0FU) << (4U * (position & 0x03U)));
 80012c6:	ea25 0507 	bic.w	r5, r5, r7
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80012ca:	d011      	beq.n	80012f0 <HAL_GPIO_Init+0x128>
 80012cc:	4f20      	ldr	r7, [pc, #128]	; (8001350 <HAL_GPIO_Init+0x188>)
 80012ce:	42b8      	cmp	r0, r7
 80012d0:	d010      	beq.n	80012f4 <HAL_GPIO_Init+0x12c>
 80012d2:	f507 6780 	add.w	r7, r7, #1024	; 0x400
 80012d6:	42b8      	cmp	r0, r7
 80012d8:	d00e      	beq.n	80012f8 <HAL_GPIO_Init+0x130>
 80012da:	f507 6780 	add.w	r7, r7, #1024	; 0x400
 80012de:	42b8      	cmp	r0, r7
 80012e0:	d00c      	beq.n	80012fc <HAL_GPIO_Init+0x134>
 80012e2:	f507 6780 	add.w	r7, r7, #1024	; 0x400
 80012e6:	42b8      	cmp	r0, r7
 80012e8:	bf14      	ite	ne
 80012ea:	2705      	movne	r7, #5
 80012ec:	2704      	moveq	r7, #4
 80012ee:	e006      	b.n	80012fe <HAL_GPIO_Init+0x136>
 80012f0:	2700      	movs	r7, #0
 80012f2:	e004      	b.n	80012fe <HAL_GPIO_Init+0x136>
 80012f4:	2701      	movs	r7, #1
 80012f6:	e002      	b.n	80012fe <HAL_GPIO_Init+0x136>
 80012f8:	2702      	movs	r7, #2
 80012fa:	e000      	b.n	80012fe <HAL_GPIO_Init+0x136>
 80012fc:	2703      	movs	r7, #3
 80012fe:	fa07 fc0c 	lsl.w	ip, r7, ip
 8001302:	ea4c 0505 	orr.w	r5, ip, r5
        SYSCFG->EXTICR[position >> 2] = temp;
 8001306:	f8ce 5008 	str.w	r5, [lr, #8]
        temp = EXTI->IMR;
 800130a:	f8d9 5000 	ldr.w	r5, [r9]
        temp &= ~((uint32_t)iocurrent);
 800130e:	43f7      	mvns	r7, r6
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001310:	f412 3f80 	tst.w	r2, #65536	; 0x10000
        temp &= ~((uint32_t)iocurrent);
 8001314:	bf0c      	ite	eq
 8001316:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 8001318:	4335      	orrne	r5, r6
        }
        EXTI->IMR = temp;
 800131a:	6025      	str	r5, [r4, #0]

        temp = EXTI->EMR;
 800131c:	6865      	ldr	r5, [r4, #4]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800131e:	f412 3f00 	tst.w	r2, #131072	; 0x20000
        temp &= ~((uint32_t)iocurrent);
 8001322:	bf0c      	ite	eq
 8001324:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 8001326:	4335      	orrne	r5, r6
        }
        EXTI->EMR = temp;
 8001328:	6065      	str	r5, [r4, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800132a:	68a5      	ldr	r5, [r4, #8]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800132c:	f412 1f80 	tst.w	r2, #1048576	; 0x100000
        temp &= ~((uint32_t)iocurrent);
 8001330:	bf0c      	ite	eq
 8001332:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 8001334:	4335      	orrne	r5, r6
        }
        EXTI->RTSR = temp;
 8001336:	60a5      	str	r5, [r4, #8]

        temp = EXTI->FTSR;
 8001338:	68e5      	ldr	r5, [r4, #12]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800133a:	0292      	lsls	r2, r2, #10
        temp &= ~((uint32_t)iocurrent);
 800133c:	bf54      	ite	pl
 800133e:	403d      	andpl	r5, r7
        {
          temp |= iocurrent;
 8001340:	4335      	orrmi	r5, r6
        }
        EXTI->FTSR = temp;
 8001342:	60e5      	str	r5, [r4, #12]
      }
    }
    
    position++;
 8001344:	3301      	adds	r3, #1
 8001346:	e74a      	b.n	80011de <HAL_GPIO_Init+0x16>
  }
}
 8001348:	b005      	add	sp, #20
 800134a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800134e:	bf00      	nop
 8001350:	48000400 	.word	0x48000400
 8001354:	40010400 	.word	0x40010400
 8001358:	40021000 	.word	0x40021000

0800135c <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800135c:	b10a      	cbz	r2, 8001362 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800135e:	6181      	str	r1, [r0, #24]
 8001360:	4770      	bx	lr
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001362:	6281      	str	r1, [r0, #40]	; 0x28
 8001364:	4770      	bx	lr
 8001366:	0000      	movs	r0, r0

08001368 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart: UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001368:	b530      	push	{r4, r5, lr}
   *  set the M bits according to huart->Init.WordLength value
   *  set PCE and PS bits according to huart->Init.Parity value
   *  set TE and RE bits according to huart->Init.Mode value
   *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 800136a:	6902      	ldr	r2, [r0, #16]
 800136c:	6885      	ldr	r5, [r0, #8]
 800136e:	6801      	ldr	r1, [r0, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8001370:	69c3      	ldr	r3, [r0, #28]
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 8001372:	680c      	ldr	r4, [r1, #0]
 8001374:	4315      	orrs	r5, r2
 8001376:	6942      	ldr	r2, [r0, #20]
 8001378:	432a      	orrs	r2, r5
 800137a:	ea42 0503 	orr.w	r5, r2, r3
 800137e:	f424 4216 	bic.w	r2, r4, #38400	; 0x9600
 8001382:	f022 020c 	bic.w	r2, r2, #12
 8001386:	432a      	orrs	r2, r5
 8001388:	600a      	str	r2, [r1, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
   * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800138a:	684a      	ldr	r2, [r1, #4]
   * - UART HardWare Flow Control: set CTSE and RTSE bits according
   *   to huart->Init.HwFlowCtl value
   * - one-bit sampling method versus three samples' majority rule according
   *   to huart->Init.OneBitSampling */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
 800138c:	6985      	ldr	r5, [r0, #24]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800138e:	f422 5440 	bic.w	r4, r2, #12288	; 0x3000
 8001392:	68c2      	ldr	r2, [r0, #12]
 8001394:	4322      	orrs	r2, r4
 8001396:	604a      	str	r2, [r1, #4]
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
 8001398:	688a      	ldr	r2, [r1, #8]
 800139a:	6a04      	ldr	r4, [r0, #32]
 800139c:	f422 6230 	bic.w	r2, r2, #2816	; 0xb00
 80013a0:	432c      	orrs	r4, r5
 80013a2:	4322      	orrs	r2, r4
 80013a4:	608a      	str	r2, [r1, #8]

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80013a6:	4a5d      	ldr	r2, [pc, #372]	; (800151c <UART_SetConfig+0x1b4>)
 80013a8:	4291      	cmp	r1, r2
 80013aa:	d10a      	bne.n	80013c2 <UART_SetConfig+0x5a>
 80013ac:	f502 4258 	add.w	r2, r2, #55296	; 0xd800
 80013b0:	4c5b      	ldr	r4, [pc, #364]	; (8001520 <UART_SetConfig+0x1b8>)
 80013b2:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80013b4:	f002 0203 	and.w	r2, r2, #3

  /* Check UART Over Sampling to set Baud Rate Register */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80013b8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80013bc:	5ca2      	ldrb	r2, [r4, r2]
 80013be:	d04b      	beq.n	8001458 <UART_SetConfig+0xf0>
 80013c0:	e07f      	b.n	80014c2 <UART_SetConfig+0x15a>
  UART_GETCLOCKSOURCE(huart, clocksource);
 80013c2:	4a58      	ldr	r2, [pc, #352]	; (8001524 <UART_SetConfig+0x1bc>)
 80013c4:	4291      	cmp	r1, r2
 80013c6:	d10e      	bne.n	80013e6 <UART_SetConfig+0x7e>
 80013c8:	f502 32e6 	add.w	r2, r2, #117760	; 0x1cc00
 80013cc:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80013ce:	f402 3240 	and.w	r2, r2, #196608	; 0x30000
 80013d2:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 80013d6:	d054      	beq.n	8001482 <UART_SetConfig+0x11a>
 80013d8:	d935      	bls.n	8001446 <UART_SetConfig+0xde>
 80013da:	f5b2 3f00 	cmp.w	r2, #131072	; 0x20000
 80013de:	d058      	beq.n	8001492 <UART_SetConfig+0x12a>
 80013e0:	f5b2 3f40 	cmp.w	r2, #196608	; 0x30000
 80013e4:	e036      	b.n	8001454 <UART_SetConfig+0xec>
 80013e6:	4a50      	ldr	r2, [pc, #320]	; (8001528 <UART_SetConfig+0x1c0>)
 80013e8:	4291      	cmp	r1, r2
 80013ea:	d10e      	bne.n	800140a <UART_SetConfig+0xa2>
 80013ec:	f502 32e4 	add.w	r2, r2, #116736	; 0x1c800
 80013f0:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80013f2:	f402 2240 	and.w	r2, r2, #786432	; 0xc0000
 80013f6:	f5b2 2f80 	cmp.w	r2, #262144	; 0x40000
 80013fa:	d042      	beq.n	8001482 <UART_SetConfig+0x11a>
 80013fc:	d923      	bls.n	8001446 <UART_SetConfig+0xde>
 80013fe:	f5b2 2f00 	cmp.w	r2, #524288	; 0x80000
 8001402:	d046      	beq.n	8001492 <UART_SetConfig+0x12a>
 8001404:	f5b2 2f40 	cmp.w	r2, #786432	; 0xc0000
 8001408:	e024      	b.n	8001454 <UART_SetConfig+0xec>
 800140a:	4a48      	ldr	r2, [pc, #288]	; (800152c <UART_SetConfig+0x1c4>)
 800140c:	4291      	cmp	r1, r2
 800140e:	d10e      	bne.n	800142e <UART_SetConfig+0xc6>
 8001410:	f502 32e2 	add.w	r2, r2, #115712	; 0x1c400
 8001414:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001416:	f402 1240 	and.w	r2, r2, #3145728	; 0x300000
 800141a:	f5b2 1f80 	cmp.w	r2, #1048576	; 0x100000
 800141e:	d030      	beq.n	8001482 <UART_SetConfig+0x11a>
 8001420:	d911      	bls.n	8001446 <UART_SetConfig+0xde>
 8001422:	f5b2 1f00 	cmp.w	r2, #2097152	; 0x200000
 8001426:	d034      	beq.n	8001492 <UART_SetConfig+0x12a>
 8001428:	f5b2 1f40 	cmp.w	r2, #3145728	; 0x300000
 800142c:	e012      	b.n	8001454 <UART_SetConfig+0xec>
 800142e:	4a40      	ldr	r2, [pc, #256]	; (8001530 <UART_SetConfig+0x1c8>)
 8001430:	4291      	cmp	r1, r2
 8001432:	d13a      	bne.n	80014aa <UART_SetConfig+0x142>
 8001434:	f502 32e0 	add.w	r2, r2, #114688	; 0x1c000
 8001438:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800143a:	f402 0240 	and.w	r2, r2, #12582912	; 0xc00000
 800143e:	f5b2 0f80 	cmp.w	r2, #4194304	; 0x400000
 8001442:	d01e      	beq.n	8001482 <UART_SetConfig+0x11a>
 8001444:	d801      	bhi.n	800144a <UART_SetConfig+0xe2>
 8001446:	b1e2      	cbz	r2, 8001482 <UART_SetConfig+0x11a>
 8001448:	e02f      	b.n	80014aa <UART_SetConfig+0x142>
 800144a:	f5b2 0f00 	cmp.w	r2, #8388608	; 0x800000
 800144e:	d020      	beq.n	8001492 <UART_SetConfig+0x12a>
 8001450:	f5b2 0f40 	cmp.w	r2, #12582912	; 0xc00000
 8001454:	d009      	beq.n	800146a <UART_SetConfig+0x102>
 8001456:	e028      	b.n	80014aa <UART_SetConfig+0x142>
  {
    switch (clocksource)
 8001458:	2a08      	cmp	r2, #8
 800145a:	d829      	bhi.n	80014b0 <UART_SetConfig+0x148>
 800145c:	e8df f002 	tbb	[pc, r2]
 8001460:	28081414 	.word	0x28081414
 8001464:	28282814 	.word	0x28282814
 8001468:	1c          	.byte	0x1c
 8001469:	00          	.byte	0x00
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800146a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800146e:	d13b      	bne.n	80014e8 <UART_SetConfig+0x180>
        break;
      case UART_CLOCKSOURCE_PCLK2:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
        break;
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8001470:	6840      	ldr	r0, [r0, #4]
 8001472:	0842      	lsrs	r2, r0, #1
 8001474:	f102 73f4 	add.w	r3, r2, #31981568	; 0x1e80000
 8001478:	f503 4390 	add.w	r3, r3, #18432	; 0x4800
 800147c:	fbb3 f3f0 	udiv	r3, r3, r0
 8001480:	e010      	b.n	80014a4 <UART_SetConfig+0x13c>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001482:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001486:	d138      	bne.n	80014fa <UART_SetConfig+0x192>
        break;
      case UART_CLOCKSOURCE_SYSCLK:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8001488:	6842      	ldr	r2, [r0, #4]
 800148a:	0853      	lsrs	r3, r2, #1
 800148c:	f503 0361 	add.w	r3, r3, #14745600	; 0xe10000
 8001490:	e006      	b.n	80014a0 <UART_SetConfig+0x138>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001492:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001496:	d135      	bne.n	8001504 <UART_SetConfig+0x19c>
        break;
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8001498:	6842      	ldr	r2, [r0, #4]
 800149a:	0853      	lsrs	r3, r2, #1
 800149c:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 80014a0:	fbb3 f3f2 	udiv	r3, r3, r2
 80014a4:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 80014a6:	2000      	movs	r0, #0
        break;
 80014a8:	e004      	b.n	80014b4 <UART_SetConfig+0x14c>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80014aa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80014ae:	d133      	bne.n	8001518 <UART_SetConfig+0x1b0>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 80014b0:	2001      	movs	r0, #1
  uint16_t usartdiv                   = 0x0000U;
 80014b2:	2300      	movs	r3, #0
        break;
    }

    brrtemp = usartdiv & 0xFFF0U;
 80014b4:	f023 020f 	bic.w	r2, r3, #15
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
    huart->Instance->BRR = brrtemp;
 80014b8:	f3c3 0342 	ubfx	r3, r3, #1, #3
 80014bc:	4313      	orrs	r3, r2
 80014be:	60cb      	str	r3, [r1, #12]
 80014c0:	bd30      	pop	{r4, r5, pc}
  }
  else
  {
    switch (clocksource)
 80014c2:	2a08      	cmp	r2, #8
 80014c4:	d828      	bhi.n	8001518 <UART_SetConfig+0x1b0>
 80014c6:	e8df f002 	tbb	[pc, r2]
 80014ca:	0518      	.short	0x0518
 80014cc:	2718270f 	.word	0x2718270f
 80014d0:	2727      	.short	0x2727
 80014d2:	1d          	.byte	0x1d
 80014d3:	00          	.byte	0x00
    {
      case UART_CLOCKSOURCE_PCLK1:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
        break;
      case UART_CLOCKSOURCE_PCLK2:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 80014d4:	6842      	ldr	r2, [r0, #4]
 80014d6:	0853      	lsrs	r3, r2, #1
 80014d8:	f503 03e1 	add.w	r3, r3, #7372800	; 0x708000
 80014dc:	fbb3 f3f2 	udiv	r3, r3, r2
 80014e0:	4a0e      	ldr	r2, [pc, #56]	; (800151c <UART_SetConfig+0x1b4>)
 80014e2:	b29b      	uxth	r3, r3
 80014e4:	60d3      	str	r3, [r2, #12]
 80014e6:	e015      	b.n	8001514 <UART_SetConfig+0x1ac>
        break;
      case UART_CLOCKSOURCE_HSI:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 80014e8:	6840      	ldr	r0, [r0, #4]
 80014ea:	0842      	lsrs	r2, r0, #1
 80014ec:	f502 0374 	add.w	r3, r2, #15990784	; 0xf40000
 80014f0:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
 80014f4:	fbb3 f3f0 	udiv	r3, r3, r0
 80014f8:	e00a      	b.n	8001510 <UART_SetConfig+0x1a8>
        break;
      case UART_CLOCKSOURCE_SYSCLK:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 80014fa:	6842      	ldr	r2, [r0, #4]
 80014fc:	0853      	lsrs	r3, r2, #1
 80014fe:	f503 03e1 	add.w	r3, r3, #7372800	; 0x708000
 8001502:	e003      	b.n	800150c <UART_SetConfig+0x1a4>
        break;
      case UART_CLOCKSOURCE_LSE:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8001504:	6842      	ldr	r2, [r0, #4]
 8001506:	0853      	lsrs	r3, r2, #1
 8001508:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800150c:	fbb3 f3f2 	udiv	r3, r3, r2
 8001510:	b29b      	uxth	r3, r3
 8001512:	60cb      	str	r3, [r1, #12]
  HAL_StatusTypeDef ret               = HAL_OK;
 8001514:	2000      	movs	r0, #0
        break;
 8001516:	bd30      	pop	{r4, r5, pc}
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 8001518:	2001      	movs	r0, #1
        break;
    }
  }

  return ret;
 800151a:	bd30      	pop	{r4, r5, pc}
 800151c:	40013800 	.word	0x40013800
 8001520:	08001944 	.word	0x08001944
 8001524:	40004400 	.word	0x40004400
 8001528:	40004800 	.word	0x40004800
 800152c:	40004c00 	.word	0x40004c00
 8001530:	40005000 	.word	0x40005000

08001534 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8001534:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001536:	9d06      	ldr	r5, [sp, #24]
 8001538:	4604      	mov	r4, r0
 800153a:	4616      	mov	r6, r2
 800153c:	461f      	mov	r7, r3
  /* Wait until flag is set */
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800153e:	6820      	ldr	r0, [r4, #0]
 8001540:	69c2      	ldr	r2, [r0, #28]
 8001542:	ea31 0302 	bics.w	r3, r1, r2
 8001546:	bf0c      	ite	eq
 8001548:	2201      	moveq	r2, #1
 800154a:	2200      	movne	r2, #0
 800154c:	42b2      	cmp	r2, r6
 800154e:	d11b      	bne.n	8001588 <UART_WaitOnFlagUntilTimeout+0x54>
  {
    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
 8001550:	1c6b      	adds	r3, r5, #1
 8001552:	d0f5      	beq.n	8001540 <UART_WaitOnFlagUntilTimeout+0xc>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 8001554:	b995      	cbnz	r5, 800157c <UART_WaitOnFlagUntilTimeout+0x48>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8001556:	6823      	ldr	r3, [r4, #0]
 8001558:	681a      	ldr	r2, [r3, #0]
 800155a:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800155e:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001560:	689a      	ldr	r2, [r3, #8]
 8001562:	f022 0201 	bic.w	r2, r2, #1
 8001566:	609a      	str	r2, [r3, #8]

        huart->gState  = HAL_UART_STATE_READY;
 8001568:	2320      	movs	r3, #32
 800156a:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
        huart->RxState = HAL_UART_STATE_READY;
 800156e:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8001572:	2300      	movs	r3, #0
 8001574:	f884 3068 	strb.w	r3, [r4, #104]	; 0x68
 8001578:	2003      	movs	r0, #3
 800157a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 800157c:	f7ff fb06 	bl	8000b8c <HAL_GetTick>
 8001580:	1bc0      	subs	r0, r0, r7
 8001582:	4285      	cmp	r5, r0
 8001584:	d2db      	bcs.n	800153e <UART_WaitOnFlagUntilTimeout+0xa>
 8001586:	e7e6      	b.n	8001556 <UART_WaitOnFlagUntilTimeout+0x22>
        return HAL_TIMEOUT;
      }
    }
  }
  return HAL_OK;
 8001588:	2000      	movs	r0, #0
}
 800158a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800158c <UART_CheckIdleState>:
{
 800158c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800158e:	4604      	mov	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001590:	2100      	movs	r1, #0
 8001592:	66c1      	str	r1, [r0, #108]	; 0x6c
  tickstart = HAL_GetTick();
 8001594:	f7ff fafa 	bl	8000b8c <HAL_GetTick>
  if((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8001598:	6823      	ldr	r3, [r4, #0]
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	071a      	lsls	r2, r3, #28
  tickstart = HAL_GetTick();
 800159e:	4605      	mov	r5, r0
  if((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80015a0:	d404      	bmi.n	80015ac <UART_CheckIdleState+0x20>
  if((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80015a2:	6823      	ldr	r3, [r4, #0]
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	075b      	lsls	r3, r3, #29
 80015a8:	d51a      	bpl.n	80015e0 <UART_CheckIdleState+0x54>
 80015aa:	e00d      	b.n	80015c8 <UART_CheckIdleState+0x3c>
    if(UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80015ac:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80015b0:	9300      	str	r3, [sp, #0]
 80015b2:	460a      	mov	r2, r1
 80015b4:	4603      	mov	r3, r0
 80015b6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80015ba:	4620      	mov	r0, r4
 80015bc:	f7ff ffba 	bl	8001534 <UART_WaitOnFlagUntilTimeout>
 80015c0:	2800      	cmp	r0, #0
 80015c2:	d0ee      	beq.n	80015a2 <UART_CheckIdleState+0x16>
      return HAL_TIMEOUT;
 80015c4:	2003      	movs	r0, #3
 80015c6:	e013      	b.n	80015f0 <UART_CheckIdleState+0x64>
    if(UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80015c8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80015cc:	9300      	str	r3, [sp, #0]
 80015ce:	2200      	movs	r2, #0
 80015d0:	462b      	mov	r3, r5
 80015d2:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80015d6:	4620      	mov	r0, r4
 80015d8:	f7ff ffac 	bl	8001534 <UART_WaitOnFlagUntilTimeout>
 80015dc:	2800      	cmp	r0, #0
 80015de:	d1f1      	bne.n	80015c4 <UART_CheckIdleState+0x38>
  huart->gState  = HAL_UART_STATE_READY;
 80015e0:	2320      	movs	r3, #32
  __HAL_UNLOCK(huart);
 80015e2:	2000      	movs	r0, #0
  huart->gState  = HAL_UART_STATE_READY;
 80015e4:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
  __HAL_UNLOCK(huart);
 80015e8:	f884 0068 	strb.w	r0, [r4, #104]	; 0x68
  huart->RxState = HAL_UART_STATE_READY;
 80015ec:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a
}
 80015f0:	b003      	add	sp, #12
 80015f2:	bd30      	pop	{r4, r5, pc}

080015f4 <HAL_UART_Init>:
{
 80015f4:	b510      	push	{r4, lr}
  if(huart == NULL)
 80015f6:	4604      	mov	r4, r0
 80015f8:	b328      	cbz	r0, 8001646 <HAL_UART_Init+0x52>
  if(huart->gState == HAL_UART_STATE_RESET)
 80015fa:	f890 3069 	ldrb.w	r3, [r0, #105]	; 0x69
 80015fe:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8001602:	b90b      	cbnz	r3, 8001608 <HAL_UART_Init+0x14>
    huart->Lock = HAL_UNLOCKED;
 8001604:	f880 2068 	strb.w	r2, [r0, #104]	; 0x68
  __HAL_UART_DISABLE(huart);
 8001608:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 800160a:	2324      	movs	r3, #36	; 0x24
 800160c:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
  __HAL_UART_DISABLE(huart);
 8001610:	6813      	ldr	r3, [r2, #0]
 8001612:	f023 0301 	bic.w	r3, r3, #1
 8001616:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 8001618:	4620      	mov	r0, r4
 800161a:	f7ff fea5 	bl	8001368 <UART_SetConfig>
 800161e:	2801      	cmp	r0, #1
 8001620:	d011      	beq.n	8001646 <HAL_UART_Init+0x52>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001622:	6823      	ldr	r3, [r4, #0]
 8001624:	685a      	ldr	r2, [r3, #4]
 8001626:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800162a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800162c:	689a      	ldr	r2, [r3, #8]
 800162e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001632:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 8001634:	681a      	ldr	r2, [r3, #0]
 8001636:	f042 0201 	orr.w	r2, r2, #1
  return UART_CheckIdleState(huart);
 800163a:	4620      	mov	r0, r4
  __HAL_UART_ENABLE(huart);
 800163c:	601a      	str	r2, [r3, #0]
}
 800163e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return UART_CheckIdleState(huart);
 8001642:	f7ff bfa3 	b.w	800158c <UART_CheckIdleState>
}
 8001646:	2001      	movs	r0, #1
 8001648:	bd10      	pop	{r4, pc}

0800164a <HAL_UART_Transmit>:
  * @param Size: Amount of data to be sent.
  * @param Timeout: Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800164a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800164c:	461f      	mov	r7, r3
  uint16_t* tmp;
  uint32_t tickstart = 0U;

  /* Check that a Tx process is not already ongoing */
  if(huart->gState == HAL_UART_STATE_READY)
 800164e:	f890 3069 	ldrb.w	r3, [r0, #105]	; 0x69
 8001652:	2b20      	cmp	r3, #32
{
 8001654:	460d      	mov	r5, r1
 8001656:	4604      	mov	r4, r0
 8001658:	4611      	mov	r1, r2
  if(huart->gState == HAL_UART_STATE_READY)
 800165a:	d14b      	bne.n	80016f4 <HAL_UART_Transmit+0xaa>
  {
    if((pData == NULL ) || (Size == 0U))
 800165c:	2d00      	cmp	r5, #0
 800165e:	d047      	beq.n	80016f0 <HAL_UART_Transmit+0xa6>
 8001660:	2a00      	cmp	r2, #0
 8001662:	d045      	beq.n	80016f0 <HAL_UART_Transmit+0xa6>
    {
      return  HAL_ERROR;
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8001664:	f890 3068 	ldrb.w	r3, [r0, #104]	; 0x68
 8001668:	2b01      	cmp	r3, #1
 800166a:	d043      	beq.n	80016f4 <HAL_UART_Transmit+0xaa>
 800166c:	2301      	movs	r3, #1
 800166e:	f880 3068 	strb.w	r3, [r0, #104]	; 0x68

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001672:	2300      	movs	r3, #0
 8001674:	66c3      	str	r3, [r0, #108]	; 0x6c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001676:	2321      	movs	r3, #33	; 0x21
 8001678:	f880 3069 	strb.w	r3, [r0, #105]	; 0x69

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 800167c:	f7ff fa86 	bl	8000b8c <HAL_GetTick>
 8001680:	4606      	mov	r6, r0

    huart->TxXferSize = Size;
 8001682:	f8a4 1050 	strh.w	r1, [r4, #80]	; 0x50
    huart->TxXferCount = Size;
 8001686:	f8a4 1052 	strh.w	r1, [r4, #82]	; 0x52
    while(huart->TxXferCount > 0U)
 800168a:	f8b4 2052 	ldrh.w	r2, [r4, #82]	; 0x52
 800168e:	b292      	uxth	r2, r2
 8001690:	b302      	cbz	r2, 80016d4 <HAL_UART_Transmit+0x8a>
    {
      huart->TxXferCount--;
 8001692:	f8b4 3052 	ldrh.w	r3, [r4, #82]	; 0x52
      if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001696:	9700      	str	r7, [sp, #0]
      huart->TxXferCount--;
 8001698:	3b01      	subs	r3, #1
 800169a:	b29b      	uxth	r3, r3
 800169c:	f8a4 3052 	strh.w	r3, [r4, #82]	; 0x52
      if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80016a0:	2200      	movs	r2, #0
 80016a2:	4633      	mov	r3, r6
 80016a4:	2180      	movs	r1, #128	; 0x80
 80016a6:	4620      	mov	r0, r4
 80016a8:	f7ff ff44 	bl	8001534 <UART_WaitOnFlagUntilTimeout>
 80016ac:	b108      	cbz	r0, 80016b2 <HAL_UART_Transmit+0x68>
      {
        return HAL_TIMEOUT;
 80016ae:	2003      	movs	r0, #3
 80016b0:	e021      	b.n	80016f6 <HAL_UART_Transmit+0xac>
      }
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80016b2:	68a3      	ldr	r3, [r4, #8]
 80016b4:	6822      	ldr	r2, [r4, #0]
 80016b6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80016ba:	d107      	bne.n	80016cc <HAL_UART_Transmit+0x82>
 80016bc:	6923      	ldr	r3, [r4, #16]
 80016be:	b92b      	cbnz	r3, 80016cc <HAL_UART_Transmit+0x82>
      {
        tmp = (uint16_t*) pData;
        huart->Instance->TDR = (*tmp & (uint16_t)0x01FFU);
 80016c0:	f835 3b02 	ldrh.w	r3, [r5], #2
 80016c4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80016c8:	8513      	strh	r3, [r2, #40]	; 0x28
        pData += 2U;
 80016ca:	e7de      	b.n	800168a <HAL_UART_Transmit+0x40>
      }
      else
      {
        huart->Instance->TDR = (*pData++ & (uint8_t)0xFFU);
 80016cc:	782b      	ldrb	r3, [r5, #0]
 80016ce:	8513      	strh	r3, [r2, #40]	; 0x28
 80016d0:	3501      	adds	r5, #1
 80016d2:	e7da      	b.n	800168a <HAL_UART_Transmit+0x40>
      }
    }
    if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80016d4:	9700      	str	r7, [sp, #0]
 80016d6:	4633      	mov	r3, r6
 80016d8:	2140      	movs	r1, #64	; 0x40
 80016da:	4620      	mov	r0, r4
 80016dc:	f7ff ff2a 	bl	8001534 <UART_WaitOnFlagUntilTimeout>
 80016e0:	2800      	cmp	r0, #0
 80016e2:	d1e4      	bne.n	80016ae <HAL_UART_Transmit+0x64>
    {
      return HAL_TIMEOUT;
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80016e4:	2320      	movs	r3, #32
 80016e6:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80016ea:	f884 0068 	strb.w	r0, [r4, #104]	; 0x68

    return HAL_OK;
 80016ee:	e002      	b.n	80016f6 <HAL_UART_Transmit+0xac>
      return  HAL_ERROR;
 80016f0:	2001      	movs	r0, #1
 80016f2:	e000      	b.n	80016f6 <HAL_UART_Transmit+0xac>
  }
  else
  {
    return HAL_BUSY;
 80016f4:	2002      	movs	r0, #2
  }
}
 80016f6:	b003      	add	sp, #12
 80016f8:	bdf0      	pop	{r4, r5, r6, r7, pc}

080016fa <HAL_UART_Receive>:
  * @param Size: amount of data to be received.
  * @param Timeout: Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80016fa:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 80016fe:	4698      	mov	r8, r3
  uint16_t* tmp;
  uint16_t uhMask;
  uint32_t tickstart = 0U;

  /* Check that a Rx process is not already ongoing */
  if(huart->RxState == HAL_UART_STATE_READY)
 8001700:	f890 306a 	ldrb.w	r3, [r0, #106]	; 0x6a
 8001704:	2b20      	cmp	r3, #32
{
 8001706:	460d      	mov	r5, r1
 8001708:	4604      	mov	r4, r0
 800170a:	4611      	mov	r1, r2
  if(huart->RxState == HAL_UART_STATE_READY)
 800170c:	d15a      	bne.n	80017c4 <HAL_UART_Receive+0xca>
  {
    if((pData == NULL ) || (Size == 0U))
 800170e:	2d00      	cmp	r5, #0
 8001710:	d056      	beq.n	80017c0 <HAL_UART_Receive+0xc6>
 8001712:	2a00      	cmp	r2, #0
 8001714:	d054      	beq.n	80017c0 <HAL_UART_Receive+0xc6>
    {
      return  HAL_ERROR;
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8001716:	f890 3068 	ldrb.w	r3, [r0, #104]	; 0x68
 800171a:	2b01      	cmp	r3, #1
 800171c:	d052      	beq.n	80017c4 <HAL_UART_Receive+0xca>
 800171e:	2301      	movs	r3, #1
 8001720:	f880 3068 	strb.w	r3, [r0, #104]	; 0x68

    huart->Instance->ICR = 0xFFFFFFFF;
 8001724:	6803      	ldr	r3, [r0, #0]
 8001726:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800172a:	621a      	str	r2, [r3, #32]
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800172c:	2300      	movs	r3, #0
 800172e:	66c3      	str	r3, [r0, #108]	; 0x6c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8001730:	2322      	movs	r3, #34	; 0x22
 8001732:	f880 306a 	strb.w	r3, [r0, #106]	; 0x6a

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 8001736:	f7ff fa29 	bl	8000b8c <HAL_GetTick>

    huart->RxXferSize = Size;
    huart->RxXferCount = Size;

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 800173a:	68a3      	ldr	r3, [r4, #8]
    huart->RxXferSize = Size;
 800173c:	f8a4 1058 	strh.w	r1, [r4, #88]	; 0x58
    UART_MASK_COMPUTATION(huart);
 8001740:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
    tickstart = HAL_GetTick();
 8001744:	4607      	mov	r7, r0
    huart->RxXferCount = Size;
 8001746:	f8a4 105a 	strh.w	r1, [r4, #90]	; 0x5a
    UART_MASK_COMPUTATION(huart);
 800174a:	d106      	bne.n	800175a <HAL_UART_Receive+0x60>
 800174c:	6923      	ldr	r3, [r4, #16]
 800174e:	b913      	cbnz	r3, 8001756 <HAL_UART_Receive+0x5c>
 8001750:	f240 13ff 	movw	r3, #511	; 0x1ff
 8001754:	e006      	b.n	8001764 <HAL_UART_Receive+0x6a>
 8001756:	23ff      	movs	r3, #255	; 0xff
 8001758:	e004      	b.n	8001764 <HAL_UART_Receive+0x6a>
 800175a:	b92b      	cbnz	r3, 8001768 <HAL_UART_Receive+0x6e>
 800175c:	6923      	ldr	r3, [r4, #16]
 800175e:	2b00      	cmp	r3, #0
 8001760:	d0f9      	beq.n	8001756 <HAL_UART_Receive+0x5c>
 8001762:	237f      	movs	r3, #127	; 0x7f
 8001764:	f8a4 305c 	strh.w	r3, [r4, #92]	; 0x5c
    uhMask = huart->Mask;
 8001768:	f8b4 605c 	ldrh.w	r6, [r4, #92]	; 0x5c

    /* as long as data have to be received */
    while(huart->RxXferCount > 0U)
 800176c:	f8b4 005a 	ldrh.w	r0, [r4, #90]	; 0x5a
 8001770:	b280      	uxth	r0, r0
 8001772:	b1f8      	cbz	r0, 80017b4 <HAL_UART_Receive+0xba>
    {
      huart->RxXferCount--;
 8001774:	f8b4 305a 	ldrh.w	r3, [r4, #90]	; 0x5a
      if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8001778:	f8cd 8000 	str.w	r8, [sp]
      huart->RxXferCount--;
 800177c:	3b01      	subs	r3, #1
 800177e:	b29b      	uxth	r3, r3
 8001780:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
      if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8001784:	2200      	movs	r2, #0
 8001786:	463b      	mov	r3, r7
 8001788:	2120      	movs	r1, #32
 800178a:	4620      	mov	r0, r4
 800178c:	f7ff fed2 	bl	8001534 <UART_WaitOnFlagUntilTimeout>
 8001790:	b9d0      	cbnz	r0, 80017c8 <HAL_UART_Receive+0xce>
      {
        return HAL_TIMEOUT;
      }
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001792:	68a3      	ldr	r3, [r4, #8]
 8001794:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001798:	6823      	ldr	r3, [r4, #0]
 800179a:	d106      	bne.n	80017aa <HAL_UART_Receive+0xb0>
 800179c:	6922      	ldr	r2, [r4, #16]
 800179e:	b922      	cbnz	r2, 80017aa <HAL_UART_Receive+0xb0>
      {
        tmp = (uint16_t*) pData ;
        *tmp = (uint16_t)(huart->Instance->RDR & uhMask);
 80017a0:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80017a2:	4033      	ands	r3, r6
 80017a4:	f825 3b02 	strh.w	r3, [r5], #2
        pData +=2U;
 80017a8:	e7e0      	b.n	800176c <HAL_UART_Receive+0x72>
      }
      else
      {
        *pData++ = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 80017aa:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80017ac:	4033      	ands	r3, r6
 80017ae:	702b      	strb	r3, [r5, #0]
 80017b0:	3501      	adds	r5, #1
 80017b2:	e7db      	b.n	800176c <HAL_UART_Receive+0x72>
      }
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80017b4:	2320      	movs	r3, #32
 80017b6:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80017ba:	f884 0068 	strb.w	r0, [r4, #104]	; 0x68

    return HAL_OK;
 80017be:	e004      	b.n	80017ca <HAL_UART_Receive+0xd0>
      return  HAL_ERROR;
 80017c0:	2001      	movs	r0, #1
 80017c2:	e002      	b.n	80017ca <HAL_UART_Receive+0xd0>
  }
  else
  {
    return HAL_BUSY;
 80017c4:	2002      	movs	r0, #2
 80017c6:	e000      	b.n	80017ca <HAL_UART_Receive+0xd0>
        return HAL_TIMEOUT;
 80017c8:	2003      	movs	r0, #3
  }
}
 80017ca:	b002      	add	sp, #8
 80017cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080017d0 <Reset_Handler>:
 80017d0:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 80017d2:	e003      	b.n	80017dc <LoopCopyDataInit>

080017d4 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 80017d4:	4b0b      	ldr	r3, [pc, #44]	; (8001804 <LoopForever+0x2>)
	ldr	r3, [r3, r1]
 80017d6:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 80017d8:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 80017da:	3104      	adds	r1, #4

080017dc <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 80017dc:	480a      	ldr	r0, [pc, #40]	; (8001808 <LoopForever+0x6>)
	ldr	r3, =_edata
 80017de:	4b0b      	ldr	r3, [pc, #44]	; (800180c <LoopForever+0xa>)
	adds	r2, r0, r1
 80017e0:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 80017e2:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 80017e4:	d3f6      	bcc.n	80017d4 <CopyDataInit>
	ldr	r2, =_sbss
 80017e6:	4a0a      	ldr	r2, [pc, #40]	; (8001810 <LoopForever+0xe>)
	b	LoopFillZerobss
 80017e8:	e002      	b.n	80017f0 <LoopFillZerobss>

080017ea <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs r3, #0
 80017ea:	2300      	movs	r3, #0
 	str  r3, [r2]
 80017ec:	6013      	str	r3, [r2, #0]
	adds r2, r2, #4
 80017ee:	3204      	adds	r2, #4

080017f0 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 80017f0:	4b08      	ldr	r3, [pc, #32]	; (8001814 <LoopForever+0x12>)
	cmp	r2, r3
 80017f2:	429a      	cmp	r2, r3
	bcc	FillZerobss
 80017f4:	d3f9      	bcc.n	80017ea <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80017f6:	f3af 8000 	nop.w
/* Call static constructors */
    bl __libc_init_array
 80017fa:	f7fe fd17 	bl	800022c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80017fe:	f7ff f805 	bl	800080c <main>

08001802 <LoopForever>:



LoopForever:
    b LoopForever
 8001802:	e7fe      	b.n	8001802 <LoopForever>
 8001804:	08001950 	.word	0x08001950
 8001808:	20000000 	.word	0x20000000
 800180c:	20000028 	.word	0x20000028
 8001810:	20000028 	.word	0x20000028
 8001814:	20000180 	.word	0x20000180

08001818 <BusFault_Handler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001818:	e7fe      	b.n	8001818 <BusFault_Handler>
 800181a:	0000      	movs	r0, r0

0800181c <_init>:
 800181c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800181e:	bf00      	nop
 8001820:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001822:	bc08      	pop	{r3}
 8001824:	469e      	mov	lr, r3
 8001826:	4770      	bx	lr

08001828 <_fini>:
 8001828:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800182a:	bf00      	nop
 800182c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800182e:	bc08      	pop	{r3}
 8001830:	469e      	mov	lr, r3
 8001832:	4770      	bx	lr
