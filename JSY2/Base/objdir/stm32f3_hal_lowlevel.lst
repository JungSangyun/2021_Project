   1              		.syntax unified
   2              		.cpu cortex-m4
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 4
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.thumb
  14              		.syntax unified
  15              		.file	"stm32f3_hal_lowlevel.c"
  16              		.text
  17              	.Ltext0:
  18              		.cfi_sections	.debug_frame
  19              		.section	.text.HAL_NVIC_SetPriority,"ax",%progbits
  20              		.align	1
  21              		.global	HAL_NVIC_SetPriority
  22              		.thumb
  23              		.thumb_func
  25              	HAL_NVIC_SetPriority:
  26              	.LFB124:
  27              		.file 1 ".././hal/stm32f3/stm32f3_hal_lowlevel.c"
   1:.././hal/stm32f3/stm32f3_hal_lowlevel.c **** /* This file combines several STM32F4 HAL Functions into one file. This was done
   2:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****    for space reasons, to avoid having several MB of HAL functions that most people
   3:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****    will not use. In addition this HAL is slightly less demanding (no interrupts),
   4:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****    but less robust as doesn't implement the timeouts.
   5:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****    
   6:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****    The original HAL files are COPYRIGHT STMicroelectronics, as shown below:
   7:.././hal/stm32f3/stm32f3_hal_lowlevel.c **** */
   8:.././hal/stm32f3/stm32f3_hal_lowlevel.c **** 
   9:.././hal/stm32f3/stm32f3_hal_lowlevel.c **** /*
  10:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   * COPYRIGHT(c) 2017 STMicroelectronics
  11:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   *
  12:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   * Redistribution and use in source and binary forms, with or without modification,
  13:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   * are permitted provided that the following conditions are met:
  14:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   *   1. Redistributions of source code must retain the above copyright notice,
  15:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   *      this list of conditions and the following disclaimer.
  16:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   *   2. Redistributions in binary form must reproduce the above copyright notice,
  17:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   *      this list of conditions and the following disclaimer in the documentation
  18:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   *      and/or other materials provided with the distribution.
  19:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   *   3. Neither the name of STMicroelectronics nor the names of its contributors
  20:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   *      may be used to endorse or promote products derived from this software
  21:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   *      without specific prior written permission.
  22:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   *
  23:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  24:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  25:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
  26:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
  27:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
  28:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
  29:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
  30:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
  31:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
  32:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
  33:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   *
  34:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   ******************************************************************************
  35:.././hal/stm32f3/stm32f3_hal_lowlevel.c **** */ 
  36:.././hal/stm32f3/stm32f3_hal_lowlevel.c **** 
  37:.././hal/stm32f3/stm32f3_hal_lowlevel.c **** 
  38:.././hal/stm32f3/stm32f3_hal_lowlevel.c **** #include "stm32f3_hal.h"
  39:.././hal/stm32f3/stm32f3_hal_lowlevel.c **** #include "stm32f3_hal_lowlevel.h"
  40:.././hal/stm32f3/stm32f3_hal_lowlevel.c **** #include "stm32f3xx_hal_rcc.h"
  41:.././hal/stm32f3/stm32f3_hal_lowlevel.c **** #include "stm32f3xx_hal_gpio.h"
  42:.././hal/stm32f3/stm32f3_hal_lowlevel.c **** #include "stm32f3xx_hal_dma.h"
  43:.././hal/stm32f3/stm32f3_hal_lowlevel.c **** #include "stm32f3xx_hal_uart.h"
  44:.././hal/stm32f3/stm32f3_hal_lowlevel.c **** #include "stm32f3xx_hal_flash.h"
  45:.././hal/stm32f3/stm32f3_hal_lowlevel.c **** #include "stm32f3xx_hal_cortex.h"
  46:.././hal/stm32f3/stm32f3_hal_lowlevel.c **** 
  47:.././hal/stm32f3/stm32f3_hal_lowlevel.c **** #define assert_param(expr) ((void)0U)
  48:.././hal/stm32f3/stm32f3_hal_lowlevel.c **** uint32_t hal_sys_tick = 0;
  49:.././hal/stm32f3/stm32f3_hal_lowlevel.c **** uint32_t uwTick = 0;
  50:.././hal/stm32f3/stm32f3_hal_lowlevel.c **** uint32_t SystemCoreClock = 8000000U;
  51:.././hal/stm32f3/stm32f3_hal_lowlevel.c **** 
  52:.././hal/stm32f3/stm32f3_hal_lowlevel.c **** void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
  53:.././hal/stm32f3/stm32f3_hal_lowlevel.c **** {
  28              		.loc 1 53 0
  29              		.cfi_startproc
  30              		@ args = 0, pretend = 0, frame = 0
  31              		@ frame_needed = 0, uses_anonymous_args = 0
  32              	.LVL0:
  33              	.LBB168:
  34              	.LBB169:
  35              		.file 2 ".././hal/stm32f3/CMSIS/core/core_cm4.h"
   1:.././hal/stm32f3/CMSIS/core/core_cm4.h **** /**************************************************************************//**
   2:.././hal/stm32f3/CMSIS/core/core_cm4.h ****  * @file     core_cm4.h
   3:.././hal/stm32f3/CMSIS/core/core_cm4.h ****  * @brief    CMSIS Cortex-M4 Core Peripheral Access Layer Header File
   4:.././hal/stm32f3/CMSIS/core/core_cm4.h ****  * @version  V4.30
   5:.././hal/stm32f3/CMSIS/core/core_cm4.h ****  * @date     20. October 2015
   6:.././hal/stm32f3/CMSIS/core/core_cm4.h ****  ******************************************************************************/
   7:.././hal/stm32f3/CMSIS/core/core_cm4.h **** /* Copyright (c) 2009 - 2015 ARM LIMITED
   8:.././hal/stm32f3/CMSIS/core/core_cm4.h **** 
   9:.././hal/stm32f3/CMSIS/core/core_cm4.h ****    All rights reserved.
  10:.././hal/stm32f3/CMSIS/core/core_cm4.h ****    Redistribution and use in source and binary forms, with or without
  11:.././hal/stm32f3/CMSIS/core/core_cm4.h ****    modification, are permitted provided that the following conditions are met:
  12:.././hal/stm32f3/CMSIS/core/core_cm4.h ****    - Redistributions of source code must retain the above copyright
  13:.././hal/stm32f3/CMSIS/core/core_cm4.h ****      notice, this list of conditions and the following disclaimer.
  14:.././hal/stm32f3/CMSIS/core/core_cm4.h ****    - Redistributions in binary form must reproduce the above copyright
  15:.././hal/stm32f3/CMSIS/core/core_cm4.h ****      notice, this list of conditions and the following disclaimer in the
  16:.././hal/stm32f3/CMSIS/core/core_cm4.h ****      documentation and/or other materials provided with the distribution.
  17:.././hal/stm32f3/CMSIS/core/core_cm4.h ****    - Neither the name of ARM nor the names of its contributors may be used
  18:.././hal/stm32f3/CMSIS/core/core_cm4.h ****      to endorse or promote products derived from this software without
  19:.././hal/stm32f3/CMSIS/core/core_cm4.h ****      specific prior written permission.
  20:.././hal/stm32f3/CMSIS/core/core_cm4.h ****    *
  21:.././hal/stm32f3/CMSIS/core/core_cm4.h ****    THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  22:.././hal/stm32f3/CMSIS/core/core_cm4.h ****    AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  23:.././hal/stm32f3/CMSIS/core/core_cm4.h ****    IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  24:.././hal/stm32f3/CMSIS/core/core_cm4.h ****    ARE DISCLAIMED. IN NO EVENT SHALL COPYRIGHT HOLDERS AND CONTRIBUTORS BE
  25:.././hal/stm32f3/CMSIS/core/core_cm4.h ****    LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
  26:.././hal/stm32f3/CMSIS/core/core_cm4.h ****    CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
  27:.././hal/stm32f3/CMSIS/core/core_cm4.h ****    SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
  28:.././hal/stm32f3/CMSIS/core/core_cm4.h ****    INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
  29:.././hal/stm32f3/CMSIS/core/core_cm4.h ****    CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
  30:.././hal/stm32f3/CMSIS/core/core_cm4.h ****    ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  31:.././hal/stm32f3/CMSIS/core/core_cm4.h ****    POSSIBILITY OF SUCH DAMAGE.
  32:.././hal/stm32f3/CMSIS/core/core_cm4.h ****    ---------------------------------------------------------------------------*/
  33:.././hal/stm32f3/CMSIS/core/core_cm4.h **** 
  34:.././hal/stm32f3/CMSIS/core/core_cm4.h **** 
  35:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #if   defined ( __ICCARM__ )
  36:.././hal/stm32f3/CMSIS/core/core_cm4.h ****  #pragma system_include         /* treat file as system include file for MISRA check */
  37:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #elif defined(__ARMCC_VERSION) && (__ARMCC_VERSION >= 6010050)
  38:.././hal/stm32f3/CMSIS/core/core_cm4.h ****   #pragma clang system_header   /* treat file as system include file */
  39:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #endif
  40:.././hal/stm32f3/CMSIS/core/core_cm4.h **** 
  41:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #ifndef __CORE_CM4_H_GENERIC
  42:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define __CORE_CM4_H_GENERIC
  43:.././hal/stm32f3/CMSIS/core/core_cm4.h **** 
  44:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #include <stdint.h>
  45:.././hal/stm32f3/CMSIS/core/core_cm4.h **** 
  46:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #ifdef __cplusplus
  47:.././hal/stm32f3/CMSIS/core/core_cm4.h ****  extern "C" {
  48:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #endif
  49:.././hal/stm32f3/CMSIS/core/core_cm4.h **** 
  50:.././hal/stm32f3/CMSIS/core/core_cm4.h **** /**
  51:.././hal/stm32f3/CMSIS/core/core_cm4.h ****   \page CMSIS_MISRA_Exceptions  MISRA-C:2004 Compliance Exceptions
  52:.././hal/stm32f3/CMSIS/core/core_cm4.h ****   CMSIS violates the following MISRA-C:2004 rules:
  53:.././hal/stm32f3/CMSIS/core/core_cm4.h **** 
  54:.././hal/stm32f3/CMSIS/core/core_cm4.h ****    \li Required Rule 8.5, object/function definition in header file.<br>
  55:.././hal/stm32f3/CMSIS/core/core_cm4.h ****      Function definitions in header files are used to allow 'inlining'.
  56:.././hal/stm32f3/CMSIS/core/core_cm4.h **** 
  57:.././hal/stm32f3/CMSIS/core/core_cm4.h ****    \li Required Rule 18.4, declaration of union type or object of union type: '{...}'.<br>
  58:.././hal/stm32f3/CMSIS/core/core_cm4.h ****      Unions are used for effective representation of core registers.
  59:.././hal/stm32f3/CMSIS/core/core_cm4.h **** 
  60:.././hal/stm32f3/CMSIS/core/core_cm4.h ****    \li Advisory Rule 19.7, Function-like macro defined.<br>
  61:.././hal/stm32f3/CMSIS/core/core_cm4.h ****      Function-like macros are used to allow more efficient code.
  62:.././hal/stm32f3/CMSIS/core/core_cm4.h ****  */
  63:.././hal/stm32f3/CMSIS/core/core_cm4.h **** 
  64:.././hal/stm32f3/CMSIS/core/core_cm4.h **** 
  65:.././hal/stm32f3/CMSIS/core/core_cm4.h **** /*******************************************************************************
  66:.././hal/stm32f3/CMSIS/core/core_cm4.h ****  *                 CMSIS definitions
  67:.././hal/stm32f3/CMSIS/core/core_cm4.h ****  ******************************************************************************/
  68:.././hal/stm32f3/CMSIS/core/core_cm4.h **** /**
  69:.././hal/stm32f3/CMSIS/core/core_cm4.h ****   \ingroup Cortex_M4
  70:.././hal/stm32f3/CMSIS/core/core_cm4.h ****   @{
  71:.././hal/stm32f3/CMSIS/core/core_cm4.h ****  */
  72:.././hal/stm32f3/CMSIS/core/core_cm4.h **** 
  73:.././hal/stm32f3/CMSIS/core/core_cm4.h **** /*  CMSIS CM4 definitions */
  74:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define __CM4_CMSIS_VERSION_MAIN  (0x04U)                                      /*!< [31:16] CMSIS H
  75:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define __CM4_CMSIS_VERSION_SUB   (0x1EU)                                      /*!< [15:0]  CMSIS H
  76:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define __CM4_CMSIS_VERSION       ((__CM4_CMSIS_VERSION_MAIN << 16U) | \
  77:.././hal/stm32f3/CMSIS/core/core_cm4.h ****                                     __CM4_CMSIS_VERSION_SUB           )        /*!< CMSIS HAL versi
  78:.././hal/stm32f3/CMSIS/core/core_cm4.h **** 
  79:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define __CORTEX_M                (0x04U)                                      /*!< Cortex-M Core *
  80:.././hal/stm32f3/CMSIS/core/core_cm4.h **** 
  81:.././hal/stm32f3/CMSIS/core/core_cm4.h **** 
  82:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #if   defined ( __CC_ARM )
  83:.././hal/stm32f3/CMSIS/core/core_cm4.h ****   #define __ASM            __asm                                      /*!< asm keyword for ARM Comp
  84:.././hal/stm32f3/CMSIS/core/core_cm4.h ****   #define __INLINE         __inline                                   /*!< inline keyword for ARM C
  85:.././hal/stm32f3/CMSIS/core/core_cm4.h ****   #define __STATIC_INLINE  static __inline
  86:.././hal/stm32f3/CMSIS/core/core_cm4.h **** 
  87:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #elif defined(__ARMCC_VERSION) && (__ARMCC_VERSION >= 6010050)
  88:.././hal/stm32f3/CMSIS/core/core_cm4.h ****   #define __ASM            __asm                                      /*!< asm keyword for ARM Comp
  89:.././hal/stm32f3/CMSIS/core/core_cm4.h ****   #define __INLINE         __inline                                   /*!< inline keyword for ARM C
  90:.././hal/stm32f3/CMSIS/core/core_cm4.h ****   #define __STATIC_INLINE  static __inline
  91:.././hal/stm32f3/CMSIS/core/core_cm4.h **** 
  92:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #elif defined ( __GNUC__ )
  93:.././hal/stm32f3/CMSIS/core/core_cm4.h ****   #define __ASM            __asm                                      /*!< asm keyword for GNU Comp
  94:.././hal/stm32f3/CMSIS/core/core_cm4.h ****   #define __INLINE         inline                                     /*!< inline keyword for GNU C
  95:.././hal/stm32f3/CMSIS/core/core_cm4.h ****   #define __STATIC_INLINE  static inline
  96:.././hal/stm32f3/CMSIS/core/core_cm4.h **** 
  97:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #elif defined ( __ICCARM__ )
  98:.././hal/stm32f3/CMSIS/core/core_cm4.h ****   #define __ASM            __asm                                      /*!< asm keyword for IAR Comp
  99:.././hal/stm32f3/CMSIS/core/core_cm4.h ****   #define __INLINE         inline                                     /*!< inline keyword for IAR C
 100:.././hal/stm32f3/CMSIS/core/core_cm4.h ****   #define __STATIC_INLINE  static inline
 101:.././hal/stm32f3/CMSIS/core/core_cm4.h **** 
 102:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #elif defined ( __TMS470__ )
 103:.././hal/stm32f3/CMSIS/core/core_cm4.h ****   #define __ASM            __asm                                      /*!< asm keyword for TI CCS C
 104:.././hal/stm32f3/CMSIS/core/core_cm4.h ****   #define __STATIC_INLINE  static inline
 105:.././hal/stm32f3/CMSIS/core/core_cm4.h **** 
 106:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #elif defined ( __TASKING__ )
 107:.././hal/stm32f3/CMSIS/core/core_cm4.h ****   #define __ASM            __asm                                      /*!< asm keyword for TASKING 
 108:.././hal/stm32f3/CMSIS/core/core_cm4.h ****   #define __INLINE         inline                                     /*!< inline keyword for TASKI
 109:.././hal/stm32f3/CMSIS/core/core_cm4.h ****   #define __STATIC_INLINE  static inline
 110:.././hal/stm32f3/CMSIS/core/core_cm4.h **** 
 111:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #elif defined ( __CSMC__ )
 112:.././hal/stm32f3/CMSIS/core/core_cm4.h ****   #define __packed
 113:.././hal/stm32f3/CMSIS/core/core_cm4.h ****   #define __ASM            _asm                                      /*!< asm keyword for COSMIC Co
 114:.././hal/stm32f3/CMSIS/core/core_cm4.h ****   #define __INLINE         inline                                    /*!< inline keyword for COSMIC
 115:.././hal/stm32f3/CMSIS/core/core_cm4.h ****   #define __STATIC_INLINE  static inline
 116:.././hal/stm32f3/CMSIS/core/core_cm4.h **** 
 117:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #else
 118:.././hal/stm32f3/CMSIS/core/core_cm4.h ****   #error Unknown compiler
 119:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #endif
 120:.././hal/stm32f3/CMSIS/core/core_cm4.h **** 
 121:.././hal/stm32f3/CMSIS/core/core_cm4.h **** /** __FPU_USED indicates whether an FPU is used or not.
 122:.././hal/stm32f3/CMSIS/core/core_cm4.h ****     For this, __FPU_PRESENT has to be checked prior to making use of FPU specific registers and fun
 123:.././hal/stm32f3/CMSIS/core/core_cm4.h **** */
 124:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #if defined ( __CC_ARM )
 125:.././hal/stm32f3/CMSIS/core/core_cm4.h ****   #if defined __TARGET_FPU_VFP
 126:.././hal/stm32f3/CMSIS/core/core_cm4.h ****     #if (__FPU_PRESENT == 1U)
 127:.././hal/stm32f3/CMSIS/core/core_cm4.h ****       #define __FPU_USED       1U
 128:.././hal/stm32f3/CMSIS/core/core_cm4.h ****     #else
 129:.././hal/stm32f3/CMSIS/core/core_cm4.h ****       #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)
 130:.././hal/stm32f3/CMSIS/core/core_cm4.h ****       #define __FPU_USED       0U
 131:.././hal/stm32f3/CMSIS/core/core_cm4.h ****     #endif
 132:.././hal/stm32f3/CMSIS/core/core_cm4.h ****   #else
 133:.././hal/stm32f3/CMSIS/core/core_cm4.h ****     #define __FPU_USED         0U
 134:.././hal/stm32f3/CMSIS/core/core_cm4.h ****   #endif
 135:.././hal/stm32f3/CMSIS/core/core_cm4.h **** 
 136:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #elif defined(__ARMCC_VERSION) && (__ARMCC_VERSION >= 6010050)
 137:.././hal/stm32f3/CMSIS/core/core_cm4.h ****   #if defined __ARM_PCS_VFP
 138:.././hal/stm32f3/CMSIS/core/core_cm4.h ****     #if (__FPU_PRESENT == 1)
 139:.././hal/stm32f3/CMSIS/core/core_cm4.h ****       #define __FPU_USED       1U
 140:.././hal/stm32f3/CMSIS/core/core_cm4.h ****     #else
 141:.././hal/stm32f3/CMSIS/core/core_cm4.h ****       #warning "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESEN
 142:.././hal/stm32f3/CMSIS/core/core_cm4.h ****       #define __FPU_USED       0U
 143:.././hal/stm32f3/CMSIS/core/core_cm4.h ****     #endif
 144:.././hal/stm32f3/CMSIS/core/core_cm4.h ****   #else
 145:.././hal/stm32f3/CMSIS/core/core_cm4.h ****     #define __FPU_USED         0U
 146:.././hal/stm32f3/CMSIS/core/core_cm4.h ****   #endif
 147:.././hal/stm32f3/CMSIS/core/core_cm4.h **** 
 148:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #elif defined ( __GNUC__ )
 149:.././hal/stm32f3/CMSIS/core/core_cm4.h ****   #if defined (__VFP_FP__) && !defined(__SOFTFP__)
 150:.././hal/stm32f3/CMSIS/core/core_cm4.h ****     #if (__FPU_PRESENT == 1U)
 151:.././hal/stm32f3/CMSIS/core/core_cm4.h ****       #define __FPU_USED       1U
 152:.././hal/stm32f3/CMSIS/core/core_cm4.h ****     #else
 153:.././hal/stm32f3/CMSIS/core/core_cm4.h ****       #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)
 154:.././hal/stm32f3/CMSIS/core/core_cm4.h ****       #define __FPU_USED       0U
 155:.././hal/stm32f3/CMSIS/core/core_cm4.h ****     #endif
 156:.././hal/stm32f3/CMSIS/core/core_cm4.h ****   #else
 157:.././hal/stm32f3/CMSIS/core/core_cm4.h ****     #define __FPU_USED         0U
 158:.././hal/stm32f3/CMSIS/core/core_cm4.h ****   #endif
 159:.././hal/stm32f3/CMSIS/core/core_cm4.h **** 
 160:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #elif defined ( __ICCARM__ )
 161:.././hal/stm32f3/CMSIS/core/core_cm4.h ****   #if defined __ARMVFP__
 162:.././hal/stm32f3/CMSIS/core/core_cm4.h ****     #if (__FPU_PRESENT == 1U)
 163:.././hal/stm32f3/CMSIS/core/core_cm4.h ****       #define __FPU_USED       1U
 164:.././hal/stm32f3/CMSIS/core/core_cm4.h ****     #else
 165:.././hal/stm32f3/CMSIS/core/core_cm4.h ****       #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)
 166:.././hal/stm32f3/CMSIS/core/core_cm4.h ****       #define __FPU_USED       0U
 167:.././hal/stm32f3/CMSIS/core/core_cm4.h ****     #endif
 168:.././hal/stm32f3/CMSIS/core/core_cm4.h ****   #else
 169:.././hal/stm32f3/CMSIS/core/core_cm4.h ****     #define __FPU_USED         0U
 170:.././hal/stm32f3/CMSIS/core/core_cm4.h ****   #endif
 171:.././hal/stm32f3/CMSIS/core/core_cm4.h **** 
 172:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #elif defined ( __TMS470__ )
 173:.././hal/stm32f3/CMSIS/core/core_cm4.h ****   #if defined __TI_VFP_SUPPORT__
 174:.././hal/stm32f3/CMSIS/core/core_cm4.h ****     #if (__FPU_PRESENT == 1U)
 175:.././hal/stm32f3/CMSIS/core/core_cm4.h ****       #define __FPU_USED       1U
 176:.././hal/stm32f3/CMSIS/core/core_cm4.h ****     #else
 177:.././hal/stm32f3/CMSIS/core/core_cm4.h ****       #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)
 178:.././hal/stm32f3/CMSIS/core/core_cm4.h ****       #define __FPU_USED       0U
 179:.././hal/stm32f3/CMSIS/core/core_cm4.h ****     #endif
 180:.././hal/stm32f3/CMSIS/core/core_cm4.h ****   #else
 181:.././hal/stm32f3/CMSIS/core/core_cm4.h ****     #define __FPU_USED         0U
 182:.././hal/stm32f3/CMSIS/core/core_cm4.h ****   #endif
 183:.././hal/stm32f3/CMSIS/core/core_cm4.h **** 
 184:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #elif defined ( __TASKING__ )
 185:.././hal/stm32f3/CMSIS/core/core_cm4.h ****   #if defined __FPU_VFP__
 186:.././hal/stm32f3/CMSIS/core/core_cm4.h ****     #if (__FPU_PRESENT == 1U)
 187:.././hal/stm32f3/CMSIS/core/core_cm4.h ****       #define __FPU_USED       1U
 188:.././hal/stm32f3/CMSIS/core/core_cm4.h ****     #else
 189:.././hal/stm32f3/CMSIS/core/core_cm4.h ****       #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)
 190:.././hal/stm32f3/CMSIS/core/core_cm4.h ****       #define __FPU_USED       0U
 191:.././hal/stm32f3/CMSIS/core/core_cm4.h ****     #endif
 192:.././hal/stm32f3/CMSIS/core/core_cm4.h ****   #else
 193:.././hal/stm32f3/CMSIS/core/core_cm4.h ****     #define __FPU_USED         0U
 194:.././hal/stm32f3/CMSIS/core/core_cm4.h ****   #endif
 195:.././hal/stm32f3/CMSIS/core/core_cm4.h **** 
 196:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #elif defined ( __CSMC__ )
 197:.././hal/stm32f3/CMSIS/core/core_cm4.h ****   #if ( __CSMC__ & 0x400U)
 198:.././hal/stm32f3/CMSIS/core/core_cm4.h ****     #if (__FPU_PRESENT == 1U)
 199:.././hal/stm32f3/CMSIS/core/core_cm4.h ****       #define __FPU_USED       1U
 200:.././hal/stm32f3/CMSIS/core/core_cm4.h ****     #else
 201:.././hal/stm32f3/CMSIS/core/core_cm4.h ****       #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)
 202:.././hal/stm32f3/CMSIS/core/core_cm4.h ****       #define __FPU_USED       0U
 203:.././hal/stm32f3/CMSIS/core/core_cm4.h ****     #endif
 204:.././hal/stm32f3/CMSIS/core/core_cm4.h ****   #else
 205:.././hal/stm32f3/CMSIS/core/core_cm4.h ****     #define __FPU_USED         0U
 206:.././hal/stm32f3/CMSIS/core/core_cm4.h ****   #endif
 207:.././hal/stm32f3/CMSIS/core/core_cm4.h **** 
 208:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #endif
 209:.././hal/stm32f3/CMSIS/core/core_cm4.h **** 
 210:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #include "core_cmInstr.h"                /* Core Instruction Access */
 211:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #include "core_cmFunc.h"                 /* Core Function Access */
 212:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #include "core_cmSimd.h"                 /* Compiler specific SIMD Intrinsics */
 213:.././hal/stm32f3/CMSIS/core/core_cm4.h **** 
 214:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #ifdef __cplusplus
 215:.././hal/stm32f3/CMSIS/core/core_cm4.h **** }
 216:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #endif
 217:.././hal/stm32f3/CMSIS/core/core_cm4.h **** 
 218:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #endif /* __CORE_CM4_H_GENERIC */
 219:.././hal/stm32f3/CMSIS/core/core_cm4.h **** 
 220:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #ifndef __CMSIS_GENERIC
 221:.././hal/stm32f3/CMSIS/core/core_cm4.h **** 
 222:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #ifndef __CORE_CM4_H_DEPENDANT
 223:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define __CORE_CM4_H_DEPENDANT
 224:.././hal/stm32f3/CMSIS/core/core_cm4.h **** 
 225:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #ifdef __cplusplus
 226:.././hal/stm32f3/CMSIS/core/core_cm4.h ****  extern "C" {
 227:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #endif
 228:.././hal/stm32f3/CMSIS/core/core_cm4.h **** 
 229:.././hal/stm32f3/CMSIS/core/core_cm4.h **** /* check device defines and use defaults */
 230:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #if defined __CHECK_DEVICE_DEFINES
 231:.././hal/stm32f3/CMSIS/core/core_cm4.h ****   #ifndef __CM4_REV
 232:.././hal/stm32f3/CMSIS/core/core_cm4.h ****     #define __CM4_REV               0x0000U
 233:.././hal/stm32f3/CMSIS/core/core_cm4.h ****     #warning "__CM4_REV not defined in device header file; using default!"
 234:.././hal/stm32f3/CMSIS/core/core_cm4.h ****   #endif
 235:.././hal/stm32f3/CMSIS/core/core_cm4.h **** 
 236:.././hal/stm32f3/CMSIS/core/core_cm4.h ****   #ifndef __FPU_PRESENT
 237:.././hal/stm32f3/CMSIS/core/core_cm4.h ****     #define __FPU_PRESENT             0U
 238:.././hal/stm32f3/CMSIS/core/core_cm4.h ****     #warning "__FPU_PRESENT not defined in device header file; using default!"
 239:.././hal/stm32f3/CMSIS/core/core_cm4.h ****   #endif
 240:.././hal/stm32f3/CMSIS/core/core_cm4.h **** 
 241:.././hal/stm32f3/CMSIS/core/core_cm4.h ****   #ifndef __MPU_PRESENT
 242:.././hal/stm32f3/CMSIS/core/core_cm4.h ****     #define __MPU_PRESENT             0U
 243:.././hal/stm32f3/CMSIS/core/core_cm4.h ****     #warning "__MPU_PRESENT not defined in device header file; using default!"
 244:.././hal/stm32f3/CMSIS/core/core_cm4.h ****   #endif
 245:.././hal/stm32f3/CMSIS/core/core_cm4.h **** 
 246:.././hal/stm32f3/CMSIS/core/core_cm4.h ****   #ifndef __NVIC_PRIO_BITS
 247:.././hal/stm32f3/CMSIS/core/core_cm4.h ****     #define __NVIC_PRIO_BITS          4U
 248:.././hal/stm32f3/CMSIS/core/core_cm4.h ****     #warning "__NVIC_PRIO_BITS not defined in device header file; using default!"
 249:.././hal/stm32f3/CMSIS/core/core_cm4.h ****   #endif
 250:.././hal/stm32f3/CMSIS/core/core_cm4.h **** 
 251:.././hal/stm32f3/CMSIS/core/core_cm4.h ****   #ifndef __Vendor_SysTickConfig
 252:.././hal/stm32f3/CMSIS/core/core_cm4.h ****     #define __Vendor_SysTickConfig    0U
 253:.././hal/stm32f3/CMSIS/core/core_cm4.h ****     #warning "__Vendor_SysTickConfig not defined in device header file; using default!"
 254:.././hal/stm32f3/CMSIS/core/core_cm4.h ****   #endif
 255:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #endif
 256:.././hal/stm32f3/CMSIS/core/core_cm4.h **** 
 257:.././hal/stm32f3/CMSIS/core/core_cm4.h **** /* IO definitions (access restrictions to peripheral registers) */
 258:.././hal/stm32f3/CMSIS/core/core_cm4.h **** /**
 259:.././hal/stm32f3/CMSIS/core/core_cm4.h ****     \defgroup CMSIS_glob_defs CMSIS Global Defines
 260:.././hal/stm32f3/CMSIS/core/core_cm4.h **** 
 261:.././hal/stm32f3/CMSIS/core/core_cm4.h ****     <strong>IO Type Qualifiers</strong> are used
 262:.././hal/stm32f3/CMSIS/core/core_cm4.h ****     \li to specify the access to peripheral variables.
 263:.././hal/stm32f3/CMSIS/core/core_cm4.h ****     \li for automatic generation of peripheral register debug information.
 264:.././hal/stm32f3/CMSIS/core/core_cm4.h **** */
 265:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #ifdef __cplusplus
 266:.././hal/stm32f3/CMSIS/core/core_cm4.h ****   #define   __I     volatile             /*!< Defines 'read only' permissions */
 267:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #else
 268:.././hal/stm32f3/CMSIS/core/core_cm4.h ****   #define   __I     volatile const       /*!< Defines 'read only' permissions */
 269:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #endif
 270:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define     __O     volatile             /*!< Defines 'write only' permissions */
 271:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define     __IO    volatile             /*!< Defines 'read / write' permissions */
 272:.././hal/stm32f3/CMSIS/core/core_cm4.h **** 
 273:.././hal/stm32f3/CMSIS/core/core_cm4.h **** /* following defines should be used for structure members */
 274:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define     __IM     volatile const      /*! Defines 'read only' structure member permissions */
 275:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define     __OM     volatile            /*! Defines 'write only' structure member permissions */
 276:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define     __IOM    volatile            /*! Defines 'read / write' structure member permissions */
 277:.././hal/stm32f3/CMSIS/core/core_cm4.h **** 
 278:.././hal/stm32f3/CMSIS/core/core_cm4.h **** /*@} end of group Cortex_M4 */
 279:.././hal/stm32f3/CMSIS/core/core_cm4.h **** 
 280:.././hal/stm32f3/CMSIS/core/core_cm4.h **** 
 281:.././hal/stm32f3/CMSIS/core/core_cm4.h **** 
 282:.././hal/stm32f3/CMSIS/core/core_cm4.h **** /*******************************************************************************
 283:.././hal/stm32f3/CMSIS/core/core_cm4.h ****  *                 Register Abstraction
 284:.././hal/stm32f3/CMSIS/core/core_cm4.h ****   Core Register contain:
 285:.././hal/stm32f3/CMSIS/core/core_cm4.h ****   - Core Register
 286:.././hal/stm32f3/CMSIS/core/core_cm4.h ****   - Core NVIC Register
 287:.././hal/stm32f3/CMSIS/core/core_cm4.h ****   - Core SCB Register
 288:.././hal/stm32f3/CMSIS/core/core_cm4.h ****   - Core SysTick Register
 289:.././hal/stm32f3/CMSIS/core/core_cm4.h ****   - Core Debug Register
 290:.././hal/stm32f3/CMSIS/core/core_cm4.h ****   - Core MPU Register
 291:.././hal/stm32f3/CMSIS/core/core_cm4.h ****   - Core FPU Register
 292:.././hal/stm32f3/CMSIS/core/core_cm4.h ****  ******************************************************************************/
 293:.././hal/stm32f3/CMSIS/core/core_cm4.h **** /**
 294:.././hal/stm32f3/CMSIS/core/core_cm4.h ****   \defgroup CMSIS_core_register Defines and Type Definitions
 295:.././hal/stm32f3/CMSIS/core/core_cm4.h ****   \brief Type definitions and defines for Cortex-M processor based devices.
 296:.././hal/stm32f3/CMSIS/core/core_cm4.h **** */
 297:.././hal/stm32f3/CMSIS/core/core_cm4.h **** 
 298:.././hal/stm32f3/CMSIS/core/core_cm4.h **** /**
 299:.././hal/stm32f3/CMSIS/core/core_cm4.h ****   \ingroup    CMSIS_core_register
 300:.././hal/stm32f3/CMSIS/core/core_cm4.h ****   \defgroup   CMSIS_CORE  Status and Control Registers
 301:.././hal/stm32f3/CMSIS/core/core_cm4.h ****   \brief      Core Register type definitions.
 302:.././hal/stm32f3/CMSIS/core/core_cm4.h ****   @{
 303:.././hal/stm32f3/CMSIS/core/core_cm4.h ****  */
 304:.././hal/stm32f3/CMSIS/core/core_cm4.h **** 
 305:.././hal/stm32f3/CMSIS/core/core_cm4.h **** /**
 306:.././hal/stm32f3/CMSIS/core/core_cm4.h ****   \brief  Union type to access the Application Program Status Register (APSR).
 307:.././hal/stm32f3/CMSIS/core/core_cm4.h ****  */
 308:.././hal/stm32f3/CMSIS/core/core_cm4.h **** typedef union
 309:.././hal/stm32f3/CMSIS/core/core_cm4.h **** {
 310:.././hal/stm32f3/CMSIS/core/core_cm4.h ****   struct
 311:.././hal/stm32f3/CMSIS/core/core_cm4.h ****   {
 312:.././hal/stm32f3/CMSIS/core/core_cm4.h ****     uint32_t _reserved0:16;              /*!< bit:  0..15  Reserved */
 313:.././hal/stm32f3/CMSIS/core/core_cm4.h ****     uint32_t GE:4;                       /*!< bit: 16..19  Greater than or Equal flags */
 314:.././hal/stm32f3/CMSIS/core/core_cm4.h ****     uint32_t _reserved1:7;               /*!< bit: 20..26  Reserved */
 315:.././hal/stm32f3/CMSIS/core/core_cm4.h ****     uint32_t Q:1;                        /*!< bit:     27  Saturation condition flag */
 316:.././hal/stm32f3/CMSIS/core/core_cm4.h ****     uint32_t V:1;                        /*!< bit:     28  Overflow condition code flag */
 317:.././hal/stm32f3/CMSIS/core/core_cm4.h ****     uint32_t C:1;                        /*!< bit:     29  Carry condition code flag */
 318:.././hal/stm32f3/CMSIS/core/core_cm4.h ****     uint32_t Z:1;                        /*!< bit:     30  Zero condition code flag */
 319:.././hal/stm32f3/CMSIS/core/core_cm4.h ****     uint32_t N:1;                        /*!< bit:     31  Negative condition code flag */
 320:.././hal/stm32f3/CMSIS/core/core_cm4.h ****   } b;                                   /*!< Structure used for bit  access */
 321:.././hal/stm32f3/CMSIS/core/core_cm4.h ****   uint32_t w;                            /*!< Type      used for word access */
 322:.././hal/stm32f3/CMSIS/core/core_cm4.h **** } APSR_Type;
 323:.././hal/stm32f3/CMSIS/core/core_cm4.h **** 
 324:.././hal/stm32f3/CMSIS/core/core_cm4.h **** /* APSR Register Definitions */
 325:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define APSR_N_Pos                         31U                                            /*!< APSR
 326:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define APSR_N_Msk                         (1UL << APSR_N_Pos)                            /*!< APSR
 327:.././hal/stm32f3/CMSIS/core/core_cm4.h **** 
 328:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define APSR_Z_Pos                         30U                                            /*!< APSR
 329:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define APSR_Z_Msk                         (1UL << APSR_Z_Pos)                            /*!< APSR
 330:.././hal/stm32f3/CMSIS/core/core_cm4.h **** 
 331:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define APSR_C_Pos                         29U                                            /*!< APSR
 332:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define APSR_C_Msk                         (1UL << APSR_C_Pos)                            /*!< APSR
 333:.././hal/stm32f3/CMSIS/core/core_cm4.h **** 
 334:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define APSR_V_Pos                         28U                                            /*!< APSR
 335:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define APSR_V_Msk                         (1UL << APSR_V_Pos)                            /*!< APSR
 336:.././hal/stm32f3/CMSIS/core/core_cm4.h **** 
 337:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define APSR_Q_Pos                         27U                                            /*!< APSR
 338:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define APSR_Q_Msk                         (1UL << APSR_Q_Pos)                            /*!< APSR
 339:.././hal/stm32f3/CMSIS/core/core_cm4.h **** 
 340:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define APSR_GE_Pos                        16U                                            /*!< APSR
 341:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define APSR_GE_Msk                        (0xFUL << APSR_GE_Pos)                         /*!< APSR
 342:.././hal/stm32f3/CMSIS/core/core_cm4.h **** 
 343:.././hal/stm32f3/CMSIS/core/core_cm4.h **** 
 344:.././hal/stm32f3/CMSIS/core/core_cm4.h **** /**
 345:.././hal/stm32f3/CMSIS/core/core_cm4.h ****   \brief  Union type to access the Interrupt Program Status Register (IPSR).
 346:.././hal/stm32f3/CMSIS/core/core_cm4.h ****  */
 347:.././hal/stm32f3/CMSIS/core/core_cm4.h **** typedef union
 348:.././hal/stm32f3/CMSIS/core/core_cm4.h **** {
 349:.././hal/stm32f3/CMSIS/core/core_cm4.h ****   struct
 350:.././hal/stm32f3/CMSIS/core/core_cm4.h ****   {
 351:.././hal/stm32f3/CMSIS/core/core_cm4.h ****     uint32_t ISR:9;                      /*!< bit:  0.. 8  Exception number */
 352:.././hal/stm32f3/CMSIS/core/core_cm4.h ****     uint32_t _reserved0:23;              /*!< bit:  9..31  Reserved */
 353:.././hal/stm32f3/CMSIS/core/core_cm4.h ****   } b;                                   /*!< Structure used for bit  access */
 354:.././hal/stm32f3/CMSIS/core/core_cm4.h ****   uint32_t w;                            /*!< Type      used for word access */
 355:.././hal/stm32f3/CMSIS/core/core_cm4.h **** } IPSR_Type;
 356:.././hal/stm32f3/CMSIS/core/core_cm4.h **** 
 357:.././hal/stm32f3/CMSIS/core/core_cm4.h **** /* IPSR Register Definitions */
 358:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define IPSR_ISR_Pos                        0U                                            /*!< IPSR
 359:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define IPSR_ISR_Msk                       (0x1FFUL /*<< IPSR_ISR_Pos*/)                  /*!< IPSR
 360:.././hal/stm32f3/CMSIS/core/core_cm4.h **** 
 361:.././hal/stm32f3/CMSIS/core/core_cm4.h **** 
 362:.././hal/stm32f3/CMSIS/core/core_cm4.h **** /**
 363:.././hal/stm32f3/CMSIS/core/core_cm4.h ****   \brief  Union type to access the Special-Purpose Program Status Registers (xPSR).
 364:.././hal/stm32f3/CMSIS/core/core_cm4.h ****  */
 365:.././hal/stm32f3/CMSIS/core/core_cm4.h **** typedef union
 366:.././hal/stm32f3/CMSIS/core/core_cm4.h **** {
 367:.././hal/stm32f3/CMSIS/core/core_cm4.h ****   struct
 368:.././hal/stm32f3/CMSIS/core/core_cm4.h ****   {
 369:.././hal/stm32f3/CMSIS/core/core_cm4.h ****     uint32_t ISR:9;                      /*!< bit:  0.. 8  Exception number */
 370:.././hal/stm32f3/CMSIS/core/core_cm4.h ****     uint32_t _reserved0:7;               /*!< bit:  9..15  Reserved */
 371:.././hal/stm32f3/CMSIS/core/core_cm4.h ****     uint32_t GE:4;                       /*!< bit: 16..19  Greater than or Equal flags */
 372:.././hal/stm32f3/CMSIS/core/core_cm4.h ****     uint32_t _reserved1:4;               /*!< bit: 20..23  Reserved */
 373:.././hal/stm32f3/CMSIS/core/core_cm4.h ****     uint32_t T:1;                        /*!< bit:     24  Thumb bit        (read 0) */
 374:.././hal/stm32f3/CMSIS/core/core_cm4.h ****     uint32_t IT:2;                       /*!< bit: 25..26  saved IT state   (read 0) */
 375:.././hal/stm32f3/CMSIS/core/core_cm4.h ****     uint32_t Q:1;                        /*!< bit:     27  Saturation condition flag */
 376:.././hal/stm32f3/CMSIS/core/core_cm4.h ****     uint32_t V:1;                        /*!< bit:     28  Overflow condition code flag */
 377:.././hal/stm32f3/CMSIS/core/core_cm4.h ****     uint32_t C:1;                        /*!< bit:     29  Carry condition code flag */
 378:.././hal/stm32f3/CMSIS/core/core_cm4.h ****     uint32_t Z:1;                        /*!< bit:     30  Zero condition code flag */
 379:.././hal/stm32f3/CMSIS/core/core_cm4.h ****     uint32_t N:1;                        /*!< bit:     31  Negative condition code flag */
 380:.././hal/stm32f3/CMSIS/core/core_cm4.h ****   } b;                                   /*!< Structure used for bit  access */
 381:.././hal/stm32f3/CMSIS/core/core_cm4.h ****   uint32_t w;                            /*!< Type      used for word access */
 382:.././hal/stm32f3/CMSIS/core/core_cm4.h **** } xPSR_Type;
 383:.././hal/stm32f3/CMSIS/core/core_cm4.h **** 
 384:.././hal/stm32f3/CMSIS/core/core_cm4.h **** /* xPSR Register Definitions */
 385:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define xPSR_N_Pos                         31U                                            /*!< xPSR
 386:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define xPSR_N_Msk                         (1UL << xPSR_N_Pos)                            /*!< xPSR
 387:.././hal/stm32f3/CMSIS/core/core_cm4.h **** 
 388:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define xPSR_Z_Pos                         30U                                            /*!< xPSR
 389:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define xPSR_Z_Msk                         (1UL << xPSR_Z_Pos)                            /*!< xPSR
 390:.././hal/stm32f3/CMSIS/core/core_cm4.h **** 
 391:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define xPSR_C_Pos                         29U                                            /*!< xPSR
 392:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define xPSR_C_Msk                         (1UL << xPSR_C_Pos)                            /*!< xPSR
 393:.././hal/stm32f3/CMSIS/core/core_cm4.h **** 
 394:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define xPSR_V_Pos                         28U                                            /*!< xPSR
 395:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define xPSR_V_Msk                         (1UL << xPSR_V_Pos)                            /*!< xPSR
 396:.././hal/stm32f3/CMSIS/core/core_cm4.h **** 
 397:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define xPSR_Q_Pos                         27U                                            /*!< xPSR
 398:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define xPSR_Q_Msk                         (1UL << xPSR_Q_Pos)                            /*!< xPSR
 399:.././hal/stm32f3/CMSIS/core/core_cm4.h **** 
 400:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define xPSR_IT_Pos                        25U                                            /*!< xPSR
 401:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define xPSR_IT_Msk                        (3UL << xPSR_IT_Pos)                           /*!< xPSR
 402:.././hal/stm32f3/CMSIS/core/core_cm4.h **** 
 403:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define xPSR_T_Pos                         24U                                            /*!< xPSR
 404:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define xPSR_T_Msk                         (1UL << xPSR_T_Pos)                            /*!< xPSR
 405:.././hal/stm32f3/CMSIS/core/core_cm4.h **** 
 406:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define xPSR_GE_Pos                        16U                                            /*!< xPSR
 407:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define xPSR_GE_Msk                        (0xFUL << xPSR_GE_Pos)                         /*!< xPSR
 408:.././hal/stm32f3/CMSIS/core/core_cm4.h **** 
 409:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define xPSR_ISR_Pos                        0U                                            /*!< xPSR
 410:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define xPSR_ISR_Msk                       (0x1FFUL /*<< xPSR_ISR_Pos*/)                  /*!< xPSR
 411:.././hal/stm32f3/CMSIS/core/core_cm4.h **** 
 412:.././hal/stm32f3/CMSIS/core/core_cm4.h **** 
 413:.././hal/stm32f3/CMSIS/core/core_cm4.h **** /**
 414:.././hal/stm32f3/CMSIS/core/core_cm4.h ****   \brief  Union type to access the Control Registers (CONTROL).
 415:.././hal/stm32f3/CMSIS/core/core_cm4.h ****  */
 416:.././hal/stm32f3/CMSIS/core/core_cm4.h **** typedef union
 417:.././hal/stm32f3/CMSIS/core/core_cm4.h **** {
 418:.././hal/stm32f3/CMSIS/core/core_cm4.h ****   struct
 419:.././hal/stm32f3/CMSIS/core/core_cm4.h ****   {
 420:.././hal/stm32f3/CMSIS/core/core_cm4.h ****     uint32_t nPRIV:1;                    /*!< bit:      0  Execution privilege in Thread mode */
 421:.././hal/stm32f3/CMSIS/core/core_cm4.h ****     uint32_t SPSEL:1;                    /*!< bit:      1  Stack to be used */
 422:.././hal/stm32f3/CMSIS/core/core_cm4.h ****     uint32_t FPCA:1;                     /*!< bit:      2  FP extension active flag */
 423:.././hal/stm32f3/CMSIS/core/core_cm4.h ****     uint32_t _reserved0:29;              /*!< bit:  3..31  Reserved */
 424:.././hal/stm32f3/CMSIS/core/core_cm4.h ****   } b;                                   /*!< Structure used for bit  access */
 425:.././hal/stm32f3/CMSIS/core/core_cm4.h ****   uint32_t w;                            /*!< Type      used for word access */
 426:.././hal/stm32f3/CMSIS/core/core_cm4.h **** } CONTROL_Type;
 427:.././hal/stm32f3/CMSIS/core/core_cm4.h **** 
 428:.././hal/stm32f3/CMSIS/core/core_cm4.h **** /* CONTROL Register Definitions */
 429:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define CONTROL_FPCA_Pos                    2U                                            /*!< CONT
 430:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define CONTROL_FPCA_Msk                   (1UL << CONTROL_FPCA_Pos)                      /*!< CONT
 431:.././hal/stm32f3/CMSIS/core/core_cm4.h **** 
 432:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define CONTROL_SPSEL_Pos                   1U                                            /*!< CONT
 433:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define CONTROL_SPSEL_Msk                  (1UL << CONTROL_SPSEL_Pos)                     /*!< CONT
 434:.././hal/stm32f3/CMSIS/core/core_cm4.h **** 
 435:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define CONTROL_nPRIV_Pos                   0U                                            /*!< CONT
 436:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define CONTROL_nPRIV_Msk                  (1UL /*<< CONTROL_nPRIV_Pos*/)                 /*!< CONT
 437:.././hal/stm32f3/CMSIS/core/core_cm4.h **** 
 438:.././hal/stm32f3/CMSIS/core/core_cm4.h **** /*@} end of group CMSIS_CORE */
 439:.././hal/stm32f3/CMSIS/core/core_cm4.h **** 
 440:.././hal/stm32f3/CMSIS/core/core_cm4.h **** 
 441:.././hal/stm32f3/CMSIS/core/core_cm4.h **** /**
 442:.././hal/stm32f3/CMSIS/core/core_cm4.h ****   \ingroup    CMSIS_core_register
 443:.././hal/stm32f3/CMSIS/core/core_cm4.h ****   \defgroup   CMSIS_NVIC  Nested Vectored Interrupt Controller (NVIC)
 444:.././hal/stm32f3/CMSIS/core/core_cm4.h ****   \brief      Type definitions for the NVIC Registers
 445:.././hal/stm32f3/CMSIS/core/core_cm4.h ****   @{
 446:.././hal/stm32f3/CMSIS/core/core_cm4.h ****  */
 447:.././hal/stm32f3/CMSIS/core/core_cm4.h **** 
 448:.././hal/stm32f3/CMSIS/core/core_cm4.h **** /**
 449:.././hal/stm32f3/CMSIS/core/core_cm4.h ****   \brief  Structure type to access the Nested Vectored Interrupt Controller (NVIC).
 450:.././hal/stm32f3/CMSIS/core/core_cm4.h ****  */
 451:.././hal/stm32f3/CMSIS/core/core_cm4.h **** typedef struct
 452:.././hal/stm32f3/CMSIS/core/core_cm4.h **** {
 453:.././hal/stm32f3/CMSIS/core/core_cm4.h ****   __IOM uint32_t ISER[8U];               /*!< Offset: 0x000 (R/W)  Interrupt Set Enable Register */
 454:.././hal/stm32f3/CMSIS/core/core_cm4.h ****         uint32_t RESERVED0[24U];
 455:.././hal/stm32f3/CMSIS/core/core_cm4.h ****   __IOM uint32_t ICER[8U];               /*!< Offset: 0x080 (R/W)  Interrupt Clear Enable Register 
 456:.././hal/stm32f3/CMSIS/core/core_cm4.h ****         uint32_t RSERVED1[24U];
 457:.././hal/stm32f3/CMSIS/core/core_cm4.h ****   __IOM uint32_t ISPR[8U];               /*!< Offset: 0x100 (R/W)  Interrupt Set Pending Register *
 458:.././hal/stm32f3/CMSIS/core/core_cm4.h ****         uint32_t RESERVED2[24U];
 459:.././hal/stm32f3/CMSIS/core/core_cm4.h ****   __IOM uint32_t ICPR[8U];               /*!< Offset: 0x180 (R/W)  Interrupt Clear Pending Register
 460:.././hal/stm32f3/CMSIS/core/core_cm4.h ****         uint32_t RESERVED3[24U];
 461:.././hal/stm32f3/CMSIS/core/core_cm4.h ****   __IOM uint32_t IABR[8U];               /*!< Offset: 0x200 (R/W)  Interrupt Active bit Register */
 462:.././hal/stm32f3/CMSIS/core/core_cm4.h ****         uint32_t RESERVED4[56U];
 463:.././hal/stm32f3/CMSIS/core/core_cm4.h ****   __IOM uint8_t  IP[240U];               /*!< Offset: 0x300 (R/W)  Interrupt Priority Register (8Bi
 464:.././hal/stm32f3/CMSIS/core/core_cm4.h ****         uint32_t RESERVED5[644U];
 465:.././hal/stm32f3/CMSIS/core/core_cm4.h ****   __OM  uint32_t STIR;                   /*!< Offset: 0xE00 ( /W)  Software Trigger Interrupt Regis
 466:.././hal/stm32f3/CMSIS/core/core_cm4.h **** }  NVIC_Type;
 467:.././hal/stm32f3/CMSIS/core/core_cm4.h **** 
 468:.././hal/stm32f3/CMSIS/core/core_cm4.h **** /* Software Triggered Interrupt Register Definitions */
 469:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define NVIC_STIR_INTID_Pos                 0U                                         /*!< STIR: I
 470:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define NVIC_STIR_INTID_Msk                (0x1FFUL /*<< NVIC_STIR_INTID_Pos*/)        /*!< STIR: I
 471:.././hal/stm32f3/CMSIS/core/core_cm4.h **** 
 472:.././hal/stm32f3/CMSIS/core/core_cm4.h **** /*@} end of group CMSIS_NVIC */
 473:.././hal/stm32f3/CMSIS/core/core_cm4.h **** 
 474:.././hal/stm32f3/CMSIS/core/core_cm4.h **** 
 475:.././hal/stm32f3/CMSIS/core/core_cm4.h **** /**
 476:.././hal/stm32f3/CMSIS/core/core_cm4.h ****   \ingroup  CMSIS_core_register
 477:.././hal/stm32f3/CMSIS/core/core_cm4.h ****   \defgroup CMSIS_SCB     System Control Block (SCB)
 478:.././hal/stm32f3/CMSIS/core/core_cm4.h ****   \brief    Type definitions for the System Control Block Registers
 479:.././hal/stm32f3/CMSIS/core/core_cm4.h ****   @{
 480:.././hal/stm32f3/CMSIS/core/core_cm4.h ****  */
 481:.././hal/stm32f3/CMSIS/core/core_cm4.h **** 
 482:.././hal/stm32f3/CMSIS/core/core_cm4.h **** /**
 483:.././hal/stm32f3/CMSIS/core/core_cm4.h ****   \brief  Structure type to access the System Control Block (SCB).
 484:.././hal/stm32f3/CMSIS/core/core_cm4.h ****  */
 485:.././hal/stm32f3/CMSIS/core/core_cm4.h **** typedef struct
 486:.././hal/stm32f3/CMSIS/core/core_cm4.h **** {
 487:.././hal/stm32f3/CMSIS/core/core_cm4.h ****   __IM  uint32_t CPUID;                  /*!< Offset: 0x000 (R/ )  CPUID Base Register */
 488:.././hal/stm32f3/CMSIS/core/core_cm4.h ****   __IOM uint32_t ICSR;                   /*!< Offset: 0x004 (R/W)  Interrupt Control and State Regi
 489:.././hal/stm32f3/CMSIS/core/core_cm4.h ****   __IOM uint32_t VTOR;                   /*!< Offset: 0x008 (R/W)  Vector Table Offset Register */
 490:.././hal/stm32f3/CMSIS/core/core_cm4.h ****   __IOM uint32_t AIRCR;                  /*!< Offset: 0x00C (R/W)  Application Interrupt and Reset 
 491:.././hal/stm32f3/CMSIS/core/core_cm4.h ****   __IOM uint32_t SCR;                    /*!< Offset: 0x010 (R/W)  System Control Register */
 492:.././hal/stm32f3/CMSIS/core/core_cm4.h ****   __IOM uint32_t CCR;                    /*!< Offset: 0x014 (R/W)  Configuration Control Register *
 493:.././hal/stm32f3/CMSIS/core/core_cm4.h ****   __IOM uint8_t  SHP[12U];               /*!< Offset: 0x018 (R/W)  System Handlers Priority Registe
 494:.././hal/stm32f3/CMSIS/core/core_cm4.h ****   __IOM uint32_t SHCSR;                  /*!< Offset: 0x024 (R/W)  System Handler Control and State
 495:.././hal/stm32f3/CMSIS/core/core_cm4.h ****   __IOM uint32_t CFSR;                   /*!< Offset: 0x028 (R/W)  Configurable Fault Status Regist
 496:.././hal/stm32f3/CMSIS/core/core_cm4.h ****   __IOM uint32_t HFSR;                   /*!< Offset: 0x02C (R/W)  HardFault Status Register */
 497:.././hal/stm32f3/CMSIS/core/core_cm4.h ****   __IOM uint32_t DFSR;                   /*!< Offset: 0x030 (R/W)  Debug Fault Status Register */
 498:.././hal/stm32f3/CMSIS/core/core_cm4.h ****   __IOM uint32_t MMFAR;                  /*!< Offset: 0x034 (R/W)  MemManage Fault Address Register
 499:.././hal/stm32f3/CMSIS/core/core_cm4.h ****   __IOM uint32_t BFAR;                   /*!< Offset: 0x038 (R/W)  BusFault Address Register */
 500:.././hal/stm32f3/CMSIS/core/core_cm4.h ****   __IOM uint32_t AFSR;                   /*!< Offset: 0x03C (R/W)  Auxiliary Fault Status Register 
 501:.././hal/stm32f3/CMSIS/core/core_cm4.h ****   __IM  uint32_t PFR[2U];                /*!< Offset: 0x040 (R/ )  Processor Feature Register */
 502:.././hal/stm32f3/CMSIS/core/core_cm4.h ****   __IM  uint32_t DFR;                    /*!< Offset: 0x048 (R/ )  Debug Feature Register */
 503:.././hal/stm32f3/CMSIS/core/core_cm4.h ****   __IM  uint32_t ADR;                    /*!< Offset: 0x04C (R/ )  Auxiliary Feature Register */
 504:.././hal/stm32f3/CMSIS/core/core_cm4.h ****   __IM  uint32_t MMFR[4U];               /*!< Offset: 0x050 (R/ )  Memory Model Feature Register */
 505:.././hal/stm32f3/CMSIS/core/core_cm4.h ****   __IM  uint32_t ISAR[5U];               /*!< Offset: 0x060 (R/ )  Instruction Set Attributes Regis
 506:.././hal/stm32f3/CMSIS/core/core_cm4.h ****         uint32_t RESERVED0[5U];
 507:.././hal/stm32f3/CMSIS/core/core_cm4.h ****   __IOM uint32_t CPACR;                  /*!< Offset: 0x088 (R/W)  Coprocessor Access Control Regis
 508:.././hal/stm32f3/CMSIS/core/core_cm4.h **** } SCB_Type;
 509:.././hal/stm32f3/CMSIS/core/core_cm4.h **** 
 510:.././hal/stm32f3/CMSIS/core/core_cm4.h **** /* SCB CPUID Register Definitions */
 511:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define SCB_CPUID_IMPLEMENTER_Pos          24U                                            /*!< SCB 
 512:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define SCB_CPUID_IMPLEMENTER_Msk          (0xFFUL << SCB_CPUID_IMPLEMENTER_Pos)          /*!< SCB 
 513:.././hal/stm32f3/CMSIS/core/core_cm4.h **** 
 514:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define SCB_CPUID_VARIANT_Pos              20U                                            /*!< SCB 
 515:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define SCB_CPUID_VARIANT_Msk              (0xFUL << SCB_CPUID_VARIANT_Pos)               /*!< SCB 
 516:.././hal/stm32f3/CMSIS/core/core_cm4.h **** 
 517:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define SCB_CPUID_ARCHITECTURE_Pos         16U                                            /*!< SCB 
 518:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define SCB_CPUID_ARCHITECTURE_Msk         (0xFUL << SCB_CPUID_ARCHITECTURE_Pos)          /*!< SCB 
 519:.././hal/stm32f3/CMSIS/core/core_cm4.h **** 
 520:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define SCB_CPUID_PARTNO_Pos                4U                                            /*!< SCB 
 521:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define SCB_CPUID_PARTNO_Msk               (0xFFFUL << SCB_CPUID_PARTNO_Pos)              /*!< SCB 
 522:.././hal/stm32f3/CMSIS/core/core_cm4.h **** 
 523:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define SCB_CPUID_REVISION_Pos              0U                                            /*!< SCB 
 524:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define SCB_CPUID_REVISION_Msk             (0xFUL /*<< SCB_CPUID_REVISION_Pos*/)          /*!< SCB 
 525:.././hal/stm32f3/CMSIS/core/core_cm4.h **** 
 526:.././hal/stm32f3/CMSIS/core/core_cm4.h **** /* SCB Interrupt Control State Register Definitions */
 527:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define SCB_ICSR_NMIPENDSET_Pos            31U                                            /*!< SCB 
 528:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define SCB_ICSR_NMIPENDSET_Msk            (1UL << SCB_ICSR_NMIPENDSET_Pos)               /*!< SCB 
 529:.././hal/stm32f3/CMSIS/core/core_cm4.h **** 
 530:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define SCB_ICSR_PENDSVSET_Pos             28U                                            /*!< SCB 
 531:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define SCB_ICSR_PENDSVSET_Msk             (1UL << SCB_ICSR_PENDSVSET_Pos)                /*!< SCB 
 532:.././hal/stm32f3/CMSIS/core/core_cm4.h **** 
 533:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define SCB_ICSR_PENDSVCLR_Pos             27U                                            /*!< SCB 
 534:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define SCB_ICSR_PENDSVCLR_Msk             (1UL << SCB_ICSR_PENDSVCLR_Pos)                /*!< SCB 
 535:.././hal/stm32f3/CMSIS/core/core_cm4.h **** 
 536:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define SCB_ICSR_PENDSTSET_Pos             26U                                            /*!< SCB 
 537:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define SCB_ICSR_PENDSTSET_Msk             (1UL << SCB_ICSR_PENDSTSET_Pos)                /*!< SCB 
 538:.././hal/stm32f3/CMSIS/core/core_cm4.h **** 
 539:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define SCB_ICSR_PENDSTCLR_Pos             25U                                            /*!< SCB 
 540:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define SCB_ICSR_PENDSTCLR_Msk             (1UL << SCB_ICSR_PENDSTCLR_Pos)                /*!< SCB 
 541:.././hal/stm32f3/CMSIS/core/core_cm4.h **** 
 542:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define SCB_ICSR_ISRPREEMPT_Pos            23U                                            /*!< SCB 
 543:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define SCB_ICSR_ISRPREEMPT_Msk            (1UL << SCB_ICSR_ISRPREEMPT_Pos)               /*!< SCB 
 544:.././hal/stm32f3/CMSIS/core/core_cm4.h **** 
 545:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define SCB_ICSR_ISRPENDING_Pos            22U                                            /*!< SCB 
 546:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define SCB_ICSR_ISRPENDING_Msk            (1UL << SCB_ICSR_ISRPENDING_Pos)               /*!< SCB 
 547:.././hal/stm32f3/CMSIS/core/core_cm4.h **** 
 548:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define SCB_ICSR_VECTPENDING_Pos           12U                                            /*!< SCB 
 549:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define SCB_ICSR_VECTPENDING_Msk           (0x1FFUL << SCB_ICSR_VECTPENDING_Pos)          /*!< SCB 
 550:.././hal/stm32f3/CMSIS/core/core_cm4.h **** 
 551:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define SCB_ICSR_RETTOBASE_Pos             11U                                            /*!< SCB 
 552:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define SCB_ICSR_RETTOBASE_Msk             (1UL << SCB_ICSR_RETTOBASE_Pos)                /*!< SCB 
 553:.././hal/stm32f3/CMSIS/core/core_cm4.h **** 
 554:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define SCB_ICSR_VECTACTIVE_Pos             0U                                            /*!< SCB 
 555:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define SCB_ICSR_VECTACTIVE_Msk            (0x1FFUL /*<< SCB_ICSR_VECTACTIVE_Pos*/)       /*!< SCB 
 556:.././hal/stm32f3/CMSIS/core/core_cm4.h **** 
 557:.././hal/stm32f3/CMSIS/core/core_cm4.h **** /* SCB Vector Table Offset Register Definitions */
 558:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define SCB_VTOR_TBLOFF_Pos                 7U                                            /*!< SCB 
 559:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define SCB_VTOR_TBLOFF_Msk                (0x1FFFFFFUL << SCB_VTOR_TBLOFF_Pos)           /*!< SCB 
 560:.././hal/stm32f3/CMSIS/core/core_cm4.h **** 
 561:.././hal/stm32f3/CMSIS/core/core_cm4.h **** /* SCB Application Interrupt and Reset Control Register Definitions */
 562:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define SCB_AIRCR_VECTKEY_Pos              16U                                            /*!< SCB 
 563:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define SCB_AIRCR_VECTKEY_Msk              (0xFFFFUL << SCB_AIRCR_VECTKEY_Pos)            /*!< SCB 
 564:.././hal/stm32f3/CMSIS/core/core_cm4.h **** 
 565:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define SCB_AIRCR_VECTKEYSTAT_Pos          16U                                            /*!< SCB 
 566:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define SCB_AIRCR_VECTKEYSTAT_Msk          (0xFFFFUL << SCB_AIRCR_VECTKEYSTAT_Pos)        /*!< SCB 
 567:.././hal/stm32f3/CMSIS/core/core_cm4.h **** 
 568:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define SCB_AIRCR_ENDIANESS_Pos            15U                                            /*!< SCB 
 569:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define SCB_AIRCR_ENDIANESS_Msk            (1UL << SCB_AIRCR_ENDIANESS_Pos)               /*!< SCB 
 570:.././hal/stm32f3/CMSIS/core/core_cm4.h **** 
 571:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define SCB_AIRCR_PRIGROUP_Pos              8U                                            /*!< SCB 
 572:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define SCB_AIRCR_PRIGROUP_Msk             (7UL << SCB_AIRCR_PRIGROUP_Pos)                /*!< SCB 
 573:.././hal/stm32f3/CMSIS/core/core_cm4.h **** 
 574:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define SCB_AIRCR_SYSRESETREQ_Pos           2U                                            /*!< SCB 
 575:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define SCB_AIRCR_SYSRESETREQ_Msk          (1UL << SCB_AIRCR_SYSRESETREQ_Pos)             /*!< SCB 
 576:.././hal/stm32f3/CMSIS/core/core_cm4.h **** 
 577:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define SCB_AIRCR_VECTCLRACTIVE_Pos         1U                                            /*!< SCB 
 578:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define SCB_AIRCR_VECTCLRACTIVE_Msk        (1UL << SCB_AIRCR_VECTCLRACTIVE_Pos)           /*!< SCB 
 579:.././hal/stm32f3/CMSIS/core/core_cm4.h **** 
 580:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define SCB_AIRCR_VECTRESET_Pos             0U                                            /*!< SCB 
 581:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define SCB_AIRCR_VECTRESET_Msk            (1UL /*<< SCB_AIRCR_VECTRESET_Pos*/)           /*!< SCB 
 582:.././hal/stm32f3/CMSIS/core/core_cm4.h **** 
 583:.././hal/stm32f3/CMSIS/core/core_cm4.h **** /* SCB System Control Register Definitions */
 584:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define SCB_SCR_SEVONPEND_Pos               4U                                            /*!< SCB 
 585:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define SCB_SCR_SEVONPEND_Msk              (1UL << SCB_SCR_SEVONPEND_Pos)                 /*!< SCB 
 586:.././hal/stm32f3/CMSIS/core/core_cm4.h **** 
 587:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define SCB_SCR_SLEEPDEEP_Pos               2U                                            /*!< SCB 
 588:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define SCB_SCR_SLEEPDEEP_Msk              (1UL << SCB_SCR_SLEEPDEEP_Pos)                 /*!< SCB 
 589:.././hal/stm32f3/CMSIS/core/core_cm4.h **** 
 590:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define SCB_SCR_SLEEPONEXIT_Pos             1U                                            /*!< SCB 
 591:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define SCB_SCR_SLEEPONEXIT_Msk            (1UL << SCB_SCR_SLEEPONEXIT_Pos)               /*!< SCB 
 592:.././hal/stm32f3/CMSIS/core/core_cm4.h **** 
 593:.././hal/stm32f3/CMSIS/core/core_cm4.h **** /* SCB Configuration Control Register Definitions */
 594:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define SCB_CCR_STKALIGN_Pos                9U                                            /*!< SCB 
 595:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define SCB_CCR_STKALIGN_Msk               (1UL << SCB_CCR_STKALIGN_Pos)                  /*!< SCB 
 596:.././hal/stm32f3/CMSIS/core/core_cm4.h **** 
 597:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define SCB_CCR_BFHFNMIGN_Pos               8U                                            /*!< SCB 
 598:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define SCB_CCR_BFHFNMIGN_Msk              (1UL << SCB_CCR_BFHFNMIGN_Pos)                 /*!< SCB 
 599:.././hal/stm32f3/CMSIS/core/core_cm4.h **** 
 600:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define SCB_CCR_DIV_0_TRP_Pos               4U                                            /*!< SCB 
 601:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define SCB_CCR_DIV_0_TRP_Msk              (1UL << SCB_CCR_DIV_0_TRP_Pos)                 /*!< SCB 
 602:.././hal/stm32f3/CMSIS/core/core_cm4.h **** 
 603:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define SCB_CCR_UNALIGN_TRP_Pos             3U                                            /*!< SCB 
 604:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define SCB_CCR_UNALIGN_TRP_Msk            (1UL << SCB_CCR_UNALIGN_TRP_Pos)               /*!< SCB 
 605:.././hal/stm32f3/CMSIS/core/core_cm4.h **** 
 606:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define SCB_CCR_USERSETMPEND_Pos            1U                                            /*!< SCB 
 607:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define SCB_CCR_USERSETMPEND_Msk           (1UL << SCB_CCR_USERSETMPEND_Pos)              /*!< SCB 
 608:.././hal/stm32f3/CMSIS/core/core_cm4.h **** 
 609:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define SCB_CCR_NONBASETHRDENA_Pos          0U                                            /*!< SCB 
 610:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define SCB_CCR_NONBASETHRDENA_Msk         (1UL /*<< SCB_CCR_NONBASETHRDENA_Pos*/)        /*!< SCB 
 611:.././hal/stm32f3/CMSIS/core/core_cm4.h **** 
 612:.././hal/stm32f3/CMSIS/core/core_cm4.h **** /* SCB System Handler Control and State Register Definitions */
 613:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define SCB_SHCSR_USGFAULTENA_Pos          18U                                            /*!< SCB 
 614:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define SCB_SHCSR_USGFAULTENA_Msk          (1UL << SCB_SHCSR_USGFAULTENA_Pos)             /*!< SCB 
 615:.././hal/stm32f3/CMSIS/core/core_cm4.h **** 
 616:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define SCB_SHCSR_BUSFAULTENA_Pos          17U                                            /*!< SCB 
 617:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define SCB_SHCSR_BUSFAULTENA_Msk          (1UL << SCB_SHCSR_BUSFAULTENA_Pos)             /*!< SCB 
 618:.././hal/stm32f3/CMSIS/core/core_cm4.h **** 
 619:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define SCB_SHCSR_MEMFAULTENA_Pos          16U                                            /*!< SCB 
 620:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define SCB_SHCSR_MEMFAULTENA_Msk          (1UL << SCB_SHCSR_MEMFAULTENA_Pos)             /*!< SCB 
 621:.././hal/stm32f3/CMSIS/core/core_cm4.h **** 
 622:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define SCB_SHCSR_SVCALLPENDED_Pos         15U                                            /*!< SCB 
 623:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define SCB_SHCSR_SVCALLPENDED_Msk         (1UL << SCB_SHCSR_SVCALLPENDED_Pos)            /*!< SCB 
 624:.././hal/stm32f3/CMSIS/core/core_cm4.h **** 
 625:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define SCB_SHCSR_BUSFAULTPENDED_Pos       14U                                            /*!< SCB 
 626:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define SCB_SHCSR_BUSFAULTPENDED_Msk       (1UL << SCB_SHCSR_BUSFAULTPENDED_Pos)          /*!< SCB 
 627:.././hal/stm32f3/CMSIS/core/core_cm4.h **** 
 628:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define SCB_SHCSR_MEMFAULTPENDED_Pos       13U                                            /*!< SCB 
 629:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define SCB_SHCSR_MEMFAULTPENDED_Msk       (1UL << SCB_SHCSR_MEMFAULTPENDED_Pos)          /*!< SCB 
 630:.././hal/stm32f3/CMSIS/core/core_cm4.h **** 
 631:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define SCB_SHCSR_USGFAULTPENDED_Pos       12U                                            /*!< SCB 
 632:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define SCB_SHCSR_USGFAULTPENDED_Msk       (1UL << SCB_SHCSR_USGFAULTPENDED_Pos)          /*!< SCB 
 633:.././hal/stm32f3/CMSIS/core/core_cm4.h **** 
 634:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define SCB_SHCSR_SYSTICKACT_Pos           11U                                            /*!< SCB 
 635:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define SCB_SHCSR_SYSTICKACT_Msk           (1UL << SCB_SHCSR_SYSTICKACT_Pos)              /*!< SCB 
 636:.././hal/stm32f3/CMSIS/core/core_cm4.h **** 
 637:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define SCB_SHCSR_PENDSVACT_Pos            10U                                            /*!< SCB 
 638:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define SCB_SHCSR_PENDSVACT_Msk            (1UL << SCB_SHCSR_PENDSVACT_Pos)               /*!< SCB 
 639:.././hal/stm32f3/CMSIS/core/core_cm4.h **** 
 640:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define SCB_SHCSR_MONITORACT_Pos            8U                                            /*!< SCB 
 641:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define SCB_SHCSR_MONITORACT_Msk           (1UL << SCB_SHCSR_MONITORACT_Pos)              /*!< SCB 
 642:.././hal/stm32f3/CMSIS/core/core_cm4.h **** 
 643:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define SCB_SHCSR_SVCALLACT_Pos             7U                                            /*!< SCB 
 644:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define SCB_SHCSR_SVCALLACT_Msk            (1UL << SCB_SHCSR_SVCALLACT_Pos)               /*!< SCB 
 645:.././hal/stm32f3/CMSIS/core/core_cm4.h **** 
 646:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define SCB_SHCSR_USGFAULTACT_Pos           3U                                            /*!< SCB 
 647:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define SCB_SHCSR_USGFAULTACT_Msk          (1UL << SCB_SHCSR_USGFAULTACT_Pos)             /*!< SCB 
 648:.././hal/stm32f3/CMSIS/core/core_cm4.h **** 
 649:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define SCB_SHCSR_BUSFAULTACT_Pos           1U                                            /*!< SCB 
 650:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define SCB_SHCSR_BUSFAULTACT_Msk          (1UL << SCB_SHCSR_BUSFAULTACT_Pos)             /*!< SCB 
 651:.././hal/stm32f3/CMSIS/core/core_cm4.h **** 
 652:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define SCB_SHCSR_MEMFAULTACT_Pos           0U                                            /*!< SCB 
 653:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define SCB_SHCSR_MEMFAULTACT_Msk          (1UL /*<< SCB_SHCSR_MEMFAULTACT_Pos*/)         /*!< SCB 
 654:.././hal/stm32f3/CMSIS/core/core_cm4.h **** 
 655:.././hal/stm32f3/CMSIS/core/core_cm4.h **** /* SCB Configurable Fault Status Register Definitions */
 656:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define SCB_CFSR_USGFAULTSR_Pos            16U                                            /*!< SCB 
 657:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define SCB_CFSR_USGFAULTSR_Msk            (0xFFFFUL << SCB_CFSR_USGFAULTSR_Pos)          /*!< SCB 
 658:.././hal/stm32f3/CMSIS/core/core_cm4.h **** 
 659:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define SCB_CFSR_BUSFAULTSR_Pos             8U                                            /*!< SCB 
 660:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define SCB_CFSR_BUSFAULTSR_Msk            (0xFFUL << SCB_CFSR_BUSFAULTSR_Pos)            /*!< SCB 
 661:.././hal/stm32f3/CMSIS/core/core_cm4.h **** 
 662:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define SCB_CFSR_MEMFAULTSR_Pos             0U                                            /*!< SCB 
 663:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define SCB_CFSR_MEMFAULTSR_Msk            (0xFFUL /*<< SCB_CFSR_MEMFAULTSR_Pos*/)        /*!< SCB 
 664:.././hal/stm32f3/CMSIS/core/core_cm4.h **** 
 665:.././hal/stm32f3/CMSIS/core/core_cm4.h **** /* SCB Hard Fault Status Register Definitions */
 666:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define SCB_HFSR_DEBUGEVT_Pos              31U                                            /*!< SCB 
 667:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define SCB_HFSR_DEBUGEVT_Msk              (1UL << SCB_HFSR_DEBUGEVT_Pos)                 /*!< SCB 
 668:.././hal/stm32f3/CMSIS/core/core_cm4.h **** 
 669:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define SCB_HFSR_FORCED_Pos                30U                                            /*!< SCB 
 670:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define SCB_HFSR_FORCED_Msk                (1UL << SCB_HFSR_FORCED_Pos)                   /*!< SCB 
 671:.././hal/stm32f3/CMSIS/core/core_cm4.h **** 
 672:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define SCB_HFSR_VECTTBL_Pos                1U                                            /*!< SCB 
 673:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define SCB_HFSR_VECTTBL_Msk               (1UL << SCB_HFSR_VECTTBL_Pos)                  /*!< SCB 
 674:.././hal/stm32f3/CMSIS/core/core_cm4.h **** 
 675:.././hal/stm32f3/CMSIS/core/core_cm4.h **** /* SCB Debug Fault Status Register Definitions */
 676:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define SCB_DFSR_EXTERNAL_Pos               4U                                            /*!< SCB 
 677:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define SCB_DFSR_EXTERNAL_Msk              (1UL << SCB_DFSR_EXTERNAL_Pos)                 /*!< SCB 
 678:.././hal/stm32f3/CMSIS/core/core_cm4.h **** 
 679:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define SCB_DFSR_VCATCH_Pos                 3U                                            /*!< SCB 
 680:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define SCB_DFSR_VCATCH_Msk                (1UL << SCB_DFSR_VCATCH_Pos)                   /*!< SCB 
 681:.././hal/stm32f3/CMSIS/core/core_cm4.h **** 
 682:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define SCB_DFSR_DWTTRAP_Pos                2U                                            /*!< SCB 
 683:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define SCB_DFSR_DWTTRAP_Msk               (1UL << SCB_DFSR_DWTTRAP_Pos)                  /*!< SCB 
 684:.././hal/stm32f3/CMSIS/core/core_cm4.h **** 
 685:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define SCB_DFSR_BKPT_Pos                   1U                                            /*!< SCB 
 686:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define SCB_DFSR_BKPT_Msk                  (1UL << SCB_DFSR_BKPT_Pos)                     /*!< SCB 
 687:.././hal/stm32f3/CMSIS/core/core_cm4.h **** 
 688:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define SCB_DFSR_HALTED_Pos                 0U                                            /*!< SCB 
 689:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define SCB_DFSR_HALTED_Msk                (1UL /*<< SCB_DFSR_HALTED_Pos*/)               /*!< SCB 
 690:.././hal/stm32f3/CMSIS/core/core_cm4.h **** 
 691:.././hal/stm32f3/CMSIS/core/core_cm4.h **** /*@} end of group CMSIS_SCB */
 692:.././hal/stm32f3/CMSIS/core/core_cm4.h **** 
 693:.././hal/stm32f3/CMSIS/core/core_cm4.h **** 
 694:.././hal/stm32f3/CMSIS/core/core_cm4.h **** /**
 695:.././hal/stm32f3/CMSIS/core/core_cm4.h ****   \ingroup  CMSIS_core_register
 696:.././hal/stm32f3/CMSIS/core/core_cm4.h ****   \defgroup CMSIS_SCnSCB System Controls not in SCB (SCnSCB)
 697:.././hal/stm32f3/CMSIS/core/core_cm4.h ****   \brief    Type definitions for the System Control and ID Register not in the SCB
 698:.././hal/stm32f3/CMSIS/core/core_cm4.h ****   @{
 699:.././hal/stm32f3/CMSIS/core/core_cm4.h ****  */
 700:.././hal/stm32f3/CMSIS/core/core_cm4.h **** 
 701:.././hal/stm32f3/CMSIS/core/core_cm4.h **** /**
 702:.././hal/stm32f3/CMSIS/core/core_cm4.h ****   \brief  Structure type to access the System Control and ID Register not in the SCB.
 703:.././hal/stm32f3/CMSIS/core/core_cm4.h ****  */
 704:.././hal/stm32f3/CMSIS/core/core_cm4.h **** typedef struct
 705:.././hal/stm32f3/CMSIS/core/core_cm4.h **** {
 706:.././hal/stm32f3/CMSIS/core/core_cm4.h ****         uint32_t RESERVED0[1U];
 707:.././hal/stm32f3/CMSIS/core/core_cm4.h ****   __IM  uint32_t ICTR;                   /*!< Offset: 0x004 (R/ )  Interrupt Controller Type Regist
 708:.././hal/stm32f3/CMSIS/core/core_cm4.h ****   __IOM uint32_t ACTLR;                  /*!< Offset: 0x008 (R/W)  Auxiliary Control Register */
 709:.././hal/stm32f3/CMSIS/core/core_cm4.h **** } SCnSCB_Type;
 710:.././hal/stm32f3/CMSIS/core/core_cm4.h **** 
 711:.././hal/stm32f3/CMSIS/core/core_cm4.h **** /* Interrupt Controller Type Register Definitions */
 712:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define SCnSCB_ICTR_INTLINESNUM_Pos         0U                                         /*!< ICTR: I
 713:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define SCnSCB_ICTR_INTLINESNUM_Msk        (0xFUL /*<< SCnSCB_ICTR_INTLINESNUM_Pos*/)  /*!< ICTR: I
 714:.././hal/stm32f3/CMSIS/core/core_cm4.h **** 
 715:.././hal/stm32f3/CMSIS/core/core_cm4.h **** /* Auxiliary Control Register Definitions */
 716:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define SCnSCB_ACTLR_DISOOFP_Pos            9U                                         /*!< ACTLR: 
 717:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define SCnSCB_ACTLR_DISOOFP_Msk           (1UL << SCnSCB_ACTLR_DISOOFP_Pos)           /*!< ACTLR: 
 718:.././hal/stm32f3/CMSIS/core/core_cm4.h **** 
 719:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define SCnSCB_ACTLR_DISFPCA_Pos            8U                                         /*!< ACTLR: 
 720:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define SCnSCB_ACTLR_DISFPCA_Msk           (1UL << SCnSCB_ACTLR_DISFPCA_Pos)           /*!< ACTLR: 
 721:.././hal/stm32f3/CMSIS/core/core_cm4.h **** 
 722:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define SCnSCB_ACTLR_DISFOLD_Pos            2U                                         /*!< ACTLR: 
 723:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define SCnSCB_ACTLR_DISFOLD_Msk           (1UL << SCnSCB_ACTLR_DISFOLD_Pos)           /*!< ACTLR: 
 724:.././hal/stm32f3/CMSIS/core/core_cm4.h **** 
 725:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define SCnSCB_ACTLR_DISDEFWBUF_Pos         1U                                         /*!< ACTLR: 
 726:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define SCnSCB_ACTLR_DISDEFWBUF_Msk        (1UL << SCnSCB_ACTLR_DISDEFWBUF_Pos)        /*!< ACTLR: 
 727:.././hal/stm32f3/CMSIS/core/core_cm4.h **** 
 728:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define SCnSCB_ACTLR_DISMCYCINT_Pos         0U                                         /*!< ACTLR: 
 729:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define SCnSCB_ACTLR_DISMCYCINT_Msk        (1UL /*<< SCnSCB_ACTLR_DISMCYCINT_Pos*/)    /*!< ACTLR: 
 730:.././hal/stm32f3/CMSIS/core/core_cm4.h **** 
 731:.././hal/stm32f3/CMSIS/core/core_cm4.h **** /*@} end of group CMSIS_SCnotSCB */
 732:.././hal/stm32f3/CMSIS/core/core_cm4.h **** 
 733:.././hal/stm32f3/CMSIS/core/core_cm4.h **** 
 734:.././hal/stm32f3/CMSIS/core/core_cm4.h **** /**
 735:.././hal/stm32f3/CMSIS/core/core_cm4.h ****   \ingroup  CMSIS_core_register
 736:.././hal/stm32f3/CMSIS/core/core_cm4.h ****   \defgroup CMSIS_SysTick     System Tick Timer (SysTick)
 737:.././hal/stm32f3/CMSIS/core/core_cm4.h ****   \brief    Type definitions for the System Timer Registers.
 738:.././hal/stm32f3/CMSIS/core/core_cm4.h ****   @{
 739:.././hal/stm32f3/CMSIS/core/core_cm4.h ****  */
 740:.././hal/stm32f3/CMSIS/core/core_cm4.h **** 
 741:.././hal/stm32f3/CMSIS/core/core_cm4.h **** /**
 742:.././hal/stm32f3/CMSIS/core/core_cm4.h ****   \brief  Structure type to access the System Timer (SysTick).
 743:.././hal/stm32f3/CMSIS/core/core_cm4.h ****  */
 744:.././hal/stm32f3/CMSIS/core/core_cm4.h **** typedef struct
 745:.././hal/stm32f3/CMSIS/core/core_cm4.h **** {
 746:.././hal/stm32f3/CMSIS/core/core_cm4.h ****   __IOM uint32_t CTRL;                   /*!< Offset: 0x000 (R/W)  SysTick Control and Status Regis
 747:.././hal/stm32f3/CMSIS/core/core_cm4.h ****   __IOM uint32_t LOAD;                   /*!< Offset: 0x004 (R/W)  SysTick Reload Value Register */
 748:.././hal/stm32f3/CMSIS/core/core_cm4.h ****   __IOM uint32_t VAL;                    /*!< Offset: 0x008 (R/W)  SysTick Current Value Register *
 749:.././hal/stm32f3/CMSIS/core/core_cm4.h ****   __IM  uint32_t CALIB;                  /*!< Offset: 0x00C (R/ )  SysTick Calibration Register */
 750:.././hal/stm32f3/CMSIS/core/core_cm4.h **** } SysTick_Type;
 751:.././hal/stm32f3/CMSIS/core/core_cm4.h **** 
 752:.././hal/stm32f3/CMSIS/core/core_cm4.h **** /* SysTick Control / Status Register Definitions */
 753:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define SysTick_CTRL_COUNTFLAG_Pos         16U                                            /*!< SysT
 754:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define SysTick_CTRL_COUNTFLAG_Msk         (1UL << SysTick_CTRL_COUNTFLAG_Pos)            /*!< SysT
 755:.././hal/stm32f3/CMSIS/core/core_cm4.h **** 
 756:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define SysTick_CTRL_CLKSOURCE_Pos          2U                                            /*!< SysT
 757:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define SysTick_CTRL_CLKSOURCE_Msk         (1UL << SysTick_CTRL_CLKSOURCE_Pos)            /*!< SysT
 758:.././hal/stm32f3/CMSIS/core/core_cm4.h **** 
 759:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define SysTick_CTRL_TICKINT_Pos            1U                                            /*!< SysT
 760:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define SysTick_CTRL_TICKINT_Msk           (1UL << SysTick_CTRL_TICKINT_Pos)              /*!< SysT
 761:.././hal/stm32f3/CMSIS/core/core_cm4.h **** 
 762:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define SysTick_CTRL_ENABLE_Pos             0U                                            /*!< SysT
 763:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define SysTick_CTRL_ENABLE_Msk            (1UL /*<< SysTick_CTRL_ENABLE_Pos*/)           /*!< SysT
 764:.././hal/stm32f3/CMSIS/core/core_cm4.h **** 
 765:.././hal/stm32f3/CMSIS/core/core_cm4.h **** /* SysTick Reload Register Definitions */
 766:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define SysTick_LOAD_RELOAD_Pos             0U                                            /*!< SysT
 767:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define SysTick_LOAD_RELOAD_Msk            (0xFFFFFFUL /*<< SysTick_LOAD_RELOAD_Pos*/)    /*!< SysT
 768:.././hal/stm32f3/CMSIS/core/core_cm4.h **** 
 769:.././hal/stm32f3/CMSIS/core/core_cm4.h **** /* SysTick Current Register Definitions */
 770:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define SysTick_VAL_CURRENT_Pos             0U                                            /*!< SysT
 771:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define SysTick_VAL_CURRENT_Msk            (0xFFFFFFUL /*<< SysTick_VAL_CURRENT_Pos*/)    /*!< SysT
 772:.././hal/stm32f3/CMSIS/core/core_cm4.h **** 
 773:.././hal/stm32f3/CMSIS/core/core_cm4.h **** /* SysTick Calibration Register Definitions */
 774:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define SysTick_CALIB_NOREF_Pos            31U                                            /*!< SysT
 775:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define SysTick_CALIB_NOREF_Msk            (1UL << SysTick_CALIB_NOREF_Pos)               /*!< SysT
 776:.././hal/stm32f3/CMSIS/core/core_cm4.h **** 
 777:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define SysTick_CALIB_SKEW_Pos             30U                                            /*!< SysT
 778:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define SysTick_CALIB_SKEW_Msk             (1UL << SysTick_CALIB_SKEW_Pos)                /*!< SysT
 779:.././hal/stm32f3/CMSIS/core/core_cm4.h **** 
 780:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define SysTick_CALIB_TENMS_Pos             0U                                            /*!< SysT
 781:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define SysTick_CALIB_TENMS_Msk            (0xFFFFFFUL /*<< SysTick_CALIB_TENMS_Pos*/)    /*!< SysT
 782:.././hal/stm32f3/CMSIS/core/core_cm4.h **** 
 783:.././hal/stm32f3/CMSIS/core/core_cm4.h **** /*@} end of group CMSIS_SysTick */
 784:.././hal/stm32f3/CMSIS/core/core_cm4.h **** 
 785:.././hal/stm32f3/CMSIS/core/core_cm4.h **** 
 786:.././hal/stm32f3/CMSIS/core/core_cm4.h **** /**
 787:.././hal/stm32f3/CMSIS/core/core_cm4.h ****   \ingroup  CMSIS_core_register
 788:.././hal/stm32f3/CMSIS/core/core_cm4.h ****   \defgroup CMSIS_ITM     Instrumentation Trace Macrocell (ITM)
 789:.././hal/stm32f3/CMSIS/core/core_cm4.h ****   \brief    Type definitions for the Instrumentation Trace Macrocell (ITM)
 790:.././hal/stm32f3/CMSIS/core/core_cm4.h ****   @{
 791:.././hal/stm32f3/CMSIS/core/core_cm4.h ****  */
 792:.././hal/stm32f3/CMSIS/core/core_cm4.h **** 
 793:.././hal/stm32f3/CMSIS/core/core_cm4.h **** /**
 794:.././hal/stm32f3/CMSIS/core/core_cm4.h ****   \brief  Structure type to access the Instrumentation Trace Macrocell Register (ITM).
 795:.././hal/stm32f3/CMSIS/core/core_cm4.h ****  */
 796:.././hal/stm32f3/CMSIS/core/core_cm4.h **** typedef struct
 797:.././hal/stm32f3/CMSIS/core/core_cm4.h **** {
 798:.././hal/stm32f3/CMSIS/core/core_cm4.h ****   __OM  union
 799:.././hal/stm32f3/CMSIS/core/core_cm4.h ****   {
 800:.././hal/stm32f3/CMSIS/core/core_cm4.h ****     __OM  uint8_t    u8;                 /*!< Offset: 0x000 ( /W)  ITM Stimulus Port 8-bit */
 801:.././hal/stm32f3/CMSIS/core/core_cm4.h ****     __OM  uint16_t   u16;                /*!< Offset: 0x000 ( /W)  ITM Stimulus Port 16-bit */
 802:.././hal/stm32f3/CMSIS/core/core_cm4.h ****     __OM  uint32_t   u32;                /*!< Offset: 0x000 ( /W)  ITM Stimulus Port 32-bit */
 803:.././hal/stm32f3/CMSIS/core/core_cm4.h ****   }  PORT [32U];                         /*!< Offset: 0x000 ( /W)  ITM Stimulus Port Registers */
 804:.././hal/stm32f3/CMSIS/core/core_cm4.h ****         uint32_t RESERVED0[864U];
 805:.././hal/stm32f3/CMSIS/core/core_cm4.h ****   __IOM uint32_t TER;                    /*!< Offset: 0xE00 (R/W)  ITM Trace Enable Register */
 806:.././hal/stm32f3/CMSIS/core/core_cm4.h ****         uint32_t RESERVED1[15U];
 807:.././hal/stm32f3/CMSIS/core/core_cm4.h ****   __IOM uint32_t TPR;                    /*!< Offset: 0xE40 (R/W)  ITM Trace Privilege Register */
 808:.././hal/stm32f3/CMSIS/core/core_cm4.h ****         uint32_t RESERVED2[15U];
 809:.././hal/stm32f3/CMSIS/core/core_cm4.h ****   __IOM uint32_t TCR;                    /*!< Offset: 0xE80 (R/W)  ITM Trace Control Register */
 810:.././hal/stm32f3/CMSIS/core/core_cm4.h ****         uint32_t RESERVED3[29U];
 811:.././hal/stm32f3/CMSIS/core/core_cm4.h ****   __OM  uint32_t IWR;                    /*!< Offset: 0xEF8 ( /W)  ITM Integration Write Register *
 812:.././hal/stm32f3/CMSIS/core/core_cm4.h ****   __IM  uint32_t IRR;                    /*!< Offset: 0xEFC (R/ )  ITM Integration Read Register */
 813:.././hal/stm32f3/CMSIS/core/core_cm4.h ****   __IOM uint32_t IMCR;                   /*!< Offset: 0xF00 (R/W)  ITM Integration Mode Control Reg
 814:.././hal/stm32f3/CMSIS/core/core_cm4.h ****         uint32_t RESERVED4[43U];
 815:.././hal/stm32f3/CMSIS/core/core_cm4.h ****   __OM  uint32_t LAR;                    /*!< Offset: 0xFB0 ( /W)  ITM Lock Access Register */
 816:.././hal/stm32f3/CMSIS/core/core_cm4.h ****   __IM  uint32_t LSR;                    /*!< Offset: 0xFB4 (R/ )  ITM Lock Status Register */
 817:.././hal/stm32f3/CMSIS/core/core_cm4.h ****         uint32_t RESERVED5[6U];
 818:.././hal/stm32f3/CMSIS/core/core_cm4.h ****   __IM  uint32_t PID4;                   /*!< Offset: 0xFD0 (R/ )  ITM Peripheral Identification Re
 819:.././hal/stm32f3/CMSIS/core/core_cm4.h ****   __IM  uint32_t PID5;                   /*!< Offset: 0xFD4 (R/ )  ITM Peripheral Identification Re
 820:.././hal/stm32f3/CMSIS/core/core_cm4.h ****   __IM  uint32_t PID6;                   /*!< Offset: 0xFD8 (R/ )  ITM Peripheral Identification Re
 821:.././hal/stm32f3/CMSIS/core/core_cm4.h ****   __IM  uint32_t PID7;                   /*!< Offset: 0xFDC (R/ )  ITM Peripheral Identification Re
 822:.././hal/stm32f3/CMSIS/core/core_cm4.h ****   __IM  uint32_t PID0;                   /*!< Offset: 0xFE0 (R/ )  ITM Peripheral Identification Re
 823:.././hal/stm32f3/CMSIS/core/core_cm4.h ****   __IM  uint32_t PID1;                   /*!< Offset: 0xFE4 (R/ )  ITM Peripheral Identification Re
 824:.././hal/stm32f3/CMSIS/core/core_cm4.h ****   __IM  uint32_t PID2;                   /*!< Offset: 0xFE8 (R/ )  ITM Peripheral Identification Re
 825:.././hal/stm32f3/CMSIS/core/core_cm4.h ****   __IM  uint32_t PID3;                   /*!< Offset: 0xFEC (R/ )  ITM Peripheral Identification Re
 826:.././hal/stm32f3/CMSIS/core/core_cm4.h ****   __IM  uint32_t CID0;                   /*!< Offset: 0xFF0 (R/ )  ITM Component  Identification Re
 827:.././hal/stm32f3/CMSIS/core/core_cm4.h ****   __IM  uint32_t CID1;                   /*!< Offset: 0xFF4 (R/ )  ITM Component  Identification Re
 828:.././hal/stm32f3/CMSIS/core/core_cm4.h ****   __IM  uint32_t CID2;                   /*!< Offset: 0xFF8 (R/ )  ITM Component  Identification Re
 829:.././hal/stm32f3/CMSIS/core/core_cm4.h ****   __IM  uint32_t CID3;                   /*!< Offset: 0xFFC (R/ )  ITM Component  Identification Re
 830:.././hal/stm32f3/CMSIS/core/core_cm4.h **** } ITM_Type;
 831:.././hal/stm32f3/CMSIS/core/core_cm4.h **** 
 832:.././hal/stm32f3/CMSIS/core/core_cm4.h **** /* ITM Trace Privilege Register Definitions */
 833:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define ITM_TPR_PRIVMASK_Pos                0U                                            /*!< ITM 
 834:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define ITM_TPR_PRIVMASK_Msk               (0xFUL /*<< ITM_TPR_PRIVMASK_Pos*/)            /*!< ITM 
 835:.././hal/stm32f3/CMSIS/core/core_cm4.h **** 
 836:.././hal/stm32f3/CMSIS/core/core_cm4.h **** /* ITM Trace Control Register Definitions */
 837:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define ITM_TCR_BUSY_Pos                   23U                                            /*!< ITM 
 838:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define ITM_TCR_BUSY_Msk                   (1UL << ITM_TCR_BUSY_Pos)                      /*!< ITM 
 839:.././hal/stm32f3/CMSIS/core/core_cm4.h **** 
 840:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define ITM_TCR_TraceBusID_Pos             16U                                            /*!< ITM 
 841:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define ITM_TCR_TraceBusID_Msk             (0x7FUL << ITM_TCR_TraceBusID_Pos)             /*!< ITM 
 842:.././hal/stm32f3/CMSIS/core/core_cm4.h **** 
 843:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define ITM_TCR_GTSFREQ_Pos                10U                                            /*!< ITM 
 844:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define ITM_TCR_GTSFREQ_Msk                (3UL << ITM_TCR_GTSFREQ_Pos)                   /*!< ITM 
 845:.././hal/stm32f3/CMSIS/core/core_cm4.h **** 
 846:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define ITM_TCR_TSPrescale_Pos              8U                                            /*!< ITM 
 847:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define ITM_TCR_TSPrescale_Msk             (3UL << ITM_TCR_TSPrescale_Pos)                /*!< ITM 
 848:.././hal/stm32f3/CMSIS/core/core_cm4.h **** 
 849:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define ITM_TCR_SWOENA_Pos                  4U                                            /*!< ITM 
 850:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define ITM_TCR_SWOENA_Msk                 (1UL << ITM_TCR_SWOENA_Pos)                    /*!< ITM 
 851:.././hal/stm32f3/CMSIS/core/core_cm4.h **** 
 852:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define ITM_TCR_DWTENA_Pos                  3U                                            /*!< ITM 
 853:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define ITM_TCR_DWTENA_Msk                 (1UL << ITM_TCR_DWTENA_Pos)                    /*!< ITM 
 854:.././hal/stm32f3/CMSIS/core/core_cm4.h **** 
 855:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define ITM_TCR_SYNCENA_Pos                 2U                                            /*!< ITM 
 856:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define ITM_TCR_SYNCENA_Msk                (1UL << ITM_TCR_SYNCENA_Pos)                   /*!< ITM 
 857:.././hal/stm32f3/CMSIS/core/core_cm4.h **** 
 858:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define ITM_TCR_TSENA_Pos                   1U                                            /*!< ITM 
 859:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define ITM_TCR_TSENA_Msk                  (1UL << ITM_TCR_TSENA_Pos)                     /*!< ITM 
 860:.././hal/stm32f3/CMSIS/core/core_cm4.h **** 
 861:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define ITM_TCR_ITMENA_Pos                  0U                                            /*!< ITM 
 862:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define ITM_TCR_ITMENA_Msk                 (1UL /*<< ITM_TCR_ITMENA_Pos*/)                /*!< ITM 
 863:.././hal/stm32f3/CMSIS/core/core_cm4.h **** 
 864:.././hal/stm32f3/CMSIS/core/core_cm4.h **** /* ITM Integration Write Register Definitions */
 865:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define ITM_IWR_ATVALIDM_Pos                0U                                            /*!< ITM 
 866:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define ITM_IWR_ATVALIDM_Msk               (1UL /*<< ITM_IWR_ATVALIDM_Pos*/)              /*!< ITM 
 867:.././hal/stm32f3/CMSIS/core/core_cm4.h **** 
 868:.././hal/stm32f3/CMSIS/core/core_cm4.h **** /* ITM Integration Read Register Definitions */
 869:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define ITM_IRR_ATREADYM_Pos                0U                                            /*!< ITM 
 870:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define ITM_IRR_ATREADYM_Msk               (1UL /*<< ITM_IRR_ATREADYM_Pos*/)              /*!< ITM 
 871:.././hal/stm32f3/CMSIS/core/core_cm4.h **** 
 872:.././hal/stm32f3/CMSIS/core/core_cm4.h **** /* ITM Integration Mode Control Register Definitions */
 873:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define ITM_IMCR_INTEGRATION_Pos            0U                                            /*!< ITM 
 874:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define ITM_IMCR_INTEGRATION_Msk           (1UL /*<< ITM_IMCR_INTEGRATION_Pos*/)          /*!< ITM 
 875:.././hal/stm32f3/CMSIS/core/core_cm4.h **** 
 876:.././hal/stm32f3/CMSIS/core/core_cm4.h **** /* ITM Lock Status Register Definitions */
 877:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define ITM_LSR_ByteAcc_Pos                 2U                                            /*!< ITM 
 878:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define ITM_LSR_ByteAcc_Msk                (1UL << ITM_LSR_ByteAcc_Pos)                   /*!< ITM 
 879:.././hal/stm32f3/CMSIS/core/core_cm4.h **** 
 880:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define ITM_LSR_Access_Pos                  1U                                            /*!< ITM 
 881:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define ITM_LSR_Access_Msk                 (1UL << ITM_LSR_Access_Pos)                    /*!< ITM 
 882:.././hal/stm32f3/CMSIS/core/core_cm4.h **** 
 883:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define ITM_LSR_Present_Pos                 0U                                            /*!< ITM 
 884:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define ITM_LSR_Present_Msk                (1UL /*<< ITM_LSR_Present_Pos*/)               /*!< ITM 
 885:.././hal/stm32f3/CMSIS/core/core_cm4.h **** 
 886:.././hal/stm32f3/CMSIS/core/core_cm4.h **** /*@}*/ /* end of group CMSIS_ITM */
 887:.././hal/stm32f3/CMSIS/core/core_cm4.h **** 
 888:.././hal/stm32f3/CMSIS/core/core_cm4.h **** 
 889:.././hal/stm32f3/CMSIS/core/core_cm4.h **** /**
 890:.././hal/stm32f3/CMSIS/core/core_cm4.h ****   \ingroup  CMSIS_core_register
 891:.././hal/stm32f3/CMSIS/core/core_cm4.h ****   \defgroup CMSIS_DWT     Data Watchpoint and Trace (DWT)
 892:.././hal/stm32f3/CMSIS/core/core_cm4.h ****   \brief    Type definitions for the Data Watchpoint and Trace (DWT)
 893:.././hal/stm32f3/CMSIS/core/core_cm4.h ****   @{
 894:.././hal/stm32f3/CMSIS/core/core_cm4.h ****  */
 895:.././hal/stm32f3/CMSIS/core/core_cm4.h **** 
 896:.././hal/stm32f3/CMSIS/core/core_cm4.h **** /**
 897:.././hal/stm32f3/CMSIS/core/core_cm4.h ****   \brief  Structure type to access the Data Watchpoint and Trace Register (DWT).
 898:.././hal/stm32f3/CMSIS/core/core_cm4.h ****  */
 899:.././hal/stm32f3/CMSIS/core/core_cm4.h **** typedef struct
 900:.././hal/stm32f3/CMSIS/core/core_cm4.h **** {
 901:.././hal/stm32f3/CMSIS/core/core_cm4.h ****   __IOM uint32_t CTRL;                   /*!< Offset: 0x000 (R/W)  Control Register */
 902:.././hal/stm32f3/CMSIS/core/core_cm4.h ****   __IOM uint32_t CYCCNT;                 /*!< Offset: 0x004 (R/W)  Cycle Count Register */
 903:.././hal/stm32f3/CMSIS/core/core_cm4.h ****   __IOM uint32_t CPICNT;                 /*!< Offset: 0x008 (R/W)  CPI Count Register */
 904:.././hal/stm32f3/CMSIS/core/core_cm4.h ****   __IOM uint32_t EXCCNT;                 /*!< Offset: 0x00C (R/W)  Exception Overhead Count Registe
 905:.././hal/stm32f3/CMSIS/core/core_cm4.h ****   __IOM uint32_t SLEEPCNT;               /*!< Offset: 0x010 (R/W)  Sleep Count Register */
 906:.././hal/stm32f3/CMSIS/core/core_cm4.h ****   __IOM uint32_t LSUCNT;                 /*!< Offset: 0x014 (R/W)  LSU Count Register */
 907:.././hal/stm32f3/CMSIS/core/core_cm4.h ****   __IOM uint32_t FOLDCNT;                /*!< Offset: 0x018 (R/W)  Folded-instruction Count Registe
 908:.././hal/stm32f3/CMSIS/core/core_cm4.h ****   __IM  uint32_t PCSR;                   /*!< Offset: 0x01C (R/ )  Program Counter Sample Register 
 909:.././hal/stm32f3/CMSIS/core/core_cm4.h ****   __IOM uint32_t COMP0;                  /*!< Offset: 0x020 (R/W)  Comparator Register 0 */
 910:.././hal/stm32f3/CMSIS/core/core_cm4.h ****   __IOM uint32_t MASK0;                  /*!< Offset: 0x024 (R/W)  Mask Register 0 */
 911:.././hal/stm32f3/CMSIS/core/core_cm4.h ****   __IOM uint32_t FUNCTION0;              /*!< Offset: 0x028 (R/W)  Function Register 0 */
 912:.././hal/stm32f3/CMSIS/core/core_cm4.h ****         uint32_t RESERVED0[1U];
 913:.././hal/stm32f3/CMSIS/core/core_cm4.h ****   __IOM uint32_t COMP1;                  /*!< Offset: 0x030 (R/W)  Comparator Register 1 */
 914:.././hal/stm32f3/CMSIS/core/core_cm4.h ****   __IOM uint32_t MASK1;                  /*!< Offset: 0x034 (R/W)  Mask Register 1 */
 915:.././hal/stm32f3/CMSIS/core/core_cm4.h ****   __IOM uint32_t FUNCTION1;              /*!< Offset: 0x038 (R/W)  Function Register 1 */
 916:.././hal/stm32f3/CMSIS/core/core_cm4.h ****         uint32_t RESERVED1[1U];
 917:.././hal/stm32f3/CMSIS/core/core_cm4.h ****   __IOM uint32_t COMP2;                  /*!< Offset: 0x040 (R/W)  Comparator Register 2 */
 918:.././hal/stm32f3/CMSIS/core/core_cm4.h ****   __IOM uint32_t MASK2;                  /*!< Offset: 0x044 (R/W)  Mask Register 2 */
 919:.././hal/stm32f3/CMSIS/core/core_cm4.h ****   __IOM uint32_t FUNCTION2;              /*!< Offset: 0x048 (R/W)  Function Register 2 */
 920:.././hal/stm32f3/CMSIS/core/core_cm4.h ****         uint32_t RESERVED2[1U];
 921:.././hal/stm32f3/CMSIS/core/core_cm4.h ****   __IOM uint32_t COMP3;                  /*!< Offset: 0x050 (R/W)  Comparator Register 3 */
 922:.././hal/stm32f3/CMSIS/core/core_cm4.h ****   __IOM uint32_t MASK3;                  /*!< Offset: 0x054 (R/W)  Mask Register 3 */
 923:.././hal/stm32f3/CMSIS/core/core_cm4.h ****   __IOM uint32_t FUNCTION3;              /*!< Offset: 0x058 (R/W)  Function Register 3 */
 924:.././hal/stm32f3/CMSIS/core/core_cm4.h **** } DWT_Type;
 925:.././hal/stm32f3/CMSIS/core/core_cm4.h **** 
 926:.././hal/stm32f3/CMSIS/core/core_cm4.h **** /* DWT Control Register Definitions */
 927:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define DWT_CTRL_NUMCOMP_Pos               28U                                         /*!< DWT CTR
 928:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define DWT_CTRL_NUMCOMP_Msk               (0xFUL << DWT_CTRL_NUMCOMP_Pos)             /*!< DWT CTR
 929:.././hal/stm32f3/CMSIS/core/core_cm4.h **** 
 930:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define DWT_CTRL_NOTRCPKT_Pos              27U                                         /*!< DWT CTR
 931:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define DWT_CTRL_NOTRCPKT_Msk              (0x1UL << DWT_CTRL_NOTRCPKT_Pos)            /*!< DWT CTR
 932:.././hal/stm32f3/CMSIS/core/core_cm4.h **** 
 933:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define DWT_CTRL_NOEXTTRIG_Pos             26U                                         /*!< DWT CTR
 934:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define DWT_CTRL_NOEXTTRIG_Msk             (0x1UL << DWT_CTRL_NOEXTTRIG_Pos)           /*!< DWT CTR
 935:.././hal/stm32f3/CMSIS/core/core_cm4.h **** 
 936:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define DWT_CTRL_NOCYCCNT_Pos              25U                                         /*!< DWT CTR
 937:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define DWT_CTRL_NOCYCCNT_Msk              (0x1UL << DWT_CTRL_NOCYCCNT_Pos)            /*!< DWT CTR
 938:.././hal/stm32f3/CMSIS/core/core_cm4.h **** 
 939:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define DWT_CTRL_NOPRFCNT_Pos              24U                                         /*!< DWT CTR
 940:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define DWT_CTRL_NOPRFCNT_Msk              (0x1UL << DWT_CTRL_NOPRFCNT_Pos)            /*!< DWT CTR
 941:.././hal/stm32f3/CMSIS/core/core_cm4.h **** 
 942:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define DWT_CTRL_CYCEVTENA_Pos             22U                                         /*!< DWT CTR
 943:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define DWT_CTRL_CYCEVTENA_Msk             (0x1UL << DWT_CTRL_CYCEVTENA_Pos)           /*!< DWT CTR
 944:.././hal/stm32f3/CMSIS/core/core_cm4.h **** 
 945:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define DWT_CTRL_FOLDEVTENA_Pos            21U                                         /*!< DWT CTR
 946:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define DWT_CTRL_FOLDEVTENA_Msk            (0x1UL << DWT_CTRL_FOLDEVTENA_Pos)          /*!< DWT CTR
 947:.././hal/stm32f3/CMSIS/core/core_cm4.h **** 
 948:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define DWT_CTRL_LSUEVTENA_Pos             20U                                         /*!< DWT CTR
 949:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define DWT_CTRL_LSUEVTENA_Msk             (0x1UL << DWT_CTRL_LSUEVTENA_Pos)           /*!< DWT CTR
 950:.././hal/stm32f3/CMSIS/core/core_cm4.h **** 
 951:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define DWT_CTRL_SLEEPEVTENA_Pos           19U                                         /*!< DWT CTR
 952:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define DWT_CTRL_SLEEPEVTENA_Msk           (0x1UL << DWT_CTRL_SLEEPEVTENA_Pos)         /*!< DWT CTR
 953:.././hal/stm32f3/CMSIS/core/core_cm4.h **** 
 954:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define DWT_CTRL_EXCEVTENA_Pos             18U                                         /*!< DWT CTR
 955:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define DWT_CTRL_EXCEVTENA_Msk             (0x1UL << DWT_CTRL_EXCEVTENA_Pos)           /*!< DWT CTR
 956:.././hal/stm32f3/CMSIS/core/core_cm4.h **** 
 957:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define DWT_CTRL_CPIEVTENA_Pos             17U                                         /*!< DWT CTR
 958:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define DWT_CTRL_CPIEVTENA_Msk             (0x1UL << DWT_CTRL_CPIEVTENA_Pos)           /*!< DWT CTR
 959:.././hal/stm32f3/CMSIS/core/core_cm4.h **** 
 960:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define DWT_CTRL_EXCTRCENA_Pos             16U                                         /*!< DWT CTR
 961:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define DWT_CTRL_EXCTRCENA_Msk             (0x1UL << DWT_CTRL_EXCTRCENA_Pos)           /*!< DWT CTR
 962:.././hal/stm32f3/CMSIS/core/core_cm4.h **** 
 963:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define DWT_CTRL_PCSAMPLENA_Pos            12U                                         /*!< DWT CTR
 964:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define DWT_CTRL_PCSAMPLENA_Msk            (0x1UL << DWT_CTRL_PCSAMPLENA_Pos)          /*!< DWT CTR
 965:.././hal/stm32f3/CMSIS/core/core_cm4.h **** 
 966:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define DWT_CTRL_SYNCTAP_Pos               10U                                         /*!< DWT CTR
 967:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define DWT_CTRL_SYNCTAP_Msk               (0x3UL << DWT_CTRL_SYNCTAP_Pos)             /*!< DWT CTR
 968:.././hal/stm32f3/CMSIS/core/core_cm4.h **** 
 969:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define DWT_CTRL_CYCTAP_Pos                 9U                                         /*!< DWT CTR
 970:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define DWT_CTRL_CYCTAP_Msk                (0x1UL << DWT_CTRL_CYCTAP_Pos)              /*!< DWT CTR
 971:.././hal/stm32f3/CMSIS/core/core_cm4.h **** 
 972:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define DWT_CTRL_POSTINIT_Pos               5U                                         /*!< DWT CTR
 973:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define DWT_CTRL_POSTINIT_Msk              (0xFUL << DWT_CTRL_POSTINIT_Pos)            /*!< DWT CTR
 974:.././hal/stm32f3/CMSIS/core/core_cm4.h **** 
 975:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define DWT_CTRL_POSTPRESET_Pos             1U                                         /*!< DWT CTR
 976:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define DWT_CTRL_POSTPRESET_Msk            (0xFUL << DWT_CTRL_POSTPRESET_Pos)          /*!< DWT CTR
 977:.././hal/stm32f3/CMSIS/core/core_cm4.h **** 
 978:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define DWT_CTRL_CYCCNTENA_Pos              0U                                         /*!< DWT CTR
 979:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define DWT_CTRL_CYCCNTENA_Msk             (0x1UL /*<< DWT_CTRL_CYCCNTENA_Pos*/)       /*!< DWT CTR
 980:.././hal/stm32f3/CMSIS/core/core_cm4.h **** 
 981:.././hal/stm32f3/CMSIS/core/core_cm4.h **** /* DWT CPI Count Register Definitions */
 982:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define DWT_CPICNT_CPICNT_Pos               0U                                         /*!< DWT CPI
 983:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define DWT_CPICNT_CPICNT_Msk              (0xFFUL /*<< DWT_CPICNT_CPICNT_Pos*/)       /*!< DWT CPI
 984:.././hal/stm32f3/CMSIS/core/core_cm4.h **** 
 985:.././hal/stm32f3/CMSIS/core/core_cm4.h **** /* DWT Exception Overhead Count Register Definitions */
 986:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define DWT_EXCCNT_EXCCNT_Pos               0U                                         /*!< DWT EXC
 987:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define DWT_EXCCNT_EXCCNT_Msk              (0xFFUL /*<< DWT_EXCCNT_EXCCNT_Pos*/)       /*!< DWT EXC
 988:.././hal/stm32f3/CMSIS/core/core_cm4.h **** 
 989:.././hal/stm32f3/CMSIS/core/core_cm4.h **** /* DWT Sleep Count Register Definitions */
 990:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define DWT_SLEEPCNT_SLEEPCNT_Pos           0U                                         /*!< DWT SLE
 991:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define DWT_SLEEPCNT_SLEEPCNT_Msk          (0xFFUL /*<< DWT_SLEEPCNT_SLEEPCNT_Pos*/)   /*!< DWT SLE
 992:.././hal/stm32f3/CMSIS/core/core_cm4.h **** 
 993:.././hal/stm32f3/CMSIS/core/core_cm4.h **** /* DWT LSU Count Register Definitions */
 994:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define DWT_LSUCNT_LSUCNT_Pos               0U                                         /*!< DWT LSU
 995:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define DWT_LSUCNT_LSUCNT_Msk              (0xFFUL /*<< DWT_LSUCNT_LSUCNT_Pos*/)       /*!< DWT LSU
 996:.././hal/stm32f3/CMSIS/core/core_cm4.h **** 
 997:.././hal/stm32f3/CMSIS/core/core_cm4.h **** /* DWT Folded-instruction Count Register Definitions */
 998:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define DWT_FOLDCNT_FOLDCNT_Pos             0U                                         /*!< DWT FOL
 999:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define DWT_FOLDCNT_FOLDCNT_Msk            (0xFFUL /*<< DWT_FOLDCNT_FOLDCNT_Pos*/)     /*!< DWT FOL
1000:.././hal/stm32f3/CMSIS/core/core_cm4.h **** 
1001:.././hal/stm32f3/CMSIS/core/core_cm4.h **** /* DWT Comparator Mask Register Definitions */
1002:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define DWT_MASK_MASK_Pos                   0U                                         /*!< DWT MAS
1003:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define DWT_MASK_MASK_Msk                  (0x1FUL /*<< DWT_MASK_MASK_Pos*/)           /*!< DWT MAS
1004:.././hal/stm32f3/CMSIS/core/core_cm4.h **** 
1005:.././hal/stm32f3/CMSIS/core/core_cm4.h **** /* DWT Comparator Function Register Definitions */
1006:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define DWT_FUNCTION_MATCHED_Pos           24U                                         /*!< DWT FUN
1007:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define DWT_FUNCTION_MATCHED_Msk           (0x1UL << DWT_FUNCTION_MATCHED_Pos)         /*!< DWT FUN
1008:.././hal/stm32f3/CMSIS/core/core_cm4.h **** 
1009:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define DWT_FUNCTION_DATAVADDR1_Pos        16U                                         /*!< DWT FUN
1010:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define DWT_FUNCTION_DATAVADDR1_Msk        (0xFUL << DWT_FUNCTION_DATAVADDR1_Pos)      /*!< DWT FUN
1011:.././hal/stm32f3/CMSIS/core/core_cm4.h **** 
1012:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define DWT_FUNCTION_DATAVADDR0_Pos        12U                                         /*!< DWT FUN
1013:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define DWT_FUNCTION_DATAVADDR0_Msk        (0xFUL << DWT_FUNCTION_DATAVADDR0_Pos)      /*!< DWT FUN
1014:.././hal/stm32f3/CMSIS/core/core_cm4.h **** 
1015:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define DWT_FUNCTION_DATAVSIZE_Pos         10U                                         /*!< DWT FUN
1016:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define DWT_FUNCTION_DATAVSIZE_Msk         (0x3UL << DWT_FUNCTION_DATAVSIZE_Pos)       /*!< DWT FUN
1017:.././hal/stm32f3/CMSIS/core/core_cm4.h **** 
1018:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define DWT_FUNCTION_LNK1ENA_Pos            9U                                         /*!< DWT FUN
1019:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define DWT_FUNCTION_LNK1ENA_Msk           (0x1UL << DWT_FUNCTION_LNK1ENA_Pos)         /*!< DWT FUN
1020:.././hal/stm32f3/CMSIS/core/core_cm4.h **** 
1021:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define DWT_FUNCTION_DATAVMATCH_Pos         8U                                         /*!< DWT FUN
1022:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define DWT_FUNCTION_DATAVMATCH_Msk        (0x1UL << DWT_FUNCTION_DATAVMATCH_Pos)      /*!< DWT FUN
1023:.././hal/stm32f3/CMSIS/core/core_cm4.h **** 
1024:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define DWT_FUNCTION_CYCMATCH_Pos           7U                                         /*!< DWT FUN
1025:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define DWT_FUNCTION_CYCMATCH_Msk          (0x1UL << DWT_FUNCTION_CYCMATCH_Pos)        /*!< DWT FUN
1026:.././hal/stm32f3/CMSIS/core/core_cm4.h **** 
1027:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define DWT_FUNCTION_EMITRANGE_Pos          5U                                         /*!< DWT FUN
1028:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define DWT_FUNCTION_EMITRANGE_Msk         (0x1UL << DWT_FUNCTION_EMITRANGE_Pos)       /*!< DWT FUN
1029:.././hal/stm32f3/CMSIS/core/core_cm4.h **** 
1030:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define DWT_FUNCTION_FUNCTION_Pos           0U                                         /*!< DWT FUN
1031:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define DWT_FUNCTION_FUNCTION_Msk          (0xFUL /*<< DWT_FUNCTION_FUNCTION_Pos*/)    /*!< DWT FUN
1032:.././hal/stm32f3/CMSIS/core/core_cm4.h **** 
1033:.././hal/stm32f3/CMSIS/core/core_cm4.h **** /*@}*/ /* end of group CMSIS_DWT */
1034:.././hal/stm32f3/CMSIS/core/core_cm4.h **** 
1035:.././hal/stm32f3/CMSIS/core/core_cm4.h **** 
1036:.././hal/stm32f3/CMSIS/core/core_cm4.h **** /**
1037:.././hal/stm32f3/CMSIS/core/core_cm4.h ****   \ingroup  CMSIS_core_register
1038:.././hal/stm32f3/CMSIS/core/core_cm4.h ****   \defgroup CMSIS_TPI     Trace Port Interface (TPI)
1039:.././hal/stm32f3/CMSIS/core/core_cm4.h ****   \brief    Type definitions for the Trace Port Interface (TPI)
1040:.././hal/stm32f3/CMSIS/core/core_cm4.h ****   @{
1041:.././hal/stm32f3/CMSIS/core/core_cm4.h ****  */
1042:.././hal/stm32f3/CMSIS/core/core_cm4.h **** 
1043:.././hal/stm32f3/CMSIS/core/core_cm4.h **** /**
1044:.././hal/stm32f3/CMSIS/core/core_cm4.h ****   \brief  Structure type to access the Trace Port Interface Register (TPI).
1045:.././hal/stm32f3/CMSIS/core/core_cm4.h ****  */
1046:.././hal/stm32f3/CMSIS/core/core_cm4.h **** typedef struct
1047:.././hal/stm32f3/CMSIS/core/core_cm4.h **** {
1048:.././hal/stm32f3/CMSIS/core/core_cm4.h ****   __IOM uint32_t SSPSR;                  /*!< Offset: 0x000 (R/ )  Supported Parallel Port Size Reg
1049:.././hal/stm32f3/CMSIS/core/core_cm4.h ****   __IOM uint32_t CSPSR;                  /*!< Offset: 0x004 (R/W)  Current Parallel Port Size Regis
1050:.././hal/stm32f3/CMSIS/core/core_cm4.h ****         uint32_t RESERVED0[2U];
1051:.././hal/stm32f3/CMSIS/core/core_cm4.h ****   __IOM uint32_t ACPR;                   /*!< Offset: 0x010 (R/W)  Asynchronous Clock Prescaler Reg
1052:.././hal/stm32f3/CMSIS/core/core_cm4.h ****         uint32_t RESERVED1[55U];
1053:.././hal/stm32f3/CMSIS/core/core_cm4.h ****   __IOM uint32_t SPPR;                   /*!< Offset: 0x0F0 (R/W)  Selected Pin Protocol Register *
1054:.././hal/stm32f3/CMSIS/core/core_cm4.h ****         uint32_t RESERVED2[131U];
1055:.././hal/stm32f3/CMSIS/core/core_cm4.h ****   __IM  uint32_t FFSR;                   /*!< Offset: 0x300 (R/ )  Formatter and Flush Status Regis
1056:.././hal/stm32f3/CMSIS/core/core_cm4.h ****   __IOM uint32_t FFCR;                   /*!< Offset: 0x304 (R/W)  Formatter and Flush Control Regi
1057:.././hal/stm32f3/CMSIS/core/core_cm4.h ****   __IM  uint32_t FSCR;                   /*!< Offset: 0x308 (R/ )  Formatter Synchronization Counte
1058:.././hal/stm32f3/CMSIS/core/core_cm4.h ****         uint32_t RESERVED3[759U];
1059:.././hal/stm32f3/CMSIS/core/core_cm4.h ****   __IM  uint32_t TRIGGER;                /*!< Offset: 0xEE8 (R/ )  TRIGGER */
1060:.././hal/stm32f3/CMSIS/core/core_cm4.h ****   __IM  uint32_t FIFO0;                  /*!< Offset: 0xEEC (R/ )  Integration ETM Data */
1061:.././hal/stm32f3/CMSIS/core/core_cm4.h ****   __IM  uint32_t ITATBCTR2;              /*!< Offset: 0xEF0 (R/ )  ITATBCTR2 */
1062:.././hal/stm32f3/CMSIS/core/core_cm4.h ****         uint32_t RESERVED4[1U];
1063:.././hal/stm32f3/CMSIS/core/core_cm4.h ****   __IM  uint32_t ITATBCTR0;              /*!< Offset: 0xEF8 (R/ )  ITATBCTR0 */
1064:.././hal/stm32f3/CMSIS/core/core_cm4.h ****   __IM  uint32_t FIFO1;                  /*!< Offset: 0xEFC (R/ )  Integration ITM Data */
1065:.././hal/stm32f3/CMSIS/core/core_cm4.h ****   __IOM uint32_t ITCTRL;                 /*!< Offset: 0xF00 (R/W)  Integration Mode Control */
1066:.././hal/stm32f3/CMSIS/core/core_cm4.h ****         uint32_t RESERVED5[39U];
1067:.././hal/stm32f3/CMSIS/core/core_cm4.h ****   __IOM uint32_t CLAIMSET;               /*!< Offset: 0xFA0 (R/W)  Claim tag set */
1068:.././hal/stm32f3/CMSIS/core/core_cm4.h ****   __IOM uint32_t CLAIMCLR;               /*!< Offset: 0xFA4 (R/W)  Claim tag clear */
1069:.././hal/stm32f3/CMSIS/core/core_cm4.h ****         uint32_t RESERVED7[8U];
1070:.././hal/stm32f3/CMSIS/core/core_cm4.h ****   __IM  uint32_t DEVID;                  /*!< Offset: 0xFC8 (R/ )  TPIU_DEVID */
1071:.././hal/stm32f3/CMSIS/core/core_cm4.h ****   __IM  uint32_t DEVTYPE;                /*!< Offset: 0xFCC (R/ )  TPIU_DEVTYPE */
1072:.././hal/stm32f3/CMSIS/core/core_cm4.h **** } TPI_Type;
1073:.././hal/stm32f3/CMSIS/core/core_cm4.h **** 
1074:.././hal/stm32f3/CMSIS/core/core_cm4.h **** /* TPI Asynchronous Clock Prescaler Register Definitions */
1075:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define TPI_ACPR_PRESCALER_Pos              0U                                         /*!< TPI ACP
1076:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define TPI_ACPR_PRESCALER_Msk             (0x1FFFUL /*<< TPI_ACPR_PRESCALER_Pos*/)    /*!< TPI ACP
1077:.././hal/stm32f3/CMSIS/core/core_cm4.h **** 
1078:.././hal/stm32f3/CMSIS/core/core_cm4.h **** /* TPI Selected Pin Protocol Register Definitions */
1079:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define TPI_SPPR_TXMODE_Pos                 0U                                         /*!< TPI SPP
1080:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define TPI_SPPR_TXMODE_Msk                (0x3UL /*<< TPI_SPPR_TXMODE_Pos*/)          /*!< TPI SPP
1081:.././hal/stm32f3/CMSIS/core/core_cm4.h **** 
1082:.././hal/stm32f3/CMSIS/core/core_cm4.h **** /* TPI Formatter and Flush Status Register Definitions */
1083:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define TPI_FFSR_FtNonStop_Pos              3U                                         /*!< TPI FFS
1084:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define TPI_FFSR_FtNonStop_Msk             (0x1UL << TPI_FFSR_FtNonStop_Pos)           /*!< TPI FFS
1085:.././hal/stm32f3/CMSIS/core/core_cm4.h **** 
1086:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define TPI_FFSR_TCPresent_Pos              2U                                         /*!< TPI FFS
1087:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define TPI_FFSR_TCPresent_Msk             (0x1UL << TPI_FFSR_TCPresent_Pos)           /*!< TPI FFS
1088:.././hal/stm32f3/CMSIS/core/core_cm4.h **** 
1089:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define TPI_FFSR_FtStopped_Pos              1U                                         /*!< TPI FFS
1090:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define TPI_FFSR_FtStopped_Msk             (0x1UL << TPI_FFSR_FtStopped_Pos)           /*!< TPI FFS
1091:.././hal/stm32f3/CMSIS/core/core_cm4.h **** 
1092:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define TPI_FFSR_FlInProg_Pos               0U                                         /*!< TPI FFS
1093:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define TPI_FFSR_FlInProg_Msk              (0x1UL /*<< TPI_FFSR_FlInProg_Pos*/)        /*!< TPI FFS
1094:.././hal/stm32f3/CMSIS/core/core_cm4.h **** 
1095:.././hal/stm32f3/CMSIS/core/core_cm4.h **** /* TPI Formatter and Flush Control Register Definitions */
1096:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define TPI_FFCR_TrigIn_Pos                 8U                                         /*!< TPI FFC
1097:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define TPI_FFCR_TrigIn_Msk                (0x1UL << TPI_FFCR_TrigIn_Pos)              /*!< TPI FFC
1098:.././hal/stm32f3/CMSIS/core/core_cm4.h **** 
1099:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define TPI_FFCR_EnFCont_Pos                1U                                         /*!< TPI FFC
1100:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define TPI_FFCR_EnFCont_Msk               (0x1UL << TPI_FFCR_EnFCont_Pos)             /*!< TPI FFC
1101:.././hal/stm32f3/CMSIS/core/core_cm4.h **** 
1102:.././hal/stm32f3/CMSIS/core/core_cm4.h **** /* TPI TRIGGER Register Definitions */
1103:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define TPI_TRIGGER_TRIGGER_Pos             0U                                         /*!< TPI TRI
1104:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define TPI_TRIGGER_TRIGGER_Msk            (0x1UL /*<< TPI_TRIGGER_TRIGGER_Pos*/)      /*!< TPI TRI
1105:.././hal/stm32f3/CMSIS/core/core_cm4.h **** 
1106:.././hal/stm32f3/CMSIS/core/core_cm4.h **** /* TPI Integration ETM Data Register Definitions (FIFO0) */
1107:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define TPI_FIFO0_ITM_ATVALID_Pos          29U                                         /*!< TPI FIF
1108:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define TPI_FIFO0_ITM_ATVALID_Msk          (0x3UL << TPI_FIFO0_ITM_ATVALID_Pos)        /*!< TPI FIF
1109:.././hal/stm32f3/CMSIS/core/core_cm4.h **** 
1110:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define TPI_FIFO0_ITM_bytecount_Pos        27U                                         /*!< TPI FIF
1111:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define TPI_FIFO0_ITM_bytecount_Msk        (0x3UL << TPI_FIFO0_ITM_bytecount_Pos)      /*!< TPI FIF
1112:.././hal/stm32f3/CMSIS/core/core_cm4.h **** 
1113:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define TPI_FIFO0_ETM_ATVALID_Pos          26U                                         /*!< TPI FIF
1114:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define TPI_FIFO0_ETM_ATVALID_Msk          (0x3UL << TPI_FIFO0_ETM_ATVALID_Pos)        /*!< TPI FIF
1115:.././hal/stm32f3/CMSIS/core/core_cm4.h **** 
1116:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define TPI_FIFO0_ETM_bytecount_Pos        24U                                         /*!< TPI FIF
1117:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define TPI_FIFO0_ETM_bytecount_Msk        (0x3UL << TPI_FIFO0_ETM_bytecount_Pos)      /*!< TPI FIF
1118:.././hal/stm32f3/CMSIS/core/core_cm4.h **** 
1119:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define TPI_FIFO0_ETM2_Pos                 16U                                         /*!< TPI FIF
1120:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define TPI_FIFO0_ETM2_Msk                 (0xFFUL << TPI_FIFO0_ETM2_Pos)              /*!< TPI FIF
1121:.././hal/stm32f3/CMSIS/core/core_cm4.h **** 
1122:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define TPI_FIFO0_ETM1_Pos                  8U                                         /*!< TPI FIF
1123:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define TPI_FIFO0_ETM1_Msk                 (0xFFUL << TPI_FIFO0_ETM1_Pos)              /*!< TPI FIF
1124:.././hal/stm32f3/CMSIS/core/core_cm4.h **** 
1125:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define TPI_FIFO0_ETM0_Pos                  0U                                         /*!< TPI FIF
1126:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define TPI_FIFO0_ETM0_Msk                 (0xFFUL /*<< TPI_FIFO0_ETM0_Pos*/)          /*!< TPI FIF
1127:.././hal/stm32f3/CMSIS/core/core_cm4.h **** 
1128:.././hal/stm32f3/CMSIS/core/core_cm4.h **** /* TPI ITATBCTR2 Register Definitions */
1129:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define TPI_ITATBCTR2_ATREADY_Pos           0U                                         /*!< TPI ITA
1130:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define TPI_ITATBCTR2_ATREADY_Msk          (0x1UL /*<< TPI_ITATBCTR2_ATREADY_Pos*/)    /*!< TPI ITA
1131:.././hal/stm32f3/CMSIS/core/core_cm4.h **** 
1132:.././hal/stm32f3/CMSIS/core/core_cm4.h **** /* TPI Integration ITM Data Register Definitions (FIFO1) */
1133:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define TPI_FIFO1_ITM_ATVALID_Pos          29U                                         /*!< TPI FIF
1134:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define TPI_FIFO1_ITM_ATVALID_Msk          (0x3UL << TPI_FIFO1_ITM_ATVALID_Pos)        /*!< TPI FIF
1135:.././hal/stm32f3/CMSIS/core/core_cm4.h **** 
1136:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define TPI_FIFO1_ITM_bytecount_Pos        27U                                         /*!< TPI FIF
1137:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define TPI_FIFO1_ITM_bytecount_Msk        (0x3UL << TPI_FIFO1_ITM_bytecount_Pos)      /*!< TPI FIF
1138:.././hal/stm32f3/CMSIS/core/core_cm4.h **** 
1139:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define TPI_FIFO1_ETM_ATVALID_Pos          26U                                         /*!< TPI FIF
1140:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define TPI_FIFO1_ETM_ATVALID_Msk          (0x3UL << TPI_FIFO1_ETM_ATVALID_Pos)        /*!< TPI FIF
1141:.././hal/stm32f3/CMSIS/core/core_cm4.h **** 
1142:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define TPI_FIFO1_ETM_bytecount_Pos        24U                                         /*!< TPI FIF
1143:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define TPI_FIFO1_ETM_bytecount_Msk        (0x3UL << TPI_FIFO1_ETM_bytecount_Pos)      /*!< TPI FIF
1144:.././hal/stm32f3/CMSIS/core/core_cm4.h **** 
1145:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define TPI_FIFO1_ITM2_Pos                 16U                                         /*!< TPI FIF
1146:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define TPI_FIFO1_ITM2_Msk                 (0xFFUL << TPI_FIFO1_ITM2_Pos)              /*!< TPI FIF
1147:.././hal/stm32f3/CMSIS/core/core_cm4.h **** 
1148:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define TPI_FIFO1_ITM1_Pos                  8U                                         /*!< TPI FIF
1149:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define TPI_FIFO1_ITM1_Msk                 (0xFFUL << TPI_FIFO1_ITM1_Pos)              /*!< TPI FIF
1150:.././hal/stm32f3/CMSIS/core/core_cm4.h **** 
1151:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define TPI_FIFO1_ITM0_Pos                  0U                                         /*!< TPI FIF
1152:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define TPI_FIFO1_ITM0_Msk                 (0xFFUL /*<< TPI_FIFO1_ITM0_Pos*/)          /*!< TPI FIF
1153:.././hal/stm32f3/CMSIS/core/core_cm4.h **** 
1154:.././hal/stm32f3/CMSIS/core/core_cm4.h **** /* TPI ITATBCTR0 Register Definitions */
1155:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define TPI_ITATBCTR0_ATREADY_Pos           0U                                         /*!< TPI ITA
1156:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define TPI_ITATBCTR0_ATREADY_Msk          (0x1UL /*<< TPI_ITATBCTR0_ATREADY_Pos*/)    /*!< TPI ITA
1157:.././hal/stm32f3/CMSIS/core/core_cm4.h **** 
1158:.././hal/stm32f3/CMSIS/core/core_cm4.h **** /* TPI Integration Mode Control Register Definitions */
1159:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define TPI_ITCTRL_Mode_Pos                 0U                                         /*!< TPI ITC
1160:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define TPI_ITCTRL_Mode_Msk                (0x1UL /*<< TPI_ITCTRL_Mode_Pos*/)          /*!< TPI ITC
1161:.././hal/stm32f3/CMSIS/core/core_cm4.h **** 
1162:.././hal/stm32f3/CMSIS/core/core_cm4.h **** /* TPI DEVID Register Definitions */
1163:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define TPI_DEVID_NRZVALID_Pos             11U                                         /*!< TPI DEV
1164:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define TPI_DEVID_NRZVALID_Msk             (0x1UL << TPI_DEVID_NRZVALID_Pos)           /*!< TPI DEV
1165:.././hal/stm32f3/CMSIS/core/core_cm4.h **** 
1166:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define TPI_DEVID_MANCVALID_Pos            10U                                         /*!< TPI DEV
1167:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define TPI_DEVID_MANCVALID_Msk            (0x1UL << TPI_DEVID_MANCVALID_Pos)          /*!< TPI DEV
1168:.././hal/stm32f3/CMSIS/core/core_cm4.h **** 
1169:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define TPI_DEVID_PTINVALID_Pos             9U                                         /*!< TPI DEV
1170:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define TPI_DEVID_PTINVALID_Msk            (0x1UL << TPI_DEVID_PTINVALID_Pos)          /*!< TPI DEV
1171:.././hal/stm32f3/CMSIS/core/core_cm4.h **** 
1172:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define TPI_DEVID_MinBufSz_Pos              6U                                         /*!< TPI DEV
1173:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define TPI_DEVID_MinBufSz_Msk             (0x7UL << TPI_DEVID_MinBufSz_Pos)           /*!< TPI DEV
1174:.././hal/stm32f3/CMSIS/core/core_cm4.h **** 
1175:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define TPI_DEVID_AsynClkIn_Pos             5U                                         /*!< TPI DEV
1176:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define TPI_DEVID_AsynClkIn_Msk            (0x1UL << TPI_DEVID_AsynClkIn_Pos)          /*!< TPI DEV
1177:.././hal/stm32f3/CMSIS/core/core_cm4.h **** 
1178:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define TPI_DEVID_NrTraceInput_Pos          0U                                         /*!< TPI DEV
1179:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define TPI_DEVID_NrTraceInput_Msk         (0x1FUL /*<< TPI_DEVID_NrTraceInput_Pos*/)  /*!< TPI DEV
1180:.././hal/stm32f3/CMSIS/core/core_cm4.h **** 
1181:.././hal/stm32f3/CMSIS/core/core_cm4.h **** /* TPI DEVTYPE Register Definitions */
1182:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define TPI_DEVTYPE_MajorType_Pos           4U                                         /*!< TPI DEV
1183:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define TPI_DEVTYPE_MajorType_Msk          (0xFUL << TPI_DEVTYPE_MajorType_Pos)        /*!< TPI DEV
1184:.././hal/stm32f3/CMSIS/core/core_cm4.h **** 
1185:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define TPI_DEVTYPE_SubType_Pos             0U                                         /*!< TPI DEV
1186:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define TPI_DEVTYPE_SubType_Msk            (0xFUL /*<< TPI_DEVTYPE_SubType_Pos*/)      /*!< TPI DEV
1187:.././hal/stm32f3/CMSIS/core/core_cm4.h **** 
1188:.././hal/stm32f3/CMSIS/core/core_cm4.h **** /*@}*/ /* end of group CMSIS_TPI */
1189:.././hal/stm32f3/CMSIS/core/core_cm4.h **** 
1190:.././hal/stm32f3/CMSIS/core/core_cm4.h **** 
1191:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #if (__MPU_PRESENT == 1U)
1192:.././hal/stm32f3/CMSIS/core/core_cm4.h **** /**
1193:.././hal/stm32f3/CMSIS/core/core_cm4.h ****   \ingroup  CMSIS_core_register
1194:.././hal/stm32f3/CMSIS/core/core_cm4.h ****   \defgroup CMSIS_MPU     Memory Protection Unit (MPU)
1195:.././hal/stm32f3/CMSIS/core/core_cm4.h ****   \brief    Type definitions for the Memory Protection Unit (MPU)
1196:.././hal/stm32f3/CMSIS/core/core_cm4.h ****   @{
1197:.././hal/stm32f3/CMSIS/core/core_cm4.h ****  */
1198:.././hal/stm32f3/CMSIS/core/core_cm4.h **** 
1199:.././hal/stm32f3/CMSIS/core/core_cm4.h **** /**
1200:.././hal/stm32f3/CMSIS/core/core_cm4.h ****   \brief  Structure type to access the Memory Protection Unit (MPU).
1201:.././hal/stm32f3/CMSIS/core/core_cm4.h ****  */
1202:.././hal/stm32f3/CMSIS/core/core_cm4.h **** typedef struct
1203:.././hal/stm32f3/CMSIS/core/core_cm4.h **** {
1204:.././hal/stm32f3/CMSIS/core/core_cm4.h ****   __IM  uint32_t TYPE;                   /*!< Offset: 0x000 (R/ )  MPU Type Register */
1205:.././hal/stm32f3/CMSIS/core/core_cm4.h ****   __IOM uint32_t CTRL;                   /*!< Offset: 0x004 (R/W)  MPU Control Register */
1206:.././hal/stm32f3/CMSIS/core/core_cm4.h ****   __IOM uint32_t RNR;                    /*!< Offset: 0x008 (R/W)  MPU Region RNRber Register */
1207:.././hal/stm32f3/CMSIS/core/core_cm4.h ****   __IOM uint32_t RBAR;                   /*!< Offset: 0x00C (R/W)  MPU Region Base Address Register
1208:.././hal/stm32f3/CMSIS/core/core_cm4.h ****   __IOM uint32_t RASR;                   /*!< Offset: 0x010 (R/W)  MPU Region Attribute and Size Re
1209:.././hal/stm32f3/CMSIS/core/core_cm4.h ****   __IOM uint32_t RBAR_A1;                /*!< Offset: 0x014 (R/W)  MPU Alias 1 Region Base Address 
1210:.././hal/stm32f3/CMSIS/core/core_cm4.h ****   __IOM uint32_t RASR_A1;                /*!< Offset: 0x018 (R/W)  MPU Alias 1 Region Attribute and
1211:.././hal/stm32f3/CMSIS/core/core_cm4.h ****   __IOM uint32_t RBAR_A2;                /*!< Offset: 0x01C (R/W)  MPU Alias 2 Region Base Address 
1212:.././hal/stm32f3/CMSIS/core/core_cm4.h ****   __IOM uint32_t RASR_A2;                /*!< Offset: 0x020 (R/W)  MPU Alias 2 Region Attribute and
1213:.././hal/stm32f3/CMSIS/core/core_cm4.h ****   __IOM uint32_t RBAR_A3;                /*!< Offset: 0x024 (R/W)  MPU Alias 3 Region Base Address 
1214:.././hal/stm32f3/CMSIS/core/core_cm4.h ****   __IOM uint32_t RASR_A3;                /*!< Offset: 0x028 (R/W)  MPU Alias 3 Region Attribute and
1215:.././hal/stm32f3/CMSIS/core/core_cm4.h **** } MPU_Type;
1216:.././hal/stm32f3/CMSIS/core/core_cm4.h **** 
1217:.././hal/stm32f3/CMSIS/core/core_cm4.h **** /* MPU Type Register Definitions */
1218:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define MPU_TYPE_IREGION_Pos               16U                                            /*!< MPU 
1219:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define MPU_TYPE_IREGION_Msk               (0xFFUL << MPU_TYPE_IREGION_Pos)               /*!< MPU 
1220:.././hal/stm32f3/CMSIS/core/core_cm4.h **** 
1221:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define MPU_TYPE_DREGION_Pos                8U                                            /*!< MPU 
1222:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define MPU_TYPE_DREGION_Msk               (0xFFUL << MPU_TYPE_DREGION_Pos)               /*!< MPU 
1223:.././hal/stm32f3/CMSIS/core/core_cm4.h **** 
1224:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define MPU_TYPE_SEPARATE_Pos               0U                                            /*!< MPU 
1225:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define MPU_TYPE_SEPARATE_Msk              (1UL /*<< MPU_TYPE_SEPARATE_Pos*/)             /*!< MPU 
1226:.././hal/stm32f3/CMSIS/core/core_cm4.h **** 
1227:.././hal/stm32f3/CMSIS/core/core_cm4.h **** /* MPU Control Register Definitions */
1228:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define MPU_CTRL_PRIVDEFENA_Pos             2U                                            /*!< MPU 
1229:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define MPU_CTRL_PRIVDEFENA_Msk            (1UL << MPU_CTRL_PRIVDEFENA_Pos)               /*!< MPU 
1230:.././hal/stm32f3/CMSIS/core/core_cm4.h **** 
1231:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define MPU_CTRL_HFNMIENA_Pos               1U                                            /*!< MPU 
1232:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define MPU_CTRL_HFNMIENA_Msk              (1UL << MPU_CTRL_HFNMIENA_Pos)                 /*!< MPU 
1233:.././hal/stm32f3/CMSIS/core/core_cm4.h **** 
1234:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define MPU_CTRL_ENABLE_Pos                 0U                                            /*!< MPU 
1235:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define MPU_CTRL_ENABLE_Msk                (1UL /*<< MPU_CTRL_ENABLE_Pos*/)               /*!< MPU 
1236:.././hal/stm32f3/CMSIS/core/core_cm4.h **** 
1237:.././hal/stm32f3/CMSIS/core/core_cm4.h **** /* MPU Region Number Register Definitions */
1238:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define MPU_RNR_REGION_Pos                  0U                                            /*!< MPU 
1239:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define MPU_RNR_REGION_Msk                 (0xFFUL /*<< MPU_RNR_REGION_Pos*/)             /*!< MPU 
1240:.././hal/stm32f3/CMSIS/core/core_cm4.h **** 
1241:.././hal/stm32f3/CMSIS/core/core_cm4.h **** /* MPU Region Base Address Register Definitions */
1242:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define MPU_RBAR_ADDR_Pos                   5U                                            /*!< MPU 
1243:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define MPU_RBAR_ADDR_Msk                  (0x7FFFFFFUL << MPU_RBAR_ADDR_Pos)             /*!< MPU 
1244:.././hal/stm32f3/CMSIS/core/core_cm4.h **** 
1245:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define MPU_RBAR_VALID_Pos                  4U                                            /*!< MPU 
1246:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define MPU_RBAR_VALID_Msk                 (1UL << MPU_RBAR_VALID_Pos)                    /*!< MPU 
1247:.././hal/stm32f3/CMSIS/core/core_cm4.h **** 
1248:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define MPU_RBAR_REGION_Pos                 0U                                            /*!< MPU 
1249:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define MPU_RBAR_REGION_Msk                (0xFUL /*<< MPU_RBAR_REGION_Pos*/)             /*!< MPU 
1250:.././hal/stm32f3/CMSIS/core/core_cm4.h **** 
1251:.././hal/stm32f3/CMSIS/core/core_cm4.h **** /* MPU Region Attribute and Size Register Definitions */
1252:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define MPU_RASR_ATTRS_Pos                 16U                                            /*!< MPU 
1253:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define MPU_RASR_ATTRS_Msk                 (0xFFFFUL << MPU_RASR_ATTRS_Pos)               /*!< MPU 
1254:.././hal/stm32f3/CMSIS/core/core_cm4.h **** 
1255:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define MPU_RASR_XN_Pos                    28U                                            /*!< MPU 
1256:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define MPU_RASR_XN_Msk                    (1UL << MPU_RASR_XN_Pos)                       /*!< MPU 
1257:.././hal/stm32f3/CMSIS/core/core_cm4.h **** 
1258:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define MPU_RASR_AP_Pos                    24U                                            /*!< MPU 
1259:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define MPU_RASR_AP_Msk                    (0x7UL << MPU_RASR_AP_Pos)                     /*!< MPU 
1260:.././hal/stm32f3/CMSIS/core/core_cm4.h **** 
1261:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define MPU_RASR_TEX_Pos                   19U                                            /*!< MPU 
1262:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define MPU_RASR_TEX_Msk                   (0x7UL << MPU_RASR_TEX_Pos)                    /*!< MPU 
1263:.././hal/stm32f3/CMSIS/core/core_cm4.h **** 
1264:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define MPU_RASR_S_Pos                     18U                                            /*!< MPU 
1265:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define MPU_RASR_S_Msk                     (1UL << MPU_RASR_S_Pos)                        /*!< MPU 
1266:.././hal/stm32f3/CMSIS/core/core_cm4.h **** 
1267:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define MPU_RASR_C_Pos                     17U                                            /*!< MPU 
1268:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define MPU_RASR_C_Msk                     (1UL << MPU_RASR_C_Pos)                        /*!< MPU 
1269:.././hal/stm32f3/CMSIS/core/core_cm4.h **** 
1270:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define MPU_RASR_B_Pos                     16U                                            /*!< MPU 
1271:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define MPU_RASR_B_Msk                     (1UL << MPU_RASR_B_Pos)                        /*!< MPU 
1272:.././hal/stm32f3/CMSIS/core/core_cm4.h **** 
1273:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define MPU_RASR_SRD_Pos                    8U                                            /*!< MPU 
1274:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define MPU_RASR_SRD_Msk                   (0xFFUL << MPU_RASR_SRD_Pos)                   /*!< MPU 
1275:.././hal/stm32f3/CMSIS/core/core_cm4.h **** 
1276:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define MPU_RASR_SIZE_Pos                   1U                                            /*!< MPU 
1277:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define MPU_RASR_SIZE_Msk                  (0x1FUL << MPU_RASR_SIZE_Pos)                  /*!< MPU 
1278:.././hal/stm32f3/CMSIS/core/core_cm4.h **** 
1279:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define MPU_RASR_ENABLE_Pos                 0U                                            /*!< MPU 
1280:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define MPU_RASR_ENABLE_Msk                (1UL /*<< MPU_RASR_ENABLE_Pos*/)               /*!< MPU 
1281:.././hal/stm32f3/CMSIS/core/core_cm4.h **** 
1282:.././hal/stm32f3/CMSIS/core/core_cm4.h **** /*@} end of group CMSIS_MPU */
1283:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #endif
1284:.././hal/stm32f3/CMSIS/core/core_cm4.h **** 
1285:.././hal/stm32f3/CMSIS/core/core_cm4.h **** 
1286:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #if (__FPU_PRESENT == 1U)
1287:.././hal/stm32f3/CMSIS/core/core_cm4.h **** /**
1288:.././hal/stm32f3/CMSIS/core/core_cm4.h ****   \ingroup  CMSIS_core_register
1289:.././hal/stm32f3/CMSIS/core/core_cm4.h ****   \defgroup CMSIS_FPU     Floating Point Unit (FPU)
1290:.././hal/stm32f3/CMSIS/core/core_cm4.h ****   \brief    Type definitions for the Floating Point Unit (FPU)
1291:.././hal/stm32f3/CMSIS/core/core_cm4.h ****   @{
1292:.././hal/stm32f3/CMSIS/core/core_cm4.h ****  */
1293:.././hal/stm32f3/CMSIS/core/core_cm4.h **** 
1294:.././hal/stm32f3/CMSIS/core/core_cm4.h **** /**
1295:.././hal/stm32f3/CMSIS/core/core_cm4.h ****   \brief  Structure type to access the Floating Point Unit (FPU).
1296:.././hal/stm32f3/CMSIS/core/core_cm4.h ****  */
1297:.././hal/stm32f3/CMSIS/core/core_cm4.h **** typedef struct
1298:.././hal/stm32f3/CMSIS/core/core_cm4.h **** {
1299:.././hal/stm32f3/CMSIS/core/core_cm4.h ****         uint32_t RESERVED0[1U];
1300:.././hal/stm32f3/CMSIS/core/core_cm4.h ****   __IOM uint32_t FPCCR;                  /*!< Offset: 0x004 (R/W)  Floating-Point Context Control R
1301:.././hal/stm32f3/CMSIS/core/core_cm4.h ****   __IOM uint32_t FPCAR;                  /*!< Offset: 0x008 (R/W)  Floating-Point Context Address R
1302:.././hal/stm32f3/CMSIS/core/core_cm4.h ****   __IOM uint32_t FPDSCR;                 /*!< Offset: 0x00C (R/W)  Floating-Point Default Status Co
1303:.././hal/stm32f3/CMSIS/core/core_cm4.h ****   __IM  uint32_t MVFR0;                  /*!< Offset: 0x010 (R/ )  Media and FP Feature Register 0 
1304:.././hal/stm32f3/CMSIS/core/core_cm4.h ****   __IM  uint32_t MVFR1;                  /*!< Offset: 0x014 (R/ )  Media and FP Feature Register 1 
1305:.././hal/stm32f3/CMSIS/core/core_cm4.h **** } FPU_Type;
1306:.././hal/stm32f3/CMSIS/core/core_cm4.h **** 
1307:.././hal/stm32f3/CMSIS/core/core_cm4.h **** /* Floating-Point Context Control Register Definitions */
1308:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define FPU_FPCCR_ASPEN_Pos                31U                                            /*!< FPCC
1309:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define FPU_FPCCR_ASPEN_Msk                (1UL << FPU_FPCCR_ASPEN_Pos)                   /*!< FPCC
1310:.././hal/stm32f3/CMSIS/core/core_cm4.h **** 
1311:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define FPU_FPCCR_LSPEN_Pos                30U                                            /*!< FPCC
1312:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define FPU_FPCCR_LSPEN_Msk                (1UL << FPU_FPCCR_LSPEN_Pos)                   /*!< FPCC
1313:.././hal/stm32f3/CMSIS/core/core_cm4.h **** 
1314:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define FPU_FPCCR_MONRDY_Pos                8U                                            /*!< FPCC
1315:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define FPU_FPCCR_MONRDY_Msk               (1UL << FPU_FPCCR_MONRDY_Pos)                  /*!< FPCC
1316:.././hal/stm32f3/CMSIS/core/core_cm4.h **** 
1317:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define FPU_FPCCR_BFRDY_Pos                 6U                                            /*!< FPCC
1318:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define FPU_FPCCR_BFRDY_Msk                (1UL << FPU_FPCCR_BFRDY_Pos)                   /*!< FPCC
1319:.././hal/stm32f3/CMSIS/core/core_cm4.h **** 
1320:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define FPU_FPCCR_MMRDY_Pos                 5U                                            /*!< FPCC
1321:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define FPU_FPCCR_MMRDY_Msk                (1UL << FPU_FPCCR_MMRDY_Pos)                   /*!< FPCC
1322:.././hal/stm32f3/CMSIS/core/core_cm4.h **** 
1323:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define FPU_FPCCR_HFRDY_Pos                 4U                                            /*!< FPCC
1324:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define FPU_FPCCR_HFRDY_Msk                (1UL << FPU_FPCCR_HFRDY_Pos)                   /*!< FPCC
1325:.././hal/stm32f3/CMSIS/core/core_cm4.h **** 
1326:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define FPU_FPCCR_THREAD_Pos                3U                                            /*!< FPCC
1327:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define FPU_FPCCR_THREAD_Msk               (1UL << FPU_FPCCR_THREAD_Pos)                  /*!< FPCC
1328:.././hal/stm32f3/CMSIS/core/core_cm4.h **** 
1329:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define FPU_FPCCR_USER_Pos                  1U                                            /*!< FPCC
1330:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define FPU_FPCCR_USER_Msk                 (1UL << FPU_FPCCR_USER_Pos)                    /*!< FPCC
1331:.././hal/stm32f3/CMSIS/core/core_cm4.h **** 
1332:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define FPU_FPCCR_LSPACT_Pos                0U                                            /*!< FPCC
1333:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define FPU_FPCCR_LSPACT_Msk               (1UL /*<< FPU_FPCCR_LSPACT_Pos*/)              /*!< FPCC
1334:.././hal/stm32f3/CMSIS/core/core_cm4.h **** 
1335:.././hal/stm32f3/CMSIS/core/core_cm4.h **** /* Floating-Point Context Address Register Definitions */
1336:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define FPU_FPCAR_ADDRESS_Pos               3U                                            /*!< FPCA
1337:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define FPU_FPCAR_ADDRESS_Msk              (0x1FFFFFFFUL << FPU_FPCAR_ADDRESS_Pos)        /*!< FPCA
1338:.././hal/stm32f3/CMSIS/core/core_cm4.h **** 
1339:.././hal/stm32f3/CMSIS/core/core_cm4.h **** /* Floating-Point Default Status Control Register Definitions */
1340:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define FPU_FPDSCR_AHP_Pos                 26U                                            /*!< FPDS
1341:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define FPU_FPDSCR_AHP_Msk                 (1UL << FPU_FPDSCR_AHP_Pos)                    /*!< FPDS
1342:.././hal/stm32f3/CMSIS/core/core_cm4.h **** 
1343:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define FPU_FPDSCR_DN_Pos                  25U                                            /*!< FPDS
1344:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define FPU_FPDSCR_DN_Msk                  (1UL << FPU_FPDSCR_DN_Pos)                     /*!< FPDS
1345:.././hal/stm32f3/CMSIS/core/core_cm4.h **** 
1346:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define FPU_FPDSCR_FZ_Pos                  24U                                            /*!< FPDS
1347:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define FPU_FPDSCR_FZ_Msk                  (1UL << FPU_FPDSCR_FZ_Pos)                     /*!< FPDS
1348:.././hal/stm32f3/CMSIS/core/core_cm4.h **** 
1349:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define FPU_FPDSCR_RMode_Pos               22U                                            /*!< FPDS
1350:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define FPU_FPDSCR_RMode_Msk               (3UL << FPU_FPDSCR_RMode_Pos)                  /*!< FPDS
1351:.././hal/stm32f3/CMSIS/core/core_cm4.h **** 
1352:.././hal/stm32f3/CMSIS/core/core_cm4.h **** /* Media and FP Feature Register 0 Definitions */
1353:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define FPU_MVFR0_FP_rounding_modes_Pos    28U                                            /*!< MVFR
1354:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define FPU_MVFR0_FP_rounding_modes_Msk    (0xFUL << FPU_MVFR0_FP_rounding_modes_Pos)     /*!< MVFR
1355:.././hal/stm32f3/CMSIS/core/core_cm4.h **** 
1356:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define FPU_MVFR0_Short_vectors_Pos        24U                                            /*!< MVFR
1357:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define FPU_MVFR0_Short_vectors_Msk        (0xFUL << FPU_MVFR0_Short_vectors_Pos)         /*!< MVFR
1358:.././hal/stm32f3/CMSIS/core/core_cm4.h **** 
1359:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define FPU_MVFR0_Square_root_Pos          20U                                            /*!< MVFR
1360:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define FPU_MVFR0_Square_root_Msk          (0xFUL << FPU_MVFR0_Square_root_Pos)           /*!< MVFR
1361:.././hal/stm32f3/CMSIS/core/core_cm4.h **** 
1362:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define FPU_MVFR0_Divide_Pos               16U                                            /*!< MVFR
1363:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define FPU_MVFR0_Divide_Msk               (0xFUL << FPU_MVFR0_Divide_Pos)                /*!< MVFR
1364:.././hal/stm32f3/CMSIS/core/core_cm4.h **** 
1365:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define FPU_MVFR0_FP_excep_trapping_Pos    12U                                            /*!< MVFR
1366:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define FPU_MVFR0_FP_excep_trapping_Msk    (0xFUL << FPU_MVFR0_FP_excep_trapping_Pos)     /*!< MVFR
1367:.././hal/stm32f3/CMSIS/core/core_cm4.h **** 
1368:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define FPU_MVFR0_Double_precision_Pos      8U                                            /*!< MVFR
1369:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define FPU_MVFR0_Double_precision_Msk     (0xFUL << FPU_MVFR0_Double_precision_Pos)      /*!< MVFR
1370:.././hal/stm32f3/CMSIS/core/core_cm4.h **** 
1371:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define FPU_MVFR0_Single_precision_Pos      4U                                            /*!< MVFR
1372:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define FPU_MVFR0_Single_precision_Msk     (0xFUL << FPU_MVFR0_Single_precision_Pos)      /*!< MVFR
1373:.././hal/stm32f3/CMSIS/core/core_cm4.h **** 
1374:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define FPU_MVFR0_A_SIMD_registers_Pos      0U                                            /*!< MVFR
1375:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define FPU_MVFR0_A_SIMD_registers_Msk     (0xFUL /*<< FPU_MVFR0_A_SIMD_registers_Pos*/)  /*!< MVFR
1376:.././hal/stm32f3/CMSIS/core/core_cm4.h **** 
1377:.././hal/stm32f3/CMSIS/core/core_cm4.h **** /* Media and FP Feature Register 1 Definitions */
1378:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define FPU_MVFR1_FP_fused_MAC_Pos         28U                                            /*!< MVFR
1379:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define FPU_MVFR1_FP_fused_MAC_Msk         (0xFUL << FPU_MVFR1_FP_fused_MAC_Pos)          /*!< MVFR
1380:.././hal/stm32f3/CMSIS/core/core_cm4.h **** 
1381:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define FPU_MVFR1_FP_HPFP_Pos              24U                                            /*!< MVFR
1382:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define FPU_MVFR1_FP_HPFP_Msk              (0xFUL << FPU_MVFR1_FP_HPFP_Pos)               /*!< MVFR
1383:.././hal/stm32f3/CMSIS/core/core_cm4.h **** 
1384:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define FPU_MVFR1_D_NaN_mode_Pos            4U                                            /*!< MVFR
1385:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define FPU_MVFR1_D_NaN_mode_Msk           (0xFUL << FPU_MVFR1_D_NaN_mode_Pos)            /*!< MVFR
1386:.././hal/stm32f3/CMSIS/core/core_cm4.h **** 
1387:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define FPU_MVFR1_FtZ_mode_Pos              0U                                            /*!< MVFR
1388:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define FPU_MVFR1_FtZ_mode_Msk             (0xFUL /*<< FPU_MVFR1_FtZ_mode_Pos*/)          /*!< MVFR
1389:.././hal/stm32f3/CMSIS/core/core_cm4.h **** 
1390:.././hal/stm32f3/CMSIS/core/core_cm4.h **** /*@} end of group CMSIS_FPU */
1391:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #endif
1392:.././hal/stm32f3/CMSIS/core/core_cm4.h **** 
1393:.././hal/stm32f3/CMSIS/core/core_cm4.h **** 
1394:.././hal/stm32f3/CMSIS/core/core_cm4.h **** /**
1395:.././hal/stm32f3/CMSIS/core/core_cm4.h ****   \ingroup  CMSIS_core_register
1396:.././hal/stm32f3/CMSIS/core/core_cm4.h ****   \defgroup CMSIS_CoreDebug       Core Debug Registers (CoreDebug)
1397:.././hal/stm32f3/CMSIS/core/core_cm4.h ****   \brief    Type definitions for the Core Debug Registers
1398:.././hal/stm32f3/CMSIS/core/core_cm4.h ****   @{
1399:.././hal/stm32f3/CMSIS/core/core_cm4.h ****  */
1400:.././hal/stm32f3/CMSIS/core/core_cm4.h **** 
1401:.././hal/stm32f3/CMSIS/core/core_cm4.h **** /**
1402:.././hal/stm32f3/CMSIS/core/core_cm4.h ****   \brief  Structure type to access the Core Debug Register (CoreDebug).
1403:.././hal/stm32f3/CMSIS/core/core_cm4.h ****  */
1404:.././hal/stm32f3/CMSIS/core/core_cm4.h **** typedef struct
1405:.././hal/stm32f3/CMSIS/core/core_cm4.h **** {
1406:.././hal/stm32f3/CMSIS/core/core_cm4.h ****   __IOM uint32_t DHCSR;                  /*!< Offset: 0x000 (R/W)  Debug Halting Control and Status
1407:.././hal/stm32f3/CMSIS/core/core_cm4.h ****   __OM  uint32_t DCRSR;                  /*!< Offset: 0x004 ( /W)  Debug Core Register Selector Reg
1408:.././hal/stm32f3/CMSIS/core/core_cm4.h ****   __IOM uint32_t DCRDR;                  /*!< Offset: 0x008 (R/W)  Debug Core Register Data Registe
1409:.././hal/stm32f3/CMSIS/core/core_cm4.h ****   __IOM uint32_t DEMCR;                  /*!< Offset: 0x00C (R/W)  Debug Exception and Monitor Cont
1410:.././hal/stm32f3/CMSIS/core/core_cm4.h **** } CoreDebug_Type;
1411:.././hal/stm32f3/CMSIS/core/core_cm4.h **** 
1412:.././hal/stm32f3/CMSIS/core/core_cm4.h **** /* Debug Halting Control and Status Register Definitions */
1413:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define CoreDebug_DHCSR_DBGKEY_Pos         16U                                            /*!< Core
1414:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define CoreDebug_DHCSR_DBGKEY_Msk         (0xFFFFUL << CoreDebug_DHCSR_DBGKEY_Pos)       /*!< Core
1415:.././hal/stm32f3/CMSIS/core/core_cm4.h **** 
1416:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define CoreDebug_DHCSR_S_RESET_ST_Pos     25U                                            /*!< Core
1417:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define CoreDebug_DHCSR_S_RESET_ST_Msk     (1UL << CoreDebug_DHCSR_S_RESET_ST_Pos)        /*!< Core
1418:.././hal/stm32f3/CMSIS/core/core_cm4.h **** 
1419:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define CoreDebug_DHCSR_S_RETIRE_ST_Pos    24U                                            /*!< Core
1420:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define CoreDebug_DHCSR_S_RETIRE_ST_Msk    (1UL << CoreDebug_DHCSR_S_RETIRE_ST_Pos)       /*!< Core
1421:.././hal/stm32f3/CMSIS/core/core_cm4.h **** 
1422:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define CoreDebug_DHCSR_S_LOCKUP_Pos       19U                                            /*!< Core
1423:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define CoreDebug_DHCSR_S_LOCKUP_Msk       (1UL << CoreDebug_DHCSR_S_LOCKUP_Pos)          /*!< Core
1424:.././hal/stm32f3/CMSIS/core/core_cm4.h **** 
1425:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define CoreDebug_DHCSR_S_SLEEP_Pos        18U                                            /*!< Core
1426:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define CoreDebug_DHCSR_S_SLEEP_Msk        (1UL << CoreDebug_DHCSR_S_SLEEP_Pos)           /*!< Core
1427:.././hal/stm32f3/CMSIS/core/core_cm4.h **** 
1428:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define CoreDebug_DHCSR_S_HALT_Pos         17U                                            /*!< Core
1429:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define CoreDebug_DHCSR_S_HALT_Msk         (1UL << CoreDebug_DHCSR_S_HALT_Pos)            /*!< Core
1430:.././hal/stm32f3/CMSIS/core/core_cm4.h **** 
1431:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define CoreDebug_DHCSR_S_REGRDY_Pos       16U                                            /*!< Core
1432:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define CoreDebug_DHCSR_S_REGRDY_Msk       (1UL << CoreDebug_DHCSR_S_REGRDY_Pos)          /*!< Core
1433:.././hal/stm32f3/CMSIS/core/core_cm4.h **** 
1434:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define CoreDebug_DHCSR_C_SNAPSTALL_Pos     5U                                            /*!< Core
1435:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define CoreDebug_DHCSR_C_SNAPSTALL_Msk    (1UL << CoreDebug_DHCSR_C_SNAPSTALL_Pos)       /*!< Core
1436:.././hal/stm32f3/CMSIS/core/core_cm4.h **** 
1437:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define CoreDebug_DHCSR_C_MASKINTS_Pos      3U                                            /*!< Core
1438:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define CoreDebug_DHCSR_C_MASKINTS_Msk     (1UL << CoreDebug_DHCSR_C_MASKINTS_Pos)        /*!< Core
1439:.././hal/stm32f3/CMSIS/core/core_cm4.h **** 
1440:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define CoreDebug_DHCSR_C_STEP_Pos          2U                                            /*!< Core
1441:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define CoreDebug_DHCSR_C_STEP_Msk         (1UL << CoreDebug_DHCSR_C_STEP_Pos)            /*!< Core
1442:.././hal/stm32f3/CMSIS/core/core_cm4.h **** 
1443:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define CoreDebug_DHCSR_C_HALT_Pos          1U                                            /*!< Core
1444:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define CoreDebug_DHCSR_C_HALT_Msk         (1UL << CoreDebug_DHCSR_C_HALT_Pos)            /*!< Core
1445:.././hal/stm32f3/CMSIS/core/core_cm4.h **** 
1446:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define CoreDebug_DHCSR_C_DEBUGEN_Pos       0U                                            /*!< Core
1447:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define CoreDebug_DHCSR_C_DEBUGEN_Msk      (1UL /*<< CoreDebug_DHCSR_C_DEBUGEN_Pos*/)     /*!< Core
1448:.././hal/stm32f3/CMSIS/core/core_cm4.h **** 
1449:.././hal/stm32f3/CMSIS/core/core_cm4.h **** /* Debug Core Register Selector Register Definitions */
1450:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define CoreDebug_DCRSR_REGWnR_Pos         16U                                            /*!< Core
1451:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define CoreDebug_DCRSR_REGWnR_Msk         (1UL << CoreDebug_DCRSR_REGWnR_Pos)            /*!< Core
1452:.././hal/stm32f3/CMSIS/core/core_cm4.h **** 
1453:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define CoreDebug_DCRSR_REGSEL_Pos          0U                                            /*!< Core
1454:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define CoreDebug_DCRSR_REGSEL_Msk         (0x1FUL /*<< CoreDebug_DCRSR_REGSEL_Pos*/)     /*!< Core
1455:.././hal/stm32f3/CMSIS/core/core_cm4.h **** 
1456:.././hal/stm32f3/CMSIS/core/core_cm4.h **** /* Debug Exception and Monitor Control Register Definitions */
1457:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define CoreDebug_DEMCR_TRCENA_Pos         24U                                            /*!< Core
1458:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define CoreDebug_DEMCR_TRCENA_Msk         (1UL << CoreDebug_DEMCR_TRCENA_Pos)            /*!< Core
1459:.././hal/stm32f3/CMSIS/core/core_cm4.h **** 
1460:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define CoreDebug_DEMCR_MON_REQ_Pos        19U                                            /*!< Core
1461:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define CoreDebug_DEMCR_MON_REQ_Msk        (1UL << CoreDebug_DEMCR_MON_REQ_Pos)           /*!< Core
1462:.././hal/stm32f3/CMSIS/core/core_cm4.h **** 
1463:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define CoreDebug_DEMCR_MON_STEP_Pos       18U                                            /*!< Core
1464:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define CoreDebug_DEMCR_MON_STEP_Msk       (1UL << CoreDebug_DEMCR_MON_STEP_Pos)          /*!< Core
1465:.././hal/stm32f3/CMSIS/core/core_cm4.h **** 
1466:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define CoreDebug_DEMCR_MON_PEND_Pos       17U                                            /*!< Core
1467:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define CoreDebug_DEMCR_MON_PEND_Msk       (1UL << CoreDebug_DEMCR_MON_PEND_Pos)          /*!< Core
1468:.././hal/stm32f3/CMSIS/core/core_cm4.h **** 
1469:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define CoreDebug_DEMCR_MON_EN_Pos         16U                                            /*!< Core
1470:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define CoreDebug_DEMCR_MON_EN_Msk         (1UL << CoreDebug_DEMCR_MON_EN_Pos)            /*!< Core
1471:.././hal/stm32f3/CMSIS/core/core_cm4.h **** 
1472:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define CoreDebug_DEMCR_VC_HARDERR_Pos     10U                                            /*!< Core
1473:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define CoreDebug_DEMCR_VC_HARDERR_Msk     (1UL << CoreDebug_DEMCR_VC_HARDERR_Pos)        /*!< Core
1474:.././hal/stm32f3/CMSIS/core/core_cm4.h **** 
1475:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define CoreDebug_DEMCR_VC_INTERR_Pos       9U                                            /*!< Core
1476:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define CoreDebug_DEMCR_VC_INTERR_Msk      (1UL << CoreDebug_DEMCR_VC_INTERR_Pos)         /*!< Core
1477:.././hal/stm32f3/CMSIS/core/core_cm4.h **** 
1478:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define CoreDebug_DEMCR_VC_BUSERR_Pos       8U                                            /*!< Core
1479:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define CoreDebug_DEMCR_VC_BUSERR_Msk      (1UL << CoreDebug_DEMCR_VC_BUSERR_Pos)         /*!< Core
1480:.././hal/stm32f3/CMSIS/core/core_cm4.h **** 
1481:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define CoreDebug_DEMCR_VC_STATERR_Pos      7U                                            /*!< Core
1482:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define CoreDebug_DEMCR_VC_STATERR_Msk     (1UL << CoreDebug_DEMCR_VC_STATERR_Pos)        /*!< Core
1483:.././hal/stm32f3/CMSIS/core/core_cm4.h **** 
1484:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define CoreDebug_DEMCR_VC_CHKERR_Pos       6U                                            /*!< Core
1485:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define CoreDebug_DEMCR_VC_CHKERR_Msk      (1UL << CoreDebug_DEMCR_VC_CHKERR_Pos)         /*!< Core
1486:.././hal/stm32f3/CMSIS/core/core_cm4.h **** 
1487:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define CoreDebug_DEMCR_VC_NOCPERR_Pos      5U                                            /*!< Core
1488:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define CoreDebug_DEMCR_VC_NOCPERR_Msk     (1UL << CoreDebug_DEMCR_VC_NOCPERR_Pos)        /*!< Core
1489:.././hal/stm32f3/CMSIS/core/core_cm4.h **** 
1490:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define CoreDebug_DEMCR_VC_MMERR_Pos        4U                                            /*!< Core
1491:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define CoreDebug_DEMCR_VC_MMERR_Msk       (1UL << CoreDebug_DEMCR_VC_MMERR_Pos)          /*!< Core
1492:.././hal/stm32f3/CMSIS/core/core_cm4.h **** 
1493:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define CoreDebug_DEMCR_VC_CORERESET_Pos    0U                                            /*!< Core
1494:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define CoreDebug_DEMCR_VC_CORERESET_Msk   (1UL /*<< CoreDebug_DEMCR_VC_CORERESET_Pos*/)  /*!< Core
1495:.././hal/stm32f3/CMSIS/core/core_cm4.h **** 
1496:.././hal/stm32f3/CMSIS/core/core_cm4.h **** /*@} end of group CMSIS_CoreDebug */
1497:.././hal/stm32f3/CMSIS/core/core_cm4.h **** 
1498:.././hal/stm32f3/CMSIS/core/core_cm4.h **** 
1499:.././hal/stm32f3/CMSIS/core/core_cm4.h **** /**
1500:.././hal/stm32f3/CMSIS/core/core_cm4.h ****   \ingroup    CMSIS_core_register
1501:.././hal/stm32f3/CMSIS/core/core_cm4.h ****   \defgroup   CMSIS_core_bitfield     Core register bit field macros
1502:.././hal/stm32f3/CMSIS/core/core_cm4.h ****   \brief      Macros for use with bit field definitions (xxx_Pos, xxx_Msk).
1503:.././hal/stm32f3/CMSIS/core/core_cm4.h ****   @{
1504:.././hal/stm32f3/CMSIS/core/core_cm4.h ****  */
1505:.././hal/stm32f3/CMSIS/core/core_cm4.h **** 
1506:.././hal/stm32f3/CMSIS/core/core_cm4.h **** /**
1507:.././hal/stm32f3/CMSIS/core/core_cm4.h ****   \brief   Mask and shift a bit field value for use in a register bit range.
1508:.././hal/stm32f3/CMSIS/core/core_cm4.h ****   \param[in] field  Name of the register bit field.
1509:.././hal/stm32f3/CMSIS/core/core_cm4.h ****   \param[in] value  Value of the bit field.
1510:.././hal/stm32f3/CMSIS/core/core_cm4.h ****   \return           Masked and shifted value.
1511:.././hal/stm32f3/CMSIS/core/core_cm4.h **** */
1512:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define _VAL2FLD(field, value)    ((value << field ## _Pos) & field ## _Msk)
1513:.././hal/stm32f3/CMSIS/core/core_cm4.h **** 
1514:.././hal/stm32f3/CMSIS/core/core_cm4.h **** /**
1515:.././hal/stm32f3/CMSIS/core/core_cm4.h ****   \brief     Mask and shift a register value to extract a bit filed value.
1516:.././hal/stm32f3/CMSIS/core/core_cm4.h ****   \param[in] field  Name of the register bit field.
1517:.././hal/stm32f3/CMSIS/core/core_cm4.h ****   \param[in] value  Value of register.
1518:.././hal/stm32f3/CMSIS/core/core_cm4.h ****   \return           Masked and shifted bit field value.
1519:.././hal/stm32f3/CMSIS/core/core_cm4.h **** */
1520:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define _FLD2VAL(field, value)    ((value & field ## _Msk) >> field ## _Pos)
1521:.././hal/stm32f3/CMSIS/core/core_cm4.h **** 
1522:.././hal/stm32f3/CMSIS/core/core_cm4.h **** /*@} end of group CMSIS_core_bitfield */
1523:.././hal/stm32f3/CMSIS/core/core_cm4.h **** 
1524:.././hal/stm32f3/CMSIS/core/core_cm4.h **** 
1525:.././hal/stm32f3/CMSIS/core/core_cm4.h **** /**
1526:.././hal/stm32f3/CMSIS/core/core_cm4.h ****   \ingroup    CMSIS_core_register
1527:.././hal/stm32f3/CMSIS/core/core_cm4.h ****   \defgroup   CMSIS_core_base     Core Definitions
1528:.././hal/stm32f3/CMSIS/core/core_cm4.h ****   \brief      Definitions for base addresses, unions, and structures.
1529:.././hal/stm32f3/CMSIS/core/core_cm4.h ****   @{
1530:.././hal/stm32f3/CMSIS/core/core_cm4.h ****  */
1531:.././hal/stm32f3/CMSIS/core/core_cm4.h **** 
1532:.././hal/stm32f3/CMSIS/core/core_cm4.h **** /* Memory mapping of Cortex-M4 Hardware */
1533:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define SCS_BASE            (0xE000E000UL)                            /*!< System Control Space Bas
1534:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define ITM_BASE            (0xE0000000UL)                            /*!< ITM Base Address */
1535:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define DWT_BASE            (0xE0001000UL)                            /*!< DWT Base Address */
1536:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define TPI_BASE            (0xE0040000UL)                            /*!< TPI Base Address */
1537:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define CoreDebug_BASE      (0xE000EDF0UL)                            /*!< Core Debug Base Address 
1538:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define SysTick_BASE        (SCS_BASE +  0x0010UL)                    /*!< SysTick Base Address */
1539:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define NVIC_BASE           (SCS_BASE +  0x0100UL)                    /*!< NVIC Base Address */
1540:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define SCB_BASE            (SCS_BASE +  0x0D00UL)                    /*!< System Control Block Bas
1541:.././hal/stm32f3/CMSIS/core/core_cm4.h **** 
1542:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define SCnSCB              ((SCnSCB_Type    *)     SCS_BASE      )   /*!< System control Register 
1543:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define SCB                 ((SCB_Type       *)     SCB_BASE      )   /*!< SCB configuration struct
1544:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define SysTick             ((SysTick_Type   *)     SysTick_BASE  )   /*!< SysTick configuration st
1545:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define NVIC                ((NVIC_Type      *)     NVIC_BASE     )   /*!< NVIC configuration struc
1546:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define ITM                 ((ITM_Type       *)     ITM_BASE      )   /*!< ITM configuration struct
1547:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define DWT                 ((DWT_Type       *)     DWT_BASE      )   /*!< DWT configuration struct
1548:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define TPI                 ((TPI_Type       *)     TPI_BASE      )   /*!< TPI configuration struct
1549:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #define CoreDebug           ((CoreDebug_Type *)     CoreDebug_BASE)   /*!< Core Debug configuration
1550:.././hal/stm32f3/CMSIS/core/core_cm4.h **** 
1551:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #if (__MPU_PRESENT == 1U)
1552:.././hal/stm32f3/CMSIS/core/core_cm4.h ****   #define MPU_BASE          (SCS_BASE +  0x0D90UL)                    /*!< Memory Protection Unit *
1553:.././hal/stm32f3/CMSIS/core/core_cm4.h ****   #define MPU               ((MPU_Type       *)     MPU_BASE      )   /*!< Memory Protection Unit *
1554:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #endif
1555:.././hal/stm32f3/CMSIS/core/core_cm4.h **** 
1556:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #if (__FPU_PRESENT == 1U)
1557:.././hal/stm32f3/CMSIS/core/core_cm4.h ****   #define FPU_BASE          (SCS_BASE +  0x0F30UL)                    /*!< Floating Point Unit */
1558:.././hal/stm32f3/CMSIS/core/core_cm4.h ****   #define FPU               ((FPU_Type       *)     FPU_BASE      )   /*!< Floating Point Unit */
1559:.././hal/stm32f3/CMSIS/core/core_cm4.h **** #endif
1560:.././hal/stm32f3/CMSIS/core/core_cm4.h **** 
1561:.././hal/stm32f3/CMSIS/core/core_cm4.h **** /*@} */
1562:.././hal/stm32f3/CMSIS/core/core_cm4.h **** 
1563:.././hal/stm32f3/CMSIS/core/core_cm4.h **** 
1564:.././hal/stm32f3/CMSIS/core/core_cm4.h **** 
1565:.././hal/stm32f3/CMSIS/core/core_cm4.h **** /*******************************************************************************
1566:.././hal/stm32f3/CMSIS/core/core_cm4.h ****  *                Hardware Abstraction Layer
1567:.././hal/stm32f3/CMSIS/core/core_cm4.h ****   Core Function Interface contains:
1568:.././hal/stm32f3/CMSIS/core/core_cm4.h ****   - Core NVIC Functions
1569:.././hal/stm32f3/CMSIS/core/core_cm4.h ****   - Core SysTick Functions
1570:.././hal/stm32f3/CMSIS/core/core_cm4.h ****   - Core Debug Functions
1571:.././hal/stm32f3/CMSIS/core/core_cm4.h ****   - Core Register Access Functions
1572:.././hal/stm32f3/CMSIS/core/core_cm4.h ****  ******************************************************************************/
1573:.././hal/stm32f3/CMSIS/core/core_cm4.h **** /**
1574:.././hal/stm32f3/CMSIS/core/core_cm4.h ****   \defgroup CMSIS_Core_FunctionInterface Functions and Instructions Reference
1575:.././hal/stm32f3/CMSIS/core/core_cm4.h **** */
1576:.././hal/stm32f3/CMSIS/core/core_cm4.h **** 
1577:.././hal/stm32f3/CMSIS/core/core_cm4.h **** 
1578:.././hal/stm32f3/CMSIS/core/core_cm4.h **** 
1579:.././hal/stm32f3/CMSIS/core/core_cm4.h **** /* ##########################   NVIC functions  #################################### */
1580:.././hal/stm32f3/CMSIS/core/core_cm4.h **** /**
1581:.././hal/stm32f3/CMSIS/core/core_cm4.h ****   \ingroup  CMSIS_Core_FunctionInterface
1582:.././hal/stm32f3/CMSIS/core/core_cm4.h ****   \defgroup CMSIS_Core_NVICFunctions NVIC Functions
1583:.././hal/stm32f3/CMSIS/core/core_cm4.h ****   \brief    Functions that manage interrupts and exceptions via the NVIC.
1584:.././hal/stm32f3/CMSIS/core/core_cm4.h ****   @{
1585:.././hal/stm32f3/CMSIS/core/core_cm4.h ****  */
1586:.././hal/stm32f3/CMSIS/core/core_cm4.h **** 
1587:.././hal/stm32f3/CMSIS/core/core_cm4.h **** /**
1588:.././hal/stm32f3/CMSIS/core/core_cm4.h ****   \brief   Set Priority Grouping
1589:.././hal/stm32f3/CMSIS/core/core_cm4.h ****   \details Sets the priority grouping field using the required unlock sequence.
1590:.././hal/stm32f3/CMSIS/core/core_cm4.h ****            The parameter PriorityGroup is assigned to the field SCB->AIRCR [10:8] PRIGROUP field.
1591:.././hal/stm32f3/CMSIS/core/core_cm4.h ****            Only values from 0..7 are used.
1592:.././hal/stm32f3/CMSIS/core/core_cm4.h ****            In case of a conflict between priority grouping and available
1593:.././hal/stm32f3/CMSIS/core/core_cm4.h ****            priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
1594:.././hal/stm32f3/CMSIS/core/core_cm4.h ****   \param [in]      PriorityGroup  Priority grouping field.
1595:.././hal/stm32f3/CMSIS/core/core_cm4.h ****  */
1596:.././hal/stm32f3/CMSIS/core/core_cm4.h **** __STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
1597:.././hal/stm32f3/CMSIS/core/core_cm4.h **** {
1598:.././hal/stm32f3/CMSIS/core/core_cm4.h ****   uint32_t reg_value;
1599:.././hal/stm32f3/CMSIS/core/core_cm4.h ****   uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 a
1600:.././hal/stm32f3/CMSIS/core/core_cm4.h **** 
1601:.././hal/stm32f3/CMSIS/core/core_cm4.h ****   reg_value  =  SCB->AIRCR;                                                   /* read old register 
1602:.././hal/stm32f3/CMSIS/core/core_cm4.h ****   reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to chan
1603:.././hal/stm32f3/CMSIS/core/core_cm4.h ****   reg_value  =  (reg_value                                   |
1604:.././hal/stm32f3/CMSIS/core/core_cm4.h ****                 ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
1605:.././hal/stm32f3/CMSIS/core/core_cm4.h ****                 (PriorityGroupTmp << 8U)                      );              /* Insert write key a
1606:.././hal/stm32f3/CMSIS/core/core_cm4.h ****   SCB->AIRCR =  reg_value;
1607:.././hal/stm32f3/CMSIS/core/core_cm4.h **** }
1608:.././hal/stm32f3/CMSIS/core/core_cm4.h **** 
1609:.././hal/stm32f3/CMSIS/core/core_cm4.h **** 
1610:.././hal/stm32f3/CMSIS/core/core_cm4.h **** /**
1611:.././hal/stm32f3/CMSIS/core/core_cm4.h ****   \brief   Get Priority Grouping
1612:.././hal/stm32f3/CMSIS/core/core_cm4.h ****   \details Reads the priority grouping field from the NVIC Interrupt Controller.
1613:.././hal/stm32f3/CMSIS/core/core_cm4.h ****   \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
1614:.././hal/stm32f3/CMSIS/core/core_cm4.h ****  */
1615:.././hal/stm32f3/CMSIS/core/core_cm4.h **** __STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
1616:.././hal/stm32f3/CMSIS/core/core_cm4.h **** {
1617:.././hal/stm32f3/CMSIS/core/core_cm4.h ****   return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
  36              		.loc 2 1617 0
  37 0000 174B     		ldr	r3, .L6
  38 0002 DB68     		ldr	r3, [r3, #12]
  39              	.LVL1:
  40              	.LBE169:
  41              	.LBE168:
  42              	.LBB170:
  43              	.LBB171:
1618:.././hal/stm32f3/CMSIS/core/core_cm4.h **** }
1619:.././hal/stm32f3/CMSIS/core/core_cm4.h **** 
1620:.././hal/stm32f3/CMSIS/core/core_cm4.h **** 
1621:.././hal/stm32f3/CMSIS/core/core_cm4.h **** /**
1622:.././hal/stm32f3/CMSIS/core/core_cm4.h ****   \brief   Enable External Interrupt
1623:.././hal/stm32f3/CMSIS/core/core_cm4.h ****   \details Enables a device-specific interrupt in the NVIC interrupt controller.
1624:.././hal/stm32f3/CMSIS/core/core_cm4.h ****   \param [in]      IRQn  External interrupt number. Value cannot be negative.
1625:.././hal/stm32f3/CMSIS/core/core_cm4.h ****  */
1626:.././hal/stm32f3/CMSIS/core/core_cm4.h **** __STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
1627:.././hal/stm32f3/CMSIS/core/core_cm4.h **** {
1628:.././hal/stm32f3/CMSIS/core/core_cm4.h ****   NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0
1629:.././hal/stm32f3/CMSIS/core/core_cm4.h **** }
1630:.././hal/stm32f3/CMSIS/core/core_cm4.h **** 
1631:.././hal/stm32f3/CMSIS/core/core_cm4.h **** 
1632:.././hal/stm32f3/CMSIS/core/core_cm4.h **** /**
1633:.././hal/stm32f3/CMSIS/core/core_cm4.h ****   \brief   Disable External Interrupt
1634:.././hal/stm32f3/CMSIS/core/core_cm4.h ****   \details Disables a device-specific interrupt in the NVIC interrupt controller.
1635:.././hal/stm32f3/CMSIS/core/core_cm4.h ****   \param [in]      IRQn  External interrupt number. Value cannot be negative.
1636:.././hal/stm32f3/CMSIS/core/core_cm4.h ****  */
1637:.././hal/stm32f3/CMSIS/core/core_cm4.h **** __STATIC_INLINE void NVIC_DisableIRQ(IRQn_Type IRQn)
1638:.././hal/stm32f3/CMSIS/core/core_cm4.h **** {
1639:.././hal/stm32f3/CMSIS/core/core_cm4.h ****   NVIC->ICER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0
1640:.././hal/stm32f3/CMSIS/core/core_cm4.h **** }
1641:.././hal/stm32f3/CMSIS/core/core_cm4.h **** 
1642:.././hal/stm32f3/CMSIS/core/core_cm4.h **** 
1643:.././hal/stm32f3/CMSIS/core/core_cm4.h **** /**
1644:.././hal/stm32f3/CMSIS/core/core_cm4.h ****   \brief   Get Pending Interrupt
1645:.././hal/stm32f3/CMSIS/core/core_cm4.h ****   \details Reads the pending register in the NVIC and returns the pending bit for the specified int
1646:.././hal/stm32f3/CMSIS/core/core_cm4.h ****   \param [in]      IRQn  Interrupt number.
1647:.././hal/stm32f3/CMSIS/core/core_cm4.h ****   \return             0  Interrupt status is not pending.
1648:.././hal/stm32f3/CMSIS/core/core_cm4.h ****   \return             1  Interrupt status is pending.
1649:.././hal/stm32f3/CMSIS/core/core_cm4.h ****  */
1650:.././hal/stm32f3/CMSIS/core/core_cm4.h **** __STATIC_INLINE uint32_t NVIC_GetPendingIRQ(IRQn_Type IRQn)
1651:.././hal/stm32f3/CMSIS/core/core_cm4.h **** {
1652:.././hal/stm32f3/CMSIS/core/core_cm4.h ****   return((uint32_t)(((NVIC->ISPR[(((uint32_t)(int32_t)IRQn) >> 5UL)] & (1UL << (((uint32_t)(int32_t
1653:.././hal/stm32f3/CMSIS/core/core_cm4.h **** }
1654:.././hal/stm32f3/CMSIS/core/core_cm4.h **** 
1655:.././hal/stm32f3/CMSIS/core/core_cm4.h **** 
1656:.././hal/stm32f3/CMSIS/core/core_cm4.h **** /**
1657:.././hal/stm32f3/CMSIS/core/core_cm4.h ****   \brief   Set Pending Interrupt
1658:.././hal/stm32f3/CMSIS/core/core_cm4.h ****   \details Sets the pending bit of an external interrupt.
1659:.././hal/stm32f3/CMSIS/core/core_cm4.h ****   \param [in]      IRQn  Interrupt number. Value cannot be negative.
1660:.././hal/stm32f3/CMSIS/core/core_cm4.h ****  */
1661:.././hal/stm32f3/CMSIS/core/core_cm4.h **** __STATIC_INLINE void NVIC_SetPendingIRQ(IRQn_Type IRQn)
1662:.././hal/stm32f3/CMSIS/core/core_cm4.h **** {
1663:.././hal/stm32f3/CMSIS/core/core_cm4.h ****   NVIC->ISPR[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0
1664:.././hal/stm32f3/CMSIS/core/core_cm4.h **** }
1665:.././hal/stm32f3/CMSIS/core/core_cm4.h **** 
1666:.././hal/stm32f3/CMSIS/core/core_cm4.h **** 
1667:.././hal/stm32f3/CMSIS/core/core_cm4.h **** /**
1668:.././hal/stm32f3/CMSIS/core/core_cm4.h ****   \brief   Clear Pending Interrupt
1669:.././hal/stm32f3/CMSIS/core/core_cm4.h ****   \details Clears the pending bit of an external interrupt.
1670:.././hal/stm32f3/CMSIS/core/core_cm4.h ****   \param [in]      IRQn  External interrupt number. Value cannot be negative.
1671:.././hal/stm32f3/CMSIS/core/core_cm4.h ****  */
1672:.././hal/stm32f3/CMSIS/core/core_cm4.h **** __STATIC_INLINE void NVIC_ClearPendingIRQ(IRQn_Type IRQn)
1673:.././hal/stm32f3/CMSIS/core/core_cm4.h **** {
1674:.././hal/stm32f3/CMSIS/core/core_cm4.h ****   NVIC->ICPR[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0
1675:.././hal/stm32f3/CMSIS/core/core_cm4.h **** }
1676:.././hal/stm32f3/CMSIS/core/core_cm4.h **** 
1677:.././hal/stm32f3/CMSIS/core/core_cm4.h **** 
1678:.././hal/stm32f3/CMSIS/core/core_cm4.h **** /**
1679:.././hal/stm32f3/CMSIS/core/core_cm4.h ****   \brief   Get Active Interrupt
1680:.././hal/stm32f3/CMSIS/core/core_cm4.h ****   \details Reads the active register in NVIC and returns the active bit.
1681:.././hal/stm32f3/CMSIS/core/core_cm4.h ****   \param [in]      IRQn  Interrupt number.
1682:.././hal/stm32f3/CMSIS/core/core_cm4.h ****   \return             0  Interrupt status is not active.
1683:.././hal/stm32f3/CMSIS/core/core_cm4.h ****   \return             1  Interrupt status is active.
1684:.././hal/stm32f3/CMSIS/core/core_cm4.h ****  */
1685:.././hal/stm32f3/CMSIS/core/core_cm4.h **** __STATIC_INLINE uint32_t NVIC_GetActive(IRQn_Type IRQn)
1686:.././hal/stm32f3/CMSIS/core/core_cm4.h **** {
1687:.././hal/stm32f3/CMSIS/core/core_cm4.h ****   return((uint32_t)(((NVIC->IABR[(((uint32_t)(int32_t)IRQn) >> 5UL)] & (1UL << (((uint32_t)(int32_t
1688:.././hal/stm32f3/CMSIS/core/core_cm4.h **** }
1689:.././hal/stm32f3/CMSIS/core/core_cm4.h **** 
1690:.././hal/stm32f3/CMSIS/core/core_cm4.h **** 
1691:.././hal/stm32f3/CMSIS/core/core_cm4.h **** /**
1692:.././hal/stm32f3/CMSIS/core/core_cm4.h ****   \brief   Set Interrupt Priority
1693:.././hal/stm32f3/CMSIS/core/core_cm4.h ****   \details Sets the priority of an interrupt.
1694:.././hal/stm32f3/CMSIS/core/core_cm4.h ****   \note    The priority cannot be set for every core interrupt.
1695:.././hal/stm32f3/CMSIS/core/core_cm4.h ****   \param [in]      IRQn  Interrupt number.
1696:.././hal/stm32f3/CMSIS/core/core_cm4.h ****   \param [in]  priority  Priority to set.
1697:.././hal/stm32f3/CMSIS/core/core_cm4.h ****  */
1698:.././hal/stm32f3/CMSIS/core/core_cm4.h **** __STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
1699:.././hal/stm32f3/CMSIS/core/core_cm4.h **** {
1700:.././hal/stm32f3/CMSIS/core/core_cm4.h ****   if ((int32_t)(IRQn) < 0)
1701:.././hal/stm32f3/CMSIS/core/core_cm4.h ****   {
1702:.././hal/stm32f3/CMSIS/core/core_cm4.h ****     SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BI
1703:.././hal/stm32f3/CMSIS/core/core_cm4.h ****   }
1704:.././hal/stm32f3/CMSIS/core/core_cm4.h ****   else
1705:.././hal/stm32f3/CMSIS/core/core_cm4.h ****   {
1706:.././hal/stm32f3/CMSIS/core/core_cm4.h ****     NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BI
1707:.././hal/stm32f3/CMSIS/core/core_cm4.h ****   }
1708:.././hal/stm32f3/CMSIS/core/core_cm4.h **** }
1709:.././hal/stm32f3/CMSIS/core/core_cm4.h **** 
1710:.././hal/stm32f3/CMSIS/core/core_cm4.h **** 
1711:.././hal/stm32f3/CMSIS/core/core_cm4.h **** /**
1712:.././hal/stm32f3/CMSIS/core/core_cm4.h ****   \brief   Get Interrupt Priority
1713:.././hal/stm32f3/CMSIS/core/core_cm4.h ****   \details Reads the priority of an interrupt.
1714:.././hal/stm32f3/CMSIS/core/core_cm4.h ****            The interrupt number can be positive to specify an external (device specific) interrupt,
1715:.././hal/stm32f3/CMSIS/core/core_cm4.h ****            or negative to specify an internal (core) interrupt.
1716:.././hal/stm32f3/CMSIS/core/core_cm4.h ****   \param [in]   IRQn  Interrupt number.
1717:.././hal/stm32f3/CMSIS/core/core_cm4.h ****   \return             Interrupt Priority.
1718:.././hal/stm32f3/CMSIS/core/core_cm4.h ****                       Value is aligned automatically to the implemented priority bits of the microc
1719:.././hal/stm32f3/CMSIS/core/core_cm4.h ****  */
1720:.././hal/stm32f3/CMSIS/core/core_cm4.h **** __STATIC_INLINE uint32_t NVIC_GetPriority(IRQn_Type IRQn)
1721:.././hal/stm32f3/CMSIS/core/core_cm4.h **** {
1722:.././hal/stm32f3/CMSIS/core/core_cm4.h **** 
1723:.././hal/stm32f3/CMSIS/core/core_cm4.h ****   if ((int32_t)(IRQn) < 0)
1724:.././hal/stm32f3/CMSIS/core/core_cm4.h ****   {
1725:.././hal/stm32f3/CMSIS/core/core_cm4.h ****     return(((uint32_t)SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] >> (8U - __NVIC_PRIO_BITS))
1726:.././hal/stm32f3/CMSIS/core/core_cm4.h ****   }
1727:.././hal/stm32f3/CMSIS/core/core_cm4.h ****   else
1728:.././hal/stm32f3/CMSIS/core/core_cm4.h ****   {
1729:.././hal/stm32f3/CMSIS/core/core_cm4.h ****     return(((uint32_t)NVIC->IP[((uint32_t)(int32_t)IRQn)]               >> (8U - __NVIC_PRIO_BITS))
1730:.././hal/stm32f3/CMSIS/core/core_cm4.h ****   }
1731:.././hal/stm32f3/CMSIS/core/core_cm4.h **** }
1732:.././hal/stm32f3/CMSIS/core/core_cm4.h **** 
1733:.././hal/stm32f3/CMSIS/core/core_cm4.h **** 
1734:.././hal/stm32f3/CMSIS/core/core_cm4.h **** /**
1735:.././hal/stm32f3/CMSIS/core/core_cm4.h ****   \brief   Encode Priority
1736:.././hal/stm32f3/CMSIS/core/core_cm4.h ****   \details Encodes the priority for an interrupt with the given priority group,
1737:.././hal/stm32f3/CMSIS/core/core_cm4.h ****            preemptive priority value, and subpriority value.
1738:.././hal/stm32f3/CMSIS/core/core_cm4.h ****            In case of a conflict between priority grouping and available
1739:.././hal/stm32f3/CMSIS/core/core_cm4.h ****            priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
1740:.././hal/stm32f3/CMSIS/core/core_cm4.h ****   \param [in]     PriorityGroup  Used priority group.
1741:.././hal/stm32f3/CMSIS/core/core_cm4.h ****   \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
1742:.././hal/stm32f3/CMSIS/core/core_cm4.h ****   \param [in]       SubPriority  Subpriority value (starting from 0).
1743:.././hal/stm32f3/CMSIS/core/core_cm4.h ****   \return                        Encoded priority. Value can be used in the function \ref NVIC_SetP
1744:.././hal/stm32f3/CMSIS/core/core_cm4.h ****  */
1745:.././hal/stm32f3/CMSIS/core/core_cm4.h **** __STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uin
1746:.././hal/stm32f3/CMSIS/core/core_cm4.h **** {
1747:.././hal/stm32f3/CMSIS/core/core_cm4.h ****   uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used   
  44              		.loc 2 1747 0
  45 0004 C3F30223 		ubfx	r3, r3, #8, #3
  46              	.LVL2:
  47              	.LBE171:
  48              	.LBE170:
  49              		.loc 1 53 0
  50 0008 30B5     		push	{r4, r5, lr}
  51              	.LCFI0:
  52              		.cfi_def_cfa_offset 12
  53              		.cfi_offset 4, -12
  54              		.cfi_offset 5, -8
  55              		.cfi_offset 14, -4
  56              	.LBB174:
  57              	.LBB172:
1748:.././hal/stm32f3/CMSIS/core/core_cm4.h ****   uint32_t PreemptPriorityBits;
1749:.././hal/stm32f3/CMSIS/core/core_cm4.h ****   uint32_t SubPriorityBits;
1750:.././hal/stm32f3/CMSIS/core/core_cm4.h **** 
1751:.././hal/stm32f3/CMSIS/core/core_cm4.h ****   PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NV
  58              		.loc 2 1751 0
  59 000a C3F10704 		rsb	r4, r3, #7
1752:.././hal/stm32f3/CMSIS/core/core_cm4.h ****   SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint
  60              		.loc 2 1752 0
  61 000e 1D1D     		adds	r5, r3, #4
1751:.././hal/stm32f3/CMSIS/core/core_cm4.h ****   SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint
  62              		.loc 2 1751 0
  63 0010 042C     		cmp	r4, #4
  64 0012 28BF     		it	cs
  65 0014 0424     		movcs	r4, #4
  66              	.LVL3:
  67              		.loc 2 1752 0
  68 0016 062D     		cmp	r5, #6
1753:.././hal/stm32f3/CMSIS/core/core_cm4.h **** 
1754:.././hal/stm32f3/CMSIS/core/core_cm4.h ****   return (
  69              		.loc 2 1754 0
  70 0018 4FF00105 		mov	r5, #1
  71 001c 05FA04F4 		lsl	r4, r5, r4
  72              	.LVL4:
  73 0020 04F1FF34 		add	r4, r4, #-1
1752:.././hal/stm32f3/CMSIS/core/core_cm4.h **** 
  74              		.loc 2 1752 0
  75 0024 8CBF     		ite	hi
  76 0026 033B     		subhi	r3, r3, #3
  77              	.LVL5:
  78 0028 0023     		movls	r3, #0
  79              	.LVL6:
  80              		.loc 2 1754 0
  81 002a 0C40     		ands	r4, r4, r1
  82 002c 9C40     		lsls	r4, r4, r3
  83 002e 05FA03F3 		lsl	r3, r5, r3
  84              	.LVL7:
  85 0032 013B     		subs	r3, r3, #1
  86 0034 1A40     		ands	r2, r2, r3
  87              	.LVL8:
  88              	.LBE172:
  89              	.LBE174:
  90              	.LBB175:
  91              	.LBB176:
1700:.././hal/stm32f3/CMSIS/core/core_cm4.h ****   {
  92              		.loc 2 1700 0
  93 0036 0028     		cmp	r0, #0
  94              	.LBE176:
  95              	.LBE175:
  96              	.LBB178:
  97              	.LBB173:
  98              		.loc 2 1754 0
  99 0038 42EA0402 		orr	r2, r2, r4
 100              	.LVL9:
 101 003c 4FEA0212 		lsl	r2, r2, #4
 102              	.LBE173:
 103              	.LBE178:
 104              	.LBB179:
 105              	.LBB177:
1706:.././hal/stm32f3/CMSIS/core/core_cm4.h ****   }
 106              		.loc 2 1706 0
 107 0040 AFBF     		iteee	ge
 108 0042 00F16040 		addge	r0, r0, #-536870912
 109              	.LVL10:
1702:.././hal/stm32f3/CMSIS/core/core_cm4.h ****   }
 110              		.loc 2 1702 0
 111 0046 00F00F00 		andlt	r0, r0, #15
 112 004a 064B     		ldrlt	r3, .L6+4
 113 004c D2B2     		uxtblt	r2, r2
1706:.././hal/stm32f3/CMSIS/core/core_cm4.h ****   }
 114              		.loc 2 1706 0
 115 004e A5BF     		ittet	ge
 116 0050 00F56140 		addge	r0, r0, #57600
 117 0054 D2B2     		uxtbge	r2, r2
1702:.././hal/stm32f3/CMSIS/core/core_cm4.h ****   }
 118              		.loc 2 1702 0
 119 0056 1A54     		strblt	r2, [r3, r0]
1706:.././hal/stm32f3/CMSIS/core/core_cm4.h ****   }
 120              		.loc 2 1706 0
 121 0058 80F80023 		strbge	r2, [r0, #768]
 122              	.LVL11:
 123 005c 30BD     		pop	{r4, r5, pc}
 124              	.L7:
 125 005e 00BF     		.align	2
 126              	.L6:
 127 0060 00ED00E0 		.word	-536810240
 128 0064 14ED00E0 		.word	-536810220
 129              	.LBE177:
 130              	.LBE179:
 131              		.cfi_endproc
 132              	.LFE124:
 134              		.section	.text.HAL_InitTick,"ax",%progbits
 135              		.align	1
 136              		.global	HAL_InitTick
 137              		.thumb
 138              		.thumb_func
 140              	HAL_InitTick:
 141              	.LFB125:
  54:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   uint32_t prioritygroup = 0x00U;
  55:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   
  56:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   /* Check the parameters */
  57:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  58:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  59:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   
  60:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   prioritygroup = NVIC_GetPriorityGrouping();
  61:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   
  62:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
  63:.././hal/stm32f3/stm32f3_hal_lowlevel.c **** }
  64:.././hal/stm32f3/stm32f3_hal_lowlevel.c **** 
  65:.././hal/stm32f3/stm32f3_hal_lowlevel.c **** #ifndef ENABLE_TICK_TIMING
  66:.././hal/stm32f3/stm32f3_hal_lowlevel.c **** HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
  67:.././hal/stm32f3/stm32f3_hal_lowlevel.c **** {
 142              		.loc 1 67 0
 143              		.cfi_startproc
 144              		@ args = 0, pretend = 0, frame = 0
 145              		@ frame_needed = 0, uses_anonymous_args = 0
 146              		@ link register save eliminated.
 147              	.LVL12:
  68:.././hal/stm32f3/stm32f3_hal_lowlevel.c **** 	hal_sys_tick = 0;
 148              		.loc 1 68 0
 149 0000 014B     		ldr	r3, .L9
 150 0002 0020     		movs	r0, #0
 151              	.LVL13:
 152 0004 1860     		str	r0, [r3]
  69:.././hal/stm32f3/stm32f3_hal_lowlevel.c **** 	return HAL_OK;
  70:.././hal/stm32f3/stm32f3_hal_lowlevel.c **** }
 153              		.loc 1 70 0
 154 0006 7047     		bx	lr
 155              	.L10:
 156              		.align	2
 157              	.L9:
 158 0008 00000000 		.word	.LANCHOR0
 159              		.cfi_endproc
 160              	.LFE125:
 162              		.section	.text.HAL_GetTick,"ax",%progbits
 163              		.align	1
 164              		.global	HAL_GetTick
 165              		.thumb
 166              		.thumb_func
 168              	HAL_GetTick:
 169              	.LFB126:
  71:.././hal/stm32f3/stm32f3_hal_lowlevel.c **** uint32_t HAL_GetTick(void)
  72:.././hal/stm32f3/stm32f3_hal_lowlevel.c **** {
 170              		.loc 1 72 0
 171              		.cfi_startproc
 172              		@ args = 0, pretend = 0, frame = 0
 173              		@ frame_needed = 0, uses_anonymous_args = 0
 174              		@ link register save eliminated.
  73:.././hal/stm32f3/stm32f3_hal_lowlevel.c **** 	return hal_sys_tick++;
 175              		.loc 1 73 0
 176 0000 024B     		ldr	r3, .L12
 177 0002 1868     		ldr	r0, [r3]
 178 0004 421C     		adds	r2, r0, #1
 179 0006 1A60     		str	r2, [r3]
  74:.././hal/stm32f3/stm32f3_hal_lowlevel.c **** }
 180              		.loc 1 74 0
 181 0008 7047     		bx	lr
 182              	.L13:
 183 000a 00BF     		.align	2
 184              	.L12:
 185 000c 00000000 		.word	.LANCHOR0
 186              		.cfi_endproc
 187              	.LFE126:
 189              		.section	.text.HAL_IncTick,"ax",%progbits
 190              		.align	1
 191              		.global	HAL_IncTick
 192              		.thumb
 193              		.thumb_func
 195              	HAL_IncTick:
 196              	.LFB127:
  75:.././hal/stm32f3/stm32f3_hal_lowlevel.c **** void HAL_IncTick(void)
  76:.././hal/stm32f3/stm32f3_hal_lowlevel.c **** {
 197              		.loc 1 76 0
 198              		.cfi_startproc
 199              		@ args = 0, pretend = 0, frame = 0
 200              		@ frame_needed = 0, uses_anonymous_args = 0
 201              		@ link register save eliminated.
 202 0000 7047     		bx	lr
 203              		.cfi_endproc
 204              	.LFE127:
 206              		.section	.text.HAL_RCC_GetSysClockFreq,"ax",%progbits
 207              		.align	1
 208              		.global	HAL_RCC_GetSysClockFreq
 209              		.thumb
 210              		.thumb_func
 212              	HAL_RCC_GetSysClockFreq:
 213              	.LFB145:
 214              		.cfi_startproc
 215              		@ args = 0, pretend = 0, frame = 0
 216              		@ frame_needed = 0, uses_anonymous_args = 0
 217              		@ link register save eliminated.
 218 0000 4FF4E100 		mov	r0, #7372800
 219 0004 7047     		bx	lr
 220              		.cfi_endproc
 221              	.LFE145:
 223              		.section	.text.HAL_RCC_GetPCLK1Freq,"ax",%progbits
 224              		.align	1
 225              		.global	HAL_RCC_GetPCLK1Freq
 226              		.thumb
 227              		.thumb_func
 229              	HAL_RCC_GetPCLK1Freq:
 230              	.LFB143:
 231              		.cfi_startproc
 232              		@ args = 0, pretend = 0, frame = 0
 233              		@ frame_needed = 0, uses_anonymous_args = 0
 234              		@ link register save eliminated.
 235 0000 4FF4E100 		mov	r0, #7372800
 236 0004 7047     		bx	lr
 237              		.cfi_endproc
 238              	.LFE143:
 240              		.section	.text.HAL_RCC_OscConfig,"ax",%progbits
 241              		.align	1
 242              		.global	HAL_RCC_OscConfig
 243              		.thumb
 244              		.thumb_func
 246              	HAL_RCC_OscConfig:
 247              	.LFB130:
  77:.././hal/stm32f3/stm32f3_hal_lowlevel.c **** }
  78:.././hal/stm32f3/stm32f3_hal_lowlevel.c **** #else
  79:.././hal/stm32f3/stm32f3_hal_lowlevel.c **** __weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
  80:.././hal/stm32f3/stm32f3_hal_lowlevel.c **** {
  81:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   /*Configure the SysTick to have interrupt in 1ms time basis*/
  82:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   HAL_SYSTICK_Config(SystemCoreClock / 1000U);
  83:.././hal/stm32f3/stm32f3_hal_lowlevel.c **** 
  84:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   /*Configure the SysTick IRQ priority */
  85:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority ,0U);
  86:.././hal/stm32f3/stm32f3_hal_lowlevel.c **** 
  87:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****    /* Return function status */
  88:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   return HAL_OK;
  89:.././hal/stm32f3/stm32f3_hal_lowlevel.c **** }
  90:.././hal/stm32f3/stm32f3_hal_lowlevel.c **** __weak uint32_t HAL_GetTick(void)
  91:.././hal/stm32f3/stm32f3_hal_lowlevel.c **** {
  92:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   return uwTick;
  93:.././hal/stm32f3/stm32f3_hal_lowlevel.c **** }
  94:.././hal/stm32f3/stm32f3_hal_lowlevel.c **** 
  95:.././hal/stm32f3/stm32f3_hal_lowlevel.c **** __weak void HAL_IncTick(void)
  96:.././hal/stm32f3/stm32f3_hal_lowlevel.c **** {
  97:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   uwTick++;
  98:.././hal/stm32f3/stm32f3_hal_lowlevel.c **** }
  99:.././hal/stm32f3/stm32f3_hal_lowlevel.c **** #endif
 100:.././hal/stm32f3/stm32f3_hal_lowlevel.c **** 
 101:.././hal/stm32f3/stm32f3_hal_lowlevel.c **** #define RCC_CFGR_HPRE_BITNUMBER           POSITION_VAL(RCC_CFGR_HPRE)
 102:.././hal/stm32f3/stm32f3_hal_lowlevel.c **** 
 103:.././hal/stm32f3/stm32f3_hal_lowlevel.c **** #define UART_CR1_FIELDS  ((uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | \
 104:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****                                      USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8)) /*!< UART or U
 105:.././hal/stm32f3/stm32f3_hal_lowlevel.c **** 
 106:.././hal/stm32f3/stm32f3_hal_lowlevel.c **** uint32_t HAL_RCC_GetSysClockFreq(void)
 107:.././hal/stm32f3/stm32f3_hal_lowlevel.c **** {
 108:.././hal/stm32f3/stm32f3_hal_lowlevel.c **** 	return F_CPU;
 109:.././hal/stm32f3/stm32f3_hal_lowlevel.c **** }
 110:.././hal/stm32f3/stm32f3_hal_lowlevel.c **** 
 111:.././hal/stm32f3/stm32f3_hal_lowlevel.c **** uint32_t HAL_RCC_GetPCLK1Freq(void)
 112:.././hal/stm32f3/stm32f3_hal_lowlevel.c **** {
 113:.././hal/stm32f3/stm32f3_hal_lowlevel.c **** 	return F_CPU;
 114:.././hal/stm32f3/stm32f3_hal_lowlevel.c **** }
 115:.././hal/stm32f3/stm32f3_hal_lowlevel.c **** 
 116:.././hal/stm32f3/stm32f3_hal_lowlevel.c **** /**
 117:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   * @brief  Initializes the RCC Oscillators according to the specified parameters in the
 118:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   *         RCC_OscInitTypeDef.
 119:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   * @param  RCC_OscInitStruct pointer to an RCC_OscInitTypeDef structure that
 120:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   *         contains the configuration information for the RCC Oscillators.
 121:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   * @note   The PLL is not disabled when used as system clock.
 122:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   * @note   Transitions LSE Bypass to LSE On and LSE On to LSE Bypass are not
 123:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   *         supported by this macro. User should request a transition to LSE Off
 124:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   *         first and then LSE On or LSE Bypass.
 125:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   * @note   Transition HSE Bypass to HSE On and HSE On to HSE Bypass are not
 126:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   *         supported by this macro. User should request a transition to HSE Off
 127:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   *         first and then HSE On or HSE Bypass.
 128:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   * @retval HAL status
 129:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   */
 130:.././hal/stm32f3/stm32f3_hal_lowlevel.c **** HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
 131:.././hal/stm32f3/stm32f3_hal_lowlevel.c **** {
 248              		.loc 1 131 0
 249              		.cfi_startproc
 250              		@ args = 0, pretend = 0, frame = 8
 251              		@ frame_needed = 0, uses_anonymous_args = 0
 252              	.LVL14:
 132:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****    uint32_t tickstart = 0U;
 133:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   
 134:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   /* Check the parameters */
 135:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   assert_param(RCC_OscInitStruct != NULL);
 136:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
 137:.././hal/stm32f3/stm32f3_hal_lowlevel.c **** 
 138:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   /*------------------------------- HSE Configuration ------------------------*/ 
 139:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 253              		.loc 1 139 0
 254 0000 0368     		ldr	r3, [r0]
 131:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****    uint32_t tickstart = 0U;
 255              		.loc 1 131 0
 256 0002 2DE9F743 		push	{r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 257              	.LCFI1:
 258              		.cfi_def_cfa_offset 40
 259              		.cfi_offset 4, -28
 260              		.cfi_offset 5, -24
 261              		.cfi_offset 6, -20
 262              		.cfi_offset 7, -16
 263              		.cfi_offset 8, -12
 264              		.cfi_offset 9, -8
 265              		.cfi_offset 14, -4
 266              		.loc 1 139 0
 267 0006 D907     		lsls	r1, r3, #31
 131:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****    uint32_t tickstart = 0U;
 268              		.loc 1 131 0
 269 0008 0446     		mov	r4, r0
 270              		.loc 1 139 0
 271 000a 03D4     		bmi	.L18
 272              	.LVL15:
 273              	.L23:
 140:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   {
 141:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****     /* Check the parameters */
 142:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****     assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
 143:.././hal/stm32f3/stm32f3_hal_lowlevel.c **** 
 144:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****     /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowe
 145:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****     if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 146:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_
 147:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****     {
 148:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****       if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_
 149:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****       {
 150:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****         return HAL_ERROR;
 151:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****       }
 152:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****     }
 153:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****     else
 154:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****     {
 155:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****       /* Set the new HSE configuration ---------------------------------------*/
 156:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****       __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 157:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****       
 158:.././hal/stm32f3/stm32f3_hal_lowlevel.c **** #if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
 159:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****       /* Configure the HSE predivision factor --------------------------------*/
 160:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****       __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 161:.././hal/stm32f3/stm32f3_hal_lowlevel.c **** #endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
 162:.././hal/stm32f3/stm32f3_hal_lowlevel.c **** 
 163:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****        /* Check the HSE State */
 164:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****       if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 165:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****       {
 166:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****         /* Get Start Tick */
 167:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****         tickstart = HAL_GetTick();
 168:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****         
 169:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****         /* Wait till HSE is ready */
 170:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****         while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 171:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****         {
 172:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 173:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****           {
 174:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****             return HAL_TIMEOUT;
 175:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****           }
 176:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****         }
 177:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****       }
 178:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****       else
 179:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****       {
 180:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****         /* Get Start Tick */
 181:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****         tickstart = HAL_GetTick();
 182:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****         
 183:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****         /* Wait till HSE is disabled */
 184:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****         while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 185:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****         {
 186:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****            if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 187:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****           {
 188:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****             return HAL_TIMEOUT;
 189:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****           }
 190:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****         }
 191:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****       }
 192:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****     }
 193:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   }
 194:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   /*----------------------------- HSI Configuration --------------------------*/ 
 195:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 274              		.loc 1 195 0
 275 000c 2368     		ldr	r3, [r4]
 276 000e 9A07     		lsls	r2, r3, #30
 277 0010 74D4     		bmi	.L19
 278 0012 F4E0     		b	.L35
 279              	.LVL16:
 280              	.L18:
 145:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_
 281              		.loc 1 145 0
 282 0014 B649     		ldr	r1, .L113
 283 0016 4B68     		ldr	r3, [r1, #4]
 284 0018 03F00C03 		and	r3, r3, #12
 285 001c 042B     		cmp	r3, #4
 286 001e 07D0     		beq	.L21
 146:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****     {
 287              		.loc 1 146 0
 288 0020 4B68     		ldr	r3, [r1, #4]
 289 0022 03F00C03 		and	r3, r3, #12
 290 0026 082B     		cmp	r3, #8
 291 0028 17D1     		bne	.L22
 146:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****     {
 292              		.loc 1 146 0 is_stmt 0 discriminator 1
 293 002a 4B68     		ldr	r3, [r1, #4]
 294 002c DB03     		lsls	r3, r3, #15
 295 002e 14D5     		bpl	.L22
 296              	.L21:
 297              	.LVL17:
 298              	.LBB180:
 299              	.LBB181:
 300              		.file 3 ".././hal/stm32f3/CMSIS/core/cmsis_gcc.h"
   1:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h **** /**************************************************************************//**
   2:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h ****  * @file     cmsis_gcc.h
   3:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h ****  * @brief    CMSIS Cortex-M Core Function/Instruction Header File
   4:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h ****  * @version  V4.30
   5:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h ****  * @date     20. October 2015
   6:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h ****  ******************************************************************************/
   7:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h **** /* Copyright (c) 2009 - 2015 ARM LIMITED
   8:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h **** 
   9:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h ****    All rights reserved.
  10:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h ****    Redistribution and use in source and binary forms, with or without
  11:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h ****    modification, are permitted provided that the following conditions are met:
  12:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h ****    - Redistributions of source code must retain the above copyright
  13:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h ****      notice, this list of conditions and the following disclaimer.
  14:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h ****    - Redistributions in binary form must reproduce the above copyright
  15:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h ****      notice, this list of conditions and the following disclaimer in the
  16:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h ****      documentation and/or other materials provided with the distribution.
  17:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h ****    - Neither the name of ARM nor the names of its contributors may be used
  18:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h ****      to endorse or promote products derived from this software without
  19:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h ****      specific prior written permission.
  20:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h ****    *
  21:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h ****    THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  22:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h ****    AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  23:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h ****    IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  24:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h ****    ARE DISCLAIMED. IN NO EVENT SHALL COPYRIGHT HOLDERS AND CONTRIBUTORS BE
  25:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h ****    LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
  26:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h ****    CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
  27:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h ****    SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
  28:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h ****    INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
  29:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h ****    CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
  30:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h ****    ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  31:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h ****    POSSIBILITY OF SUCH DAMAGE.
  32:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h ****    ---------------------------------------------------------------------------*/
  33:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h **** 
  34:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h **** 
  35:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h **** #ifndef __CMSIS_GCC_H
  36:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h **** #define __CMSIS_GCC_H
  37:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h **** 
  38:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h **** /* ignore some GCC warnings */
  39:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h **** #if defined ( __GNUC__ )
  40:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h **** #pragma GCC diagnostic push
  41:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wsign-conversion"
  42:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wconversion"
  43:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wunused-parameter"
  44:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h **** #endif
  45:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h **** 
  46:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h **** 
  47:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h **** /* ###########################  Core Function Access  ########################### */
  48:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h **** /** \ingroup  CMSIS_Core_FunctionInterface
  49:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h ****     \defgroup CMSIS_Core_RegAccFunctions CMSIS Core Register Access Functions
  50:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h ****   @{
  51:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h ****  */
  52:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h **** 
  53:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h **** /**
  54:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h ****   \brief   Enable IRQ Interrupts
  55:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h ****   \details Enables IRQ interrupts by clearing the I-bit in the CPSR.
  56:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h ****            Can only be executed in Privileged modes.
  57:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h ****  */
  58:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
  59:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h **** {
  60:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h ****   __ASM volatile ("cpsie i" : : : "memory");
  61:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h **** }
  62:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h **** 
  63:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h **** 
  64:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h **** /**
  65:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h ****   \brief   Disable IRQ Interrupts
  66:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h ****   \details Disables IRQ interrupts by setting the I-bit in the CPSR.
  67:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h ****   Can only be executed in Privileged modes.
  68:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h ****  */
  69:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
  70:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h **** {
  71:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h ****   __ASM volatile ("cpsid i" : : : "memory");
  72:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h **** }
  73:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h **** 
  74:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h **** 
  75:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h **** /**
  76:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h ****   \brief   Get Control Register
  77:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h ****   \details Returns the content of the Control Register.
  78:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h ****   \return               Control Register value
  79:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h ****  */
  80:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_CONTROL(void)
  81:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h **** {
  82:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h ****   uint32_t result;
  83:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h **** 
  84:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h ****   __ASM volatile ("MRS %0, control" : "=r" (result) );
  85:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h ****   return(result);
  86:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h **** }
  87:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h **** 
  88:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h **** 
  89:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h **** /**
  90:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h ****   \brief   Set Control Register
  91:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h ****   \details Writes the given value to the Control Register.
  92:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h ****   \param [in]    control  Control Register value to set
  93:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h ****  */
  94:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __set_CONTROL(uint32_t control)
  95:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h **** {
  96:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h ****   __ASM volatile ("MSR control, %0" : : "r" (control) : "memory");
  97:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h **** }
  98:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h **** 
  99:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h **** 
 100:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h **** /**
 101:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h ****   \brief   Get IPSR Register
 102:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h ****   \details Returns the content of the IPSR Register.
 103:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h ****   \return               IPSR Register value
 104:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h ****  */
 105:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_IPSR(void)
 106:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h **** {
 107:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h ****   uint32_t result;
 108:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h **** 
 109:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h ****   __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 110:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h ****   return(result);
 111:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h **** }
 112:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h **** 
 113:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h **** 
 114:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h **** /**
 115:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h ****   \brief   Get APSR Register
 116:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h ****   \details Returns the content of the APSR Register.
 117:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h ****   \return               APSR Register value
 118:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h ****  */
 119:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_APSR(void)
 120:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h **** {
 121:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h ****   uint32_t result;
 122:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h **** 
 123:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h ****   __ASM volatile ("MRS %0, apsr" : "=r" (result) );
 124:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h ****   return(result);
 125:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h **** }
 126:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h **** 
 127:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h **** 
 128:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h **** /**
 129:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h ****   \brief   Get xPSR Register
 130:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h ****   \details Returns the content of the xPSR Register.
 131:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h **** 
 132:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h ****     \return               xPSR Register value
 133:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h ****  */
 134:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_xPSR(void)
 135:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h **** {
 136:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h ****   uint32_t result;
 137:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h **** 
 138:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h ****   __ASM volatile ("MRS %0, xpsr" : "=r" (result) );
 139:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h ****   return(result);
 140:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h **** }
 141:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h **** 
 142:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h **** 
 143:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h **** /**
 144:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h ****   \brief   Get Process Stack Pointer
 145:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h ****   \details Returns the current value of the Process Stack Pointer (PSP).
 146:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h ****   \return               PSP Register value
 147:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h ****  */
 148:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PSP(void)
 149:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h **** {
 150:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h ****   register uint32_t result;
 151:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h **** 
 152:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h ****   __ASM volatile ("MRS %0, psp\n"  : "=r" (result) );
 153:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h ****   return(result);
 154:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h **** }
 155:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h **** 
 156:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h **** 
 157:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h **** /**
 158:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h ****   \brief   Set Process Stack Pointer
 159:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h ****   \details Assigns the given value to the Process Stack Pointer (PSP).
 160:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h ****   \param [in]    topOfProcStack  Process Stack Pointer value to set
 161:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h ****  */
 162:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __set_PSP(uint32_t topOfProcStack)
 163:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h **** {
 164:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h ****   __ASM volatile ("MSR psp, %0\n" : : "r" (topOfProcStack) : "sp");
 165:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h **** }
 166:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h **** 
 167:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h **** 
 168:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h **** /**
 169:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h ****   \brief   Get Main Stack Pointer
 170:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h ****   \details Returns the current value of the Main Stack Pointer (MSP).
 171:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h ****   \return               MSP Register value
 172:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h ****  */
 173:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_MSP(void)
 174:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h **** {
 175:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h ****   register uint32_t result;
 176:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h **** 
 177:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h ****   __ASM volatile ("MRS %0, msp\n" : "=r" (result) );
 178:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h ****   return(result);
 179:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h **** }
 180:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h **** 
 181:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h **** 
 182:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h **** /**
 183:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h ****   \brief   Set Main Stack Pointer
 184:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h ****   \details Assigns the given value to the Main Stack Pointer (MSP).
 185:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h **** 
 186:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h ****     \param [in]    topOfMainStack  Main Stack Pointer value to set
 187:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h ****  */
 188:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __set_MSP(uint32_t topOfMainStack)
 189:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h **** {
 190:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h ****   __ASM volatile ("MSR msp, %0\n" : : "r" (topOfMainStack) : "sp");
 191:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h **** }
 192:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h **** 
 193:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h **** 
 194:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h **** /**
 195:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h ****   \brief   Get Priority Mask
 196:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h ****   \details Returns the current state of the priority mask bit from the Priority Mask Register.
 197:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h ****   \return               Priority Mask value
 198:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h ****  */
 199:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
 200:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h **** {
 201:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h ****   uint32_t result;
 202:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h **** 
 203:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h ****   __ASM volatile ("MRS %0, primask" : "=r" (result) );
 204:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h ****   return(result);
 205:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h **** }
 206:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h **** 
 207:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h **** 
 208:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h **** /**
 209:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h ****   \brief   Set Priority Mask
 210:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h ****   \details Assigns the given value to the Priority Mask Register.
 211:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h ****   \param [in]    priMask  Priority Mask
 212:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h ****  */
 213:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __set_PRIMASK(uint32_t priMask)
 214:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h **** {
 215:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h ****   __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 216:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h **** }
 217:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h **** 
 218:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h **** 
 219:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h **** #if       (__CORTEX_M >= 0x03U)
 220:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h **** 
 221:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h **** /**
 222:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h ****   \brief   Enable FIQ
 223:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h ****   \details Enables FIQ interrupts by clearing the F-bit in the CPSR.
 224:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 225:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h ****  */
 226:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_fault_irq(void)
 227:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h **** {
 228:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h ****   __ASM volatile ("cpsie f" : : : "memory");
 229:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h **** }
 230:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h **** 
 231:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h **** 
 232:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h **** /**
 233:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h ****   \brief   Disable FIQ
 234:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h ****   \details Disables FIQ interrupts by setting the F-bit in the CPSR.
 235:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 236:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h ****  */
 237:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_fault_irq(void)
 238:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h **** {
 239:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h ****   __ASM volatile ("cpsid f" : : : "memory");
 240:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h **** }
 241:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h **** 
 242:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h **** 
 243:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h **** /**
 244:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h ****   \brief   Get Base Priority
 245:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h ****   \details Returns the current value of the Base Priority register.
 246:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h ****   \return               Base Priority register value
 247:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h ****  */
 248:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_BASEPRI(void)
 249:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h **** {
 250:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h ****   uint32_t result;
 251:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h **** 
 252:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h ****   __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 253:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h ****   return(result);
 254:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h **** }
 255:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h **** 
 256:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h **** 
 257:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h **** /**
 258:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h ****   \brief   Set Base Priority
 259:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h ****   \details Assigns the given value to the Base Priority register.
 260:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h ****   \param [in]    basePri  Base Priority value to set
 261:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h ****  */
 262:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __set_BASEPRI(uint32_t value)
 263:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h **** {
 264:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h ****   __ASM volatile ("MSR basepri, %0" : : "r" (value) : "memory");
 265:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h **** }
 266:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h **** 
 267:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h **** 
 268:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h **** /**
 269:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h ****   \brief   Set Base Priority with condition
 270:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h ****   \details Assigns the given value to the Base Priority register only if BASEPRI masking is disable
 271:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h ****            or the new value increases the BASEPRI priority level.
 272:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h ****   \param [in]    basePri  Base Priority value to set
 273:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h ****  */
 274:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __set_BASEPRI_MAX(uint32_t value)
 275:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h **** {
 276:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h ****   __ASM volatile ("MSR basepri_max, %0" : : "r" (value) : "memory");
 277:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h **** }
 278:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h **** 
 279:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h **** 
 280:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h **** /**
 281:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h ****   \brief   Get Fault Mask
 282:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h ****   \details Returns the current value of the Fault Mask register.
 283:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h ****   \return               Fault Mask register value
 284:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h ****  */
 285:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_FAULTMASK(void)
 286:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h **** {
 287:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h ****   uint32_t result;
 288:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h **** 
 289:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h ****   __ASM volatile ("MRS %0, faultmask" : "=r" (result) );
 290:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h ****   return(result);
 291:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h **** }
 292:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h **** 
 293:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h **** 
 294:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h **** /**
 295:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h ****   \brief   Set Fault Mask
 296:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h ****   \details Assigns the given value to the Fault Mask register.
 297:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h ****   \param [in]    faultMask  Fault Mask value to set
 298:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h ****  */
 299:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __set_FAULTMASK(uint32_t faultMask)
 300:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h **** {
 301:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h ****   __ASM volatile ("MSR faultmask, %0" : : "r" (faultMask) : "memory");
 302:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h **** }
 303:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h **** 
 304:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h **** #endif /* (__CORTEX_M >= 0x03U) */
 305:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h **** 
 306:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h **** 
 307:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h **** #if       (__CORTEX_M == 0x04U) || (__CORTEX_M == 0x07U)
 308:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h **** 
 309:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h **** /**
 310:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h ****   \brief   Get FPSCR
 311:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h ****   \details Returns the current value of the Floating Point Status/Control register.
 312:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h ****   \return               Floating Point Status/Control register value
 313:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h ****  */
 314:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_FPSCR(void)
 315:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h **** {
 316:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h **** #if (__FPU_PRESENT == 1U) && (__FPU_USED == 1U)
 317:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h ****   uint32_t result;
 318:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h **** 
 319:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h ****   /* Empty asm statement works as a scheduling barrier */
 320:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h ****   __ASM volatile ("");
 321:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h ****   __ASM volatile ("VMRS %0, fpscr" : "=r" (result) );
 322:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h ****   __ASM volatile ("");
 323:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h ****   return(result);
 324:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h **** #else
 325:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h ****    return(0);
 326:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h **** #endif
 327:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h **** }
 328:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h **** 
 329:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h **** 
 330:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h **** /**
 331:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h ****   \brief   Set FPSCR
 332:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h ****   \details Assigns the given value to the Floating Point Status/Control register.
 333:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h ****   \param [in]    fpscr  Floating Point Status/Control value to set
 334:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h ****  */
 335:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __set_FPSCR(uint32_t fpscr)
 336:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h **** {
 337:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h **** #if (__FPU_PRESENT == 1U) && (__FPU_USED == 1U)
 338:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h ****   /* Empty asm statement works as a scheduling barrier */
 339:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h ****   __ASM volatile ("");
 340:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h ****   __ASM volatile ("VMSR fpscr, %0" : : "r" (fpscr) : "vfpcc");
 341:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h ****   __ASM volatile ("");
 342:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h **** #endif
 343:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h **** }
 344:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h **** 
 345:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h **** #endif /* (__CORTEX_M == 0x04U) || (__CORTEX_M == 0x07U) */
 346:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h **** 
 347:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h **** 
 348:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h **** 
 349:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h **** /*@} end of CMSIS_Core_RegAccFunctions */
 350:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h **** 
 351:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h **** 
 352:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h **** /* ##########################  Core Instruction Access  ######################### */
 353:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h **** /** \defgroup CMSIS_Core_InstructionInterface CMSIS Core Instruction Interface
 354:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h ****   Access to dedicated instructions
 355:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h ****   @{
 356:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h **** */
 357:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h **** 
 358:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h **** /* Define macros for porting to both thumb1 and thumb2.
 359:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h ****  * For thumb1, use low register (r0-r7), specified by constraint "l"
 360:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h ****  * Otherwise, use general registers, specified by constraint "r" */
 361:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h **** #if defined (__thumb__) && !defined (__thumb2__)
 362:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h **** #define __CMSIS_GCC_OUT_REG(r) "=l" (r)
 363:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h **** #define __CMSIS_GCC_USE_REG(r) "l" (r)
 364:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h **** #else
 365:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h **** #define __CMSIS_GCC_OUT_REG(r) "=r" (r)
 366:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h **** #define __CMSIS_GCC_USE_REG(r) "r" (r)
 367:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h **** #endif
 368:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h **** 
 369:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h **** /**
 370:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h ****   \brief   No Operation
 371:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h ****   \details No Operation does nothing. This instruction can be used for code alignment purposes.
 372:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h ****  */
 373:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __NOP(void)
 374:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h **** {
 375:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h ****   __ASM volatile ("nop");
 376:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h **** }
 377:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h **** 
 378:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h **** 
 379:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h **** /**
 380:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h ****   \brief   Wait For Interrupt
 381:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h ****   \details Wait For Interrupt is a hint instruction that suspends execution until one of a number o
 382:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h ****  */
 383:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __WFI(void)
 384:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h **** {
 385:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h ****   __ASM volatile ("wfi");
 386:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h **** }
 387:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h **** 
 388:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h **** 
 389:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h **** /**
 390:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h ****   \brief   Wait For Event
 391:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h ****   \details Wait For Event is a hint instruction that permits the processor to enter
 392:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h ****     a low-power state until one of a number of events occurs.
 393:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h ****  */
 394:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __WFE(void)
 395:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h **** {
 396:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h ****   __ASM volatile ("wfe");
 397:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h **** }
 398:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h **** 
 399:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h **** 
 400:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h **** /**
 401:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h ****   \brief   Send Event
 402:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h ****   \details Send Event is a hint instruction. It causes an event to be signaled to the CPU.
 403:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h ****  */
 404:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __SEV(void)
 405:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h **** {
 406:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h ****   __ASM volatile ("sev");
 407:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h **** }
 408:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h **** 
 409:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h **** 
 410:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h **** /**
 411:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h ****   \brief   Instruction Synchronization Barrier
 412:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h ****   \details Instruction Synchronization Barrier flushes the pipeline in the processor,
 413:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h ****            so that all instructions following the ISB are fetched from cache or memory,
 414:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h ****            after the instruction has been completed.
 415:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h ****  */
 416:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __ISB(void)
 417:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h **** {
 418:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h ****   __ASM volatile ("isb 0xF":::"memory");
 419:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h **** }
 420:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h **** 
 421:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h **** 
 422:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h **** /**
 423:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h ****   \brief   Data Synchronization Barrier
 424:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h ****   \details Acts as a special kind of Data Memory Barrier.
 425:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h ****            It completes when all explicit memory accesses before this instruction complete.
 426:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h ****  */
 427:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __DSB(void)
 428:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h **** {
 429:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h ****   __ASM volatile ("dsb 0xF":::"memory");
 430:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h **** }
 431:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h **** 
 432:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h **** 
 433:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h **** /**
 434:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h ****   \brief   Data Memory Barrier
 435:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h ****   \details Ensures the apparent order of the explicit memory operations before
 436:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h ****            and after the instruction, without ensuring their completion.
 437:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h ****  */
 438:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __DMB(void)
 439:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h **** {
 440:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h ****   __ASM volatile ("dmb 0xF":::"memory");
 441:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h **** }
 442:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h **** 
 443:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h **** 
 444:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h **** /**
 445:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h ****   \brief   Reverse byte order (32 bit)
 446:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h ****   \details Reverses the byte order in integer value.
 447:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h ****   \param [in]    value  Value to reverse
 448:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h ****   \return               Reversed value
 449:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h ****  */
 450:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE uint32_t __REV(uint32_t value)
 451:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h **** {
 452:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h **** #if (__GNUC__ > 4) || (__GNUC__ == 4 && __GNUC_MINOR__ >= 5)
 453:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h ****   return __builtin_bswap32(value);
 454:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h **** #else
 455:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h ****   uint32_t result;
 456:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h **** 
 457:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h ****   __ASM volatile ("rev %0, %1" : __CMSIS_GCC_OUT_REG (result) : __CMSIS_GCC_USE_REG (value) );
 458:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h ****   return(result);
 459:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h **** #endif
 460:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h **** }
 461:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h **** 
 462:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h **** 
 463:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h **** /**
 464:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h ****   \brief   Reverse byte order (16 bit)
 465:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h ****   \details Reverses the byte order in two unsigned short values.
 466:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h ****   \param [in]    value  Value to reverse
 467:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h ****   \return               Reversed value
 468:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h ****  */
 469:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE uint32_t __REV16(uint32_t value)
 470:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h **** {
 471:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h ****   uint32_t result;
 472:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h **** 
 473:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h ****   __ASM volatile ("rev16 %0, %1" : __CMSIS_GCC_OUT_REG (result) : __CMSIS_GCC_USE_REG (value) );
 474:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h ****   return(result);
 475:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h **** }
 476:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h **** 
 477:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h **** 
 478:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h **** /**
 479:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h ****   \brief   Reverse byte order in signed short value
 480:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h ****   \details Reverses the byte order in a signed short value with sign extension to integer.
 481:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h ****   \param [in]    value  Value to reverse
 482:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h ****   \return               Reversed value
 483:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h ****  */
 484:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE int32_t __REVSH(int32_t value)
 485:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h **** {
 486:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h **** #if (__GNUC__ > 4) || (__GNUC__ == 4 && __GNUC_MINOR__ >= 8)
 487:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h ****   return (short)__builtin_bswap16(value);
 488:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h **** #else
 489:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h ****   int32_t result;
 490:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h **** 
 491:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h ****   __ASM volatile ("revsh %0, %1" : __CMSIS_GCC_OUT_REG (result) : __CMSIS_GCC_USE_REG (value) );
 492:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h ****   return(result);
 493:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h **** #endif
 494:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h **** }
 495:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h **** 
 496:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h **** 
 497:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h **** /**
 498:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h ****   \brief   Rotate Right in unsigned value (32 bit)
 499:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h ****   \details Rotate Right (immediate) provides the value of the contents of a register rotated by a v
 500:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h ****   \param [in]    value  Value to rotate
 501:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h ****   \param [in]    value  Number of Bits to rotate
 502:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h ****   \return               Rotated value
 503:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h ****  */
 504:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE uint32_t __ROR(uint32_t op1, uint32_t op2)
 505:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h **** {
 506:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h ****   return (op1 >> op2) | (op1 << (32U - op2));
 507:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h **** }
 508:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h **** 
 509:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h **** 
 510:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h **** /**
 511:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h ****   \brief   Breakpoint
 512:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h ****   \details Causes the processor to enter Debug state.
 513:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h ****            Debug tools can use this to investigate system state when the instruction at a particula
 514:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h ****   \param [in]    value  is ignored by the processor.
 515:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h ****                  If required, a debugger can use it to store additional information about the break
 516:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h ****  */
 517:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h **** #define __BKPT(value)                       __ASM volatile ("bkpt "#value)
 518:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h **** 
 519:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h **** 
 520:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h **** /**
 521:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h ****   \brief   Reverse bit order of value
 522:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h ****   \details Reverses the bit order of the given value.
 523:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h ****   \param [in]    value  Value to reverse
 524:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h ****   \return               Reversed value
 525:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h ****  */
 526:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
 527:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h **** {
 528:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h ****   uint32_t result;
 529:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h **** 
 530:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h **** #if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
 531:.././hal/stm32f3/CMSIS/core/cmsis_gcc.h ****    __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 301              		.loc 3 531 0 is_stmt 1
 302 0030 4FF40033 		mov	r3, #131072
 303              		.syntax unified
 304              	@ 531 ".././hal/stm32f3/CMSIS/core/cmsis_gcc.h" 1
 305 0034 93FAA3F2 		rbit r2, r3
 306              	@ 0 "" 2
 307              	.LVL18:
 308              		.thumb
 309              		.syntax unified
 310              	.LBE181:
 311              	.LBE180:
 148:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****       {
 312              		.loc 1 148 0
 313 0038 0968     		ldr	r1, [r1]
 314              	.LVL19:
 315              	.LBB182:
 316              	.LBB183:
 317              		.loc 3 531 0
 318              		.syntax unified
 319              	@ 531 ".././hal/stm32f3/CMSIS/core/cmsis_gcc.h" 1
 320 003a 93FAA3F3 		rbit r3, r3
 321              	@ 0 "" 2
 322              	.LVL20:
 323              		.thumb
 324              		.syntax unified
 325              	.LBE183:
 326              	.LBE182:
 148:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****       {
 327              		.loc 1 148 0
 328 003e B3FA83F3 		clz	r3, r3
 329 0042 03F01F03 		and	r3, r3, #31
 330 0046 0122     		movs	r2, #1
 331 0048 02FA03F3 		lsl	r3, r2, r3
 332 004c 0B42     		tst	r3, r1
 333 004e DDD0     		beq	.L23
 148:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****       {
 334              		.loc 1 148 0 is_stmt 0 discriminator 13
 335 0050 6368     		ldr	r3, [r4, #4]
 336 0052 002B     		cmp	r3, #0
 337 0054 DAD1     		bne	.L23
 338              	.LVL21:
 339              	.L39:
 150:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****       }
 340              		.loc 1 150 0 is_stmt 1
 341 0056 0120     		movs	r0, #1
 342 0058 3EE2     		b	.L104
 343              	.LVL22:
 344              	.L22:
 156:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****       
 345              		.loc 1 156 0
 346 005a 6368     		ldr	r3, [r4, #4]
 347 005c B3F5803F 		cmp	r3, #65536
 348 0060 07D0     		beq	.L108
 156:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****       
 349              		.loc 1 156 0 is_stmt 0 discriminator 2
 350 0062 0A68     		ldr	r2, [r1]
 351 0064 4BB1     		cbz	r3, .L28
 156:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****       
 352              		.loc 1 156 0 discriminator 4
 353 0066 B3F5A02F 		cmp	r3, #327680
 354 006a 06D1     		bne	.L28
 156:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****       
 355              		.loc 1 156 0 discriminator 5
 356 006c 42F48022 		orr	r2, r2, #262144
 357 0070 0A60     		str	r2, [r1]
 358              	.L108:
 359 0072 0A68     		ldr	r2, [r1]
 360 0074 42F48032 		orr	r2, r2, #65536
 361 0078 05E0     		b	.L106
 362              	.L28:
 156:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****       
 363              		.loc 1 156 0 discriminator 6
 364 007a 22F48032 		bic	r2, r2, #65536
 365 007e 0A60     		str	r2, [r1]
 366 0080 0A68     		ldr	r2, [r1]
 367 0082 22F48022 		bic	r2, r2, #262144
 368              	.L106:
 369 0086 0A60     		str	r2, [r1]
 160:.././hal/stm32f3/stm32f3_hal_lowlevel.c **** #endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
 370              		.loc 1 160 0 is_stmt 1 discriminator 6
 371 0088 CA6A     		ldr	r2, [r1, #44]
 372 008a 22F00F00 		bic	r0, r2, #15
 373              	.LVL23:
 374 008e A268     		ldr	r2, [r4, #8]
 375 0090 0243     		orrs	r2, r2, r0
 376 0092 CA62     		str	r2, [r1, #44]
 164:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****       {
 377              		.loc 1 164 0 discriminator 6
 378 0094 CBB1     		cbz	r3, .L29
 167:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****         
 379              		.loc 1 167 0
 380 0096 FFF7FEFF 		bl	HAL_GetTick
 381              	.LVL24:
 382              	.LBB184:
 383              	.LBB185:
 384              		.loc 3 531 0
 385 009a 4FF40035 		mov	r5, #131072
 386              	.LBE185:
 387              	.LBE184:
 167:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****         
 388              		.loc 1 167 0
 389 009e 0746     		mov	r7, r0
 390              	.LVL25:
 170:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****         {
 391              		.loc 1 170 0
 392 00a0 0126     		movs	r6, #1
 393              	.LVL26:
 394              	.L30:
 395              	.LBB187:
 396              	.LBB186:
 397              		.loc 3 531 0
 398              		.syntax unified
 399              	@ 531 ".././hal/stm32f3/CMSIS/core/cmsis_gcc.h" 1
 400 00a2 95FAA5F3 		rbit r3, r5
 401              	@ 0 "" 2
 402              	.LVL27:
 403              		.thumb
 404              		.syntax unified
 405              	.LBE186:
 406              	.LBE187:
 170:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****         {
 407              		.loc 1 170 0
 408 00a6 0A68     		ldr	r2, [r1]
 409              	.LVL28:
 410              	.LBB188:
 411              	.LBB189:
 412              		.loc 3 531 0
 413              		.syntax unified
 414              	@ 531 ".././hal/stm32f3/CMSIS/core/cmsis_gcc.h" 1
 415 00a8 95FAA5F3 		rbit r3, r5
 416              	@ 0 "" 2
 417              	.LVL29:
 418              		.thumb
 419              		.syntax unified
 420              	.LBE189:
 421              	.LBE188:
 170:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****         {
 422              		.loc 1 170 0
 423 00ac B3FA83F3 		clz	r3, r3
 424 00b0 03F01F03 		and	r3, r3, #31
 425 00b4 06FA03F3 		lsl	r3, r6, r3
 426 00b8 1342     		tst	r3, r2
 427 00ba A7D1     		bne	.L23
 172:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****           {
 428              		.loc 1 172 0
 429 00bc FFF7FEFF 		bl	HAL_GetTick
 430              	.LVL30:
 431 00c0 C01B     		subs	r0, r0, r7
 432 00c2 6428     		cmp	r0, #100
 433 00c4 EDD9     		bls	.L30
 434              	.LVL31:
 435              	.L33:
 174:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****           }
 436              		.loc 1 174 0
 437 00c6 0320     		movs	r0, #3
 438 00c8 06E2     		b	.L104
 439              	.LVL32:
 440              	.L29:
 181:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****         
 441              		.loc 1 181 0
 442 00ca FFF7FEFF 		bl	HAL_GetTick
 443              	.LVL33:
 444              	.LBB190:
 445              	.LBB191:
 446              		.loc 3 531 0
 447 00ce 4FF40035 		mov	r5, #131072
 448              	.LBE191:
 449              	.LBE190:
 181:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****         
 450              		.loc 1 181 0
 451 00d2 0746     		mov	r7, r0
 452              	.LVL34:
 184:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****         {
 453              		.loc 1 184 0
 454 00d4 0126     		movs	r6, #1
 455              	.LVL35:
 456              	.L32:
 457              	.LBB193:
 458              	.LBB192:
 459              		.loc 3 531 0
 460              		.syntax unified
 461              	@ 531 ".././hal/stm32f3/CMSIS/core/cmsis_gcc.h" 1
 462 00d6 95FAA5F3 		rbit r3, r5
 463              	@ 0 "" 2
 464              	.LVL36:
 465              		.thumb
 466              		.syntax unified
 467              	.LBE192:
 468              	.LBE193:
 184:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****         {
 469              		.loc 1 184 0
 470 00da 0A68     		ldr	r2, [r1]
 471              	.LVL37:
 472              	.LBB194:
 473              	.LBB195:
 474              		.loc 3 531 0
 475              		.syntax unified
 476              	@ 531 ".././hal/stm32f3/CMSIS/core/cmsis_gcc.h" 1
 477 00dc 95FAA5F3 		rbit r3, r5
 478              	@ 0 "" 2
 479              	.LVL38:
 480              		.thumb
 481              		.syntax unified
 482              	.LBE195:
 483              	.LBE194:
 184:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****         {
 484              		.loc 1 184 0
 485 00e0 B3FA83F3 		clz	r3, r3
 486 00e4 03F01F03 		and	r3, r3, #31
 487 00e8 06FA03F3 		lsl	r3, r6, r3
 488 00ec 1342     		tst	r3, r2
 489 00ee 8DD0     		beq	.L23
 186:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****           {
 490              		.loc 1 186 0
 491 00f0 FFF7FEFF 		bl	HAL_GetTick
 492              	.LVL39:
 493 00f4 C01B     		subs	r0, r0, r7
 494 00f6 6428     		cmp	r0, #100
 495 00f8 EDD9     		bls	.L32
 496 00fa E4E7     		b	.L33
 497              	.LVL40:
 498              	.L19:
 196:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   {
 197:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****     /* Check the parameters */
 198:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****     assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
 199:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****     assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
 200:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****     
 201:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****     /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock *
 202:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****     if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 499              		.loc 1 202 0
 500 00fc 7C49     		ldr	r1, .L113
 501 00fe 4B68     		ldr	r3, [r1, #4]
 502 0100 13F00C0F 		tst	r3, #12
 503 0104 07D0     		beq	.L36
 203:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_
 504              		.loc 1 203 0
 505 0106 4B68     		ldr	r3, [r1, #4]
 506 0108 03F00C03 		and	r3, r3, #12
 507 010c 082B     		cmp	r3, #8
 508 010e 22D1     		bne	.L37
 509              		.loc 1 203 0 is_stmt 0 discriminator 1
 510 0110 4B68     		ldr	r3, [r1, #4]
 511 0112 DF03     		lsls	r7, r3, #15
 512 0114 1FD4     		bmi	.L37
 513              	.L36:
 514              	.LVL41:
 515              	.LBB196:
 516              	.LBB197:
 517              		.loc 3 531 0 is_stmt 1
 518 0116 0223     		movs	r3, #2
 519              		.syntax unified
 520              	@ 531 ".././hal/stm32f3/CMSIS/core/cmsis_gcc.h" 1
 521 0118 93FAA3F2 		rbit r2, r3
 522              	@ 0 "" 2
 523              	.LVL42:
 524              		.thumb
 525              		.syntax unified
 526              	.LBE197:
 527              	.LBE196:
 204:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****     {
 205:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****       /* When HSI is used as system clock it will not disabled */
 206:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****       if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_
 528              		.loc 1 206 0
 529 011c 0868     		ldr	r0, [r1]
 530              	.LVL43:
 531              	.LBB198:
 532              	.LBB199:
 533              		.loc 3 531 0
 534              		.syntax unified
 535              	@ 531 ".././hal/stm32f3/CMSIS/core/cmsis_gcc.h" 1
 536 011e 93FAA3F3 		rbit r3, r3
 537              	@ 0 "" 2
 538              	.LVL44:
 539              		.thumb
 540              		.syntax unified
 541              	.LBE199:
 542              	.LBE198:
 543              		.loc 1 206 0
 544 0122 B3FA83F3 		clz	r3, r3
 545 0126 03F01F03 		and	r3, r3, #31
 546 012a 0122     		movs	r2, #1
 547 012c 02FA03F3 		lsl	r3, r2, r3
 548 0130 0342     		tst	r3, r0
 549 0132 02D0     		beq	.L38
 550              		.loc 1 206 0 is_stmt 0 discriminator 13
 551 0134 2369     		ldr	r3, [r4, #16]
 552 0136 9342     		cmp	r3, r2
 553 0138 8DD1     		bne	.L39
 554              	.L38:
 207:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****       {
 208:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****         return HAL_ERROR;
 209:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****       }
 210:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****       /* Otherwise, just the calibration is allowed */
 211:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****       else
 212:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****       {
 213:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****         /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
 214:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****         __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 555              		.loc 1 214 0 is_stmt 1
 556 013a 0B68     		ldr	r3, [r1]
 557              	.LVL45:
 558              	.LBB200:
 559              	.LBB201:
 560              		.loc 3 531 0
 561 013c F822     		movs	r2, #248
 562              		.syntax unified
 563              	@ 531 ".././hal/stm32f3/CMSIS/core/cmsis_gcc.h" 1
 564 013e 92FAA2F2 		rbit r2, r2
 565              	@ 0 "" 2
 566              	.LVL46:
 567              		.thumb
 568              		.syntax unified
 569              	.LBE201:
 570              	.LBE200:
 571              		.loc 1 214 0
 572 0142 6069     		ldr	r0, [r4, #20]
 573 0144 B2FA82F2 		clz	r2, r2
 574 0148 00FA02F2 		lsl	r2, r0, r2
 575 014c 23F0F803 		bic	r3, r3, #248
 576 0150 1343     		orrs	r3, r3, r2
 577 0152 0B60     		str	r3, [r1]
 206:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****       {
 578              		.loc 1 206 0
 579 0154 53E0     		b	.L35
 580              	.L37:
 215:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****       }
 216:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****     }
 217:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****     else
 218:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****     {
 219:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****       /* Check the HSI State */
 220:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****       if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 581              		.loc 1 220 0
 582 0156 2269     		ldr	r2, [r4, #16]
 583 0158 0125     		movs	r5, #1
 584 015a 7AB3     		cbz	r2, .L40
 585              	.LVL47:
 586              	.LBB202:
 587              	.LBB203:
 588              		.loc 3 531 0
 589              		.syntax unified
 590              	@ 531 ".././hal/stm32f3/CMSIS/core/cmsis_gcc.h" 1
 591 015c 95FAA5F3 		rbit r3, r5
 592              	@ 0 "" 2
 593              	.LVL48:
 594              		.thumb
 595              		.syntax unified
 596              	.LBE203:
 597              	.LBE202:
 221:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****       {
 222:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****        /* Enable the Internal High Speed oscillator (HSI). */
 223:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****         __HAL_RCC_HSI_ENABLE();
 598              		.loc 1 223 0
 599 0160 B3FA83F3 		clz	r3, r3
 600 0164 03F18453 		add	r3, r3, #276824064
 601 0168 03F58413 		add	r3, r3, #1081344
 602 016c 9B00     		lsls	r3, r3, #2
 603              	.LBB204:
 604              	.LBB205:
 605              		.loc 3 531 0
 606 016e 0226     		movs	r6, #2
 607              	.LBE205:
 608              	.LBE204:
 609              		.loc 1 223 0
 610 0170 1D60     		str	r5, [r3]
 224:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****         
 225:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****         /* Get Start Tick */
 226:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****         tickstart = HAL_GetTick();
 611              		.loc 1 226 0
 612 0172 FFF7FEFF 		bl	HAL_GetTick
 613              	.LVL49:
 614 0176 0746     		mov	r7, r0
 615              	.LVL50:
 616              	.L41:
 617              	.LBB207:
 618              	.LBB206:
 619              		.loc 3 531 0
 620              		.syntax unified
 621              	@ 531 ".././hal/stm32f3/CMSIS/core/cmsis_gcc.h" 1
 622 0178 96FAA6F3 		rbit r3, r6
 623              	@ 0 "" 2
 624              	.LVL51:
 625              		.thumb
 626              		.syntax unified
 627              	.LBE206:
 628              	.LBE207:
 227:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****         
 228:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****         /* Wait till HSI is ready */
 229:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****         while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 629              		.loc 1 229 0
 630 017c 5C48     		ldr	r0, .L113
 631 017e 0A68     		ldr	r2, [r1]
 632              	.LVL52:
 633              	.LBB208:
 634              	.LBB209:
 635              		.loc 3 531 0
 636              		.syntax unified
 637              	@ 531 ".././hal/stm32f3/CMSIS/core/cmsis_gcc.h" 1
 638 0180 96FAA6F3 		rbit r3, r6
 639              	@ 0 "" 2
 640              	.LVL53:
 641              		.thumb
 642              		.syntax unified
 643              	.LBE209:
 644              	.LBE208:
 645              		.loc 1 229 0
 646 0184 B3FA83F3 		clz	r3, r3
 647 0188 03F01F03 		and	r3, r3, #31
 648 018c 05FA03F3 		lsl	r3, r5, r3
 649 0190 1342     		tst	r3, r2
 650 0192 05D1     		bne	.L111
 230:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****         {
 231:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****           if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 651              		.loc 1 231 0
 652 0194 FFF7FEFF 		bl	HAL_GetTick
 653              	.LVL54:
 654 0198 C01B     		subs	r0, r0, r7
 655 019a 0228     		cmp	r0, #2
 656 019c ECD9     		bls	.L41
 657 019e 92E7     		b	.L33
 658              	.L111:
 232:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****           {
 233:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****             return HAL_TIMEOUT;
 234:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****           }
 235:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****         }
 236:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****                 
 237:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****         /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
 238:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****         __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 659              		.loc 1 238 0
 660 01a0 0368     		ldr	r3, [r0]
 661              	.LVL55:
 662              	.LBB210:
 663              	.LBB211:
 664              		.loc 3 531 0
 665 01a2 F822     		movs	r2, #248
 666              		.syntax unified
 667              	@ 531 ".././hal/stm32f3/CMSIS/core/cmsis_gcc.h" 1
 668 01a4 92FAA2F2 		rbit r2, r2
 669              	@ 0 "" 2
 670              	.LVL56:
 671              		.thumb
 672              		.syntax unified
 673              	.LBE211:
 674              	.LBE210:
 675              		.loc 1 238 0
 676 01a8 6169     		ldr	r1, [r4, #20]
 677 01aa B2FA82F2 		clz	r2, r2
 678 01ae 01FA02F2 		lsl	r2, r1, r2
 679 01b2 23F0F803 		bic	r3, r3, #248
 680 01b6 1343     		orrs	r3, r3, r2
 681 01b8 0360     		str	r3, [r0]
 682 01ba 20E0     		b	.L35
 683              	.LVL57:
 684              	.L40:
 685              	.LBB212:
 686              	.LBB213:
 687              		.loc 3 531 0
 688              		.syntax unified
 689              	@ 531 ".././hal/stm32f3/CMSIS/core/cmsis_gcc.h" 1
 690 01bc 95FAA5F3 		rbit r3, r5
 691              	@ 0 "" 2
 692              	.LVL58:
 693              		.thumb
 694              		.syntax unified
 695              	.LBE213:
 696              	.LBE212:
 239:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****       }
 240:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****       else
 241:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****       {
 242:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****         /* Disable the Internal High Speed oscillator (HSI). */
 243:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****         __HAL_RCC_HSI_DISABLE();
 697              		.loc 1 243 0
 698 01c0 B3FA83F3 		clz	r3, r3
 699 01c4 03F18453 		add	r3, r3, #276824064
 700 01c8 03F58413 		add	r3, r3, #1081344
 701 01cc 9B00     		lsls	r3, r3, #2
 702              	.LBB214:
 703              	.LBB215:
 704              		.loc 3 531 0
 705 01ce 0226     		movs	r6, #2
 706              	.LBE215:
 707              	.LBE214:
 708              		.loc 1 243 0
 709 01d0 1A60     		str	r2, [r3]
 244:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****         
 245:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****         /* Get Start Tick */
 246:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****         tickstart = HAL_GetTick();
 710              		.loc 1 246 0
 711 01d2 FFF7FEFF 		bl	HAL_GetTick
 712              	.LVL59:
 713 01d6 0746     		mov	r7, r0
 714              	.LVL60:
 715              	.L43:
 716              	.LBB217:
 717              	.LBB216:
 718              		.loc 3 531 0
 719              		.syntax unified
 720              	@ 531 ".././hal/stm32f3/CMSIS/core/cmsis_gcc.h" 1
 721 01d8 96FAA6F3 		rbit r3, r6
 722              	@ 0 "" 2
 723              	.LVL61:
 724              		.thumb
 725              		.syntax unified
 726              	.LBE216:
 727              	.LBE217:
 247:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****         
 248:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****         /* Wait till HSI is disabled */
 249:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****         while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 728              		.loc 1 249 0
 729 01dc 0A68     		ldr	r2, [r1]
 730              	.LVL62:
 731              	.LBB218:
 732              	.LBB219:
 733              		.loc 3 531 0
 734              		.syntax unified
 735              	@ 531 ".././hal/stm32f3/CMSIS/core/cmsis_gcc.h" 1
 736 01de 96FAA6F3 		rbit r3, r6
 737              	@ 0 "" 2
 738              	.LVL63:
 739              		.thumb
 740              		.syntax unified
 741              	.LBE219:
 742              	.LBE218:
 743              		.loc 1 249 0
 744 01e2 B3FA83F3 		clz	r3, r3
 745 01e6 03F01F03 		and	r3, r3, #31
 746 01ea 05FA03F3 		lsl	r3, r5, r3
 747 01ee 1342     		tst	r3, r2
 748 01f0 05D0     		beq	.L35
 250:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****         {
 251:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****           if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 749              		.loc 1 251 0
 750 01f2 FFF7FEFF 		bl	HAL_GetTick
 751              	.LVL64:
 752 01f6 C01B     		subs	r0, r0, r7
 753 01f8 0228     		cmp	r0, #2
 754 01fa EDD9     		bls	.L43
 755 01fc 63E7     		b	.L33
 756              	.LVL65:
 757              	.L35:
 252:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****           {
 253:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****             return HAL_TIMEOUT;
 254:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****           }
 255:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****         }
 256:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****       }
 257:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****     }
 258:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   }
 259:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   /*------------------------------ LSI Configuration -------------------------*/ 
 260:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 758              		.loc 1 260 0
 759 01fe 2368     		ldr	r3, [r4]
 760 0200 1E07     		lsls	r6, r3, #28
 761 0202 03D4     		bmi	.L45
 762              	.L51:
 261:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   {
 262:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****     /* Check the parameters */
 263:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****     assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
 264:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****     
 265:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****     /* Check the LSI State */
 266:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****     if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 267:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****     {
 268:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****       /* Enable the Internal Low Speed oscillator (LSI). */
 269:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****       __HAL_RCC_LSI_ENABLE();
 270:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****       
 271:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****       /* Get Start Tick */
 272:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****       tickstart = HAL_GetTick();
 273:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****       
 274:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****       /* Wait till LSI is ready */  
 275:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****       while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 276:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****       {
 277:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****         if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 278:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****         {
 279:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****           return HAL_TIMEOUT;
 280:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****         }
 281:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****       }
 282:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****     }
 283:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****     else
 284:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****     {
 285:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****       /* Disable the Internal Low Speed oscillator (LSI). */
 286:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****       __HAL_RCC_LSI_DISABLE();
 287:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****       
 288:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****       /* Get Start Tick */
 289:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****       tickstart = HAL_GetTick();
 290:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****       
 291:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****       /* Wait till LSI is disabled */  
 292:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****       while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 293:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****       {
 294:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****         if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 295:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****         {
 296:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****           return HAL_TIMEOUT;
 297:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****         }
 298:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****       }
 299:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****     }
 300:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   }
 301:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   /*------------------------------ LSE Configuration -------------------------*/ 
 302:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 763              		.loc 1 302 0
 764 0204 2368     		ldr	r3, [r4]
 765 0206 5D07     		lsls	r5, r3, #29
 766 0208 4AD4     		bmi	.L46
 767 020a DEE0     		b	.L54
 768              	.L45:
 266:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****     {
 769              		.loc 1 266 0
 770 020c A069     		ldr	r0, [r4, #24]
 771 020e 384D     		ldr	r5, .L113
 772 0210 0121     		movs	r1, #1
 773 0212 10B3     		cbz	r0, .L48
 774              	.LVL66:
 775              	.LBB220:
 776              	.LBB221:
 777              		.loc 3 531 0
 778              		.syntax unified
 779              	@ 531 ".././hal/stm32f3/CMSIS/core/cmsis_gcc.h" 1
 780 0214 91FAA1F2 		rbit r2, r1
 781              	@ 0 "" 2
 782              	.LVL67:
 783              		.thumb
 784              		.syntax unified
 785              	.LBE221:
 786              	.LBE220:
 269:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****       
 787              		.loc 1 269 0
 788 0218 364B     		ldr	r3, .L113+4
 789 021a B2FA82F2 		clz	r2, r2
 790 021e 1344     		add	r3, r3, r2
 791 0220 9B00     		lsls	r3, r3, #2
 792              	.LBB222:
 793              	.LBB223:
 794              		.loc 3 531 0
 795 0222 0226     		movs	r6, #2
 796              	.LBE223:
 797              	.LBE222:
 269:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****       
 798              		.loc 1 269 0
 799 0224 1960     		str	r1, [r3]
 272:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****       
 800              		.loc 1 272 0
 801 0226 FFF7FEFF 		bl	HAL_GetTick
 802              	.LVL68:
 803 022a 0746     		mov	r7, r0
 804              	.LVL69:
 805              	.L49:
 806              	.LBB225:
 807              	.LBB224:
 808              		.loc 3 531 0
 809              		.syntax unified
 810              	@ 531 ".././hal/stm32f3/CMSIS/core/cmsis_gcc.h" 1
 811 022c 96FAA6F3 		rbit r3, r6
 812              	@ 0 "" 2
 813              	.LVL70:
 814              		.thumb
 815              		.syntax unified
 816              	.LBE224:
 817              	.LBE225:
 818              	.LBB226:
 819              	.LBB227:
 820              		.syntax unified
 821              	@ 531 ".././hal/stm32f3/CMSIS/core/cmsis_gcc.h" 1
 822 0230 96FAA6F3 		rbit r3, r6
 823              	@ 0 "" 2
 824              	.LVL71:
 825              		.thumb
 826              		.syntax unified
 827              	.LBE227:
 828              	.LBE226:
 829              	.LBB228:
 830              	.LBB229:
 831              		.syntax unified
 832              	@ 531 ".././hal/stm32f3/CMSIS/core/cmsis_gcc.h" 1
 833 0234 96FAA6F3 		rbit r3, r6
 834              	@ 0 "" 2
 835              	.LVL72:
 836              		.thumb
 837              		.syntax unified
 838              	.LBE229:
 839              	.LBE228:
 275:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****       {
 840              		.loc 1 275 0
 841 0238 6A6A     		ldr	r2, [r5, #36]
 842              	.LVL73:
 843              	.LBB230:
 844              	.LBB231:
 845              		.loc 3 531 0
 846              		.syntax unified
 847              	@ 531 ".././hal/stm32f3/CMSIS/core/cmsis_gcc.h" 1
 848 023a 96FAA6F3 		rbit r3, r6
 849              	@ 0 "" 2
 850              	.LVL74:
 851              		.thumb
 852              		.syntax unified
 853              	.LBE231:
 854              	.LBE230:
 275:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****       {
 855              		.loc 1 275 0
 856 023e B3FA83F3 		clz	r3, r3
 857 0242 03F01F03 		and	r3, r3, #31
 858 0246 01FA03F3 		lsl	r3, r1, r3
 859 024a 1342     		tst	r3, r2
 860 024c DAD1     		bne	.L51
 277:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****         {
 861              		.loc 1 277 0
 862 024e FFF7FEFF 		bl	HAL_GetTick
 863              	.LVL75:
 864 0252 C01B     		subs	r0, r0, r7
 865 0254 0228     		cmp	r0, #2
 866 0256 E9D9     		bls	.L49
 867 0258 35E7     		b	.L33
 868              	.LVL76:
 869              	.L48:
 870              	.LBB232:
 871              	.LBB233:
 872              		.loc 3 531 0
 873              		.syntax unified
 874              	@ 531 ".././hal/stm32f3/CMSIS/core/cmsis_gcc.h" 1
 875 025a 91FAA1F2 		rbit r2, r1
 876              	@ 0 "" 2
 877              	.LVL77:
 878              		.thumb
 879              		.syntax unified
 880              	.LBE233:
 881              	.LBE232:
 286:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****       
 882              		.loc 1 286 0
 883 025e 254B     		ldr	r3, .L113+4
 884 0260 B2FA82F2 		clz	r2, r2
 885 0264 1344     		add	r3, r3, r2
 886 0266 9B00     		lsls	r3, r3, #2
 887              	.LBB234:
 888              	.LBB235:
 889              		.loc 3 531 0
 890 0268 0226     		movs	r6, #2
 891              	.LBE235:
 892              	.LBE234:
 286:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****       
 893              		.loc 1 286 0
 894 026a 1860     		str	r0, [r3]
 289:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****       
 895              		.loc 1 289 0
 896 026c FFF7FEFF 		bl	HAL_GetTick
 897              	.LVL78:
 898 0270 0746     		mov	r7, r0
 899              	.LVL79:
 900              	.L52:
 901              	.LBB237:
 902              	.LBB236:
 903              		.loc 3 531 0
 904              		.syntax unified
 905              	@ 531 ".././hal/stm32f3/CMSIS/core/cmsis_gcc.h" 1
 906 0272 96FAA6F3 		rbit r3, r6
 907              	@ 0 "" 2
 908              	.LVL80:
 909              		.thumb
 910              		.syntax unified
 911              	.LBE236:
 912              	.LBE237:
 913              	.LBB238:
 914              	.LBB239:
 915              		.syntax unified
 916              	@ 531 ".././hal/stm32f3/CMSIS/core/cmsis_gcc.h" 1
 917 0276 96FAA6F3 		rbit r3, r6
 918              	@ 0 "" 2
 919              	.LVL81:
 920              		.thumb
 921              		.syntax unified
 922              	.LBE239:
 923              	.LBE238:
 924              	.LBB240:
 925              	.LBB241:
 926              		.syntax unified
 927              	@ 531 ".././hal/stm32f3/CMSIS/core/cmsis_gcc.h" 1
 928 027a 96FAA6F3 		rbit r3, r6
 929              	@ 0 "" 2
 930              	.LVL82:
 931              		.thumb
 932              		.syntax unified
 933              	.LBE241:
 934              	.LBE240:
 292:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****       {
 935              		.loc 1 292 0
 936 027e 6A6A     		ldr	r2, [r5, #36]
 937              	.LVL83:
 938              	.LBB242:
 939              	.LBB243:
 940              		.loc 3 531 0
 941              		.syntax unified
 942              	@ 531 ".././hal/stm32f3/CMSIS/core/cmsis_gcc.h" 1
 943 0280 96FAA6F3 		rbit r3, r6
 944              	@ 0 "" 2
 945              	.LVL84:
 946              		.thumb
 947              		.syntax unified
 948              	.LBE243:
 949              	.LBE242:
 292:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****       {
 950              		.loc 1 292 0
 951 0284 B3FA83F3 		clz	r3, r3
 952 0288 03F01F03 		and	r3, r3, #31
 953 028c 01FA03F3 		lsl	r3, r1, r3
 954 0290 1342     		tst	r3, r2
 955 0292 B7D0     		beq	.L51
 294:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****         {
 956              		.loc 1 294 0
 957 0294 FFF7FEFF 		bl	HAL_GetTick
 958              	.LVL85:
 959 0298 C01B     		subs	r0, r0, r7
 960 029a 0228     		cmp	r0, #2
 961 029c E9D9     		bls	.L52
 962 029e 12E7     		b	.L33
 963              	.LVL86:
 964              	.L46:
 965              	.LBB244:
 303:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   {
 304:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****     FlagStatus       pwrclkchanged = RESET;
 305:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****     
 306:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****     /* Check the parameters */
 307:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****     assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));
 308:.././hal/stm32f3/stm32f3_hal_lowlevel.c **** 
 309:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****     /* Update LSE configuration in Backup Domain control register    */
 310:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****     /* Requires to enable write access to Backup Domain of necessary */
 311:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****     if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 966              		.loc 1 311 0
 967 02a0 1349     		ldr	r1, .L113
 968 02a2 CB69     		ldr	r3, [r1, #28]
 969 02a4 D800     		lsls	r0, r3, #3
 970 02a6 0AD4     		bmi	.L84
 971              	.LBB245:
 312:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****     {
 313:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****       __HAL_RCC_PWR_CLK_ENABLE();
 972              		.loc 1 313 0
 973 02a8 CB69     		ldr	r3, [r1, #28]
 974 02aa 43F08053 		orr	r3, r3, #268435456
 975 02ae CB61     		str	r3, [r1, #28]
 976 02b0 CB69     		ldr	r3, [r1, #28]
 977 02b2 03F08053 		and	r3, r3, #268435456
 978 02b6 0193     		str	r3, [sp, #4]
 979 02b8 019B     		ldr	r3, [sp, #4]
 980              	.LVL87:
 981              	.LBE245:
 314:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****       pwrclkchanged = SET;
 982              		.loc 1 314 0
 983 02ba 0125     		movs	r5, #1
 984 02bc 00E0     		b	.L55
 985              	.LVL88:
 986              	.L84:
 304:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****     
 987              		.loc 1 304 0
 988 02be 0025     		movs	r5, #0
 989              	.LVL89:
 990              	.L55:
 315:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****     }
 316:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****     
 317:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****     if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 991              		.loc 1 317 0
 992 02c0 0D4E     		ldr	r6, .L113+8
 993 02c2 3368     		ldr	r3, [r6]
 994 02c4 DA05     		lsls	r2, r3, #23
 995 02c6 03D5     		bpl	.L56
 996              	.L61:
 318:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****     {
 319:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****       /* Enable write access to Backup domain */
 320:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****       SET_BIT(PWR->CR, PWR_CR_DBP);
 321:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****       
 322:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****       /* Wait for Backup domain Write protection disable */
 323:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****       tickstart = HAL_GetTick();
 324:.././hal/stm32f3/stm32f3_hal_lowlevel.c **** 
 325:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****       while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 326:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****       {
 327:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****         if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 328:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****         {
 329:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****           return HAL_TIMEOUT;
 330:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****         }
 331:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****       }
 332:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****     }
 333:.././hal/stm32f3/stm32f3_hal_lowlevel.c **** 
 334:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****     /* Set the new LSE configuration -----------------------------------------*/
 335:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****     __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 997              		.loc 1 335 0
 998 02c8 E368     		ldr	r3, [r4, #12]
 999 02ca 012B     		cmp	r3, #1
 1000 02cc 16D1     		bne	.L105
 1001 02ce 2BE0     		b	.L109
 1002              	.L56:
 320:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****       
 1003              		.loc 1 320 0
 1004 02d0 3368     		ldr	r3, [r6]
 1005 02d2 43F48073 		orr	r3, r3, #256
 1006 02d6 3360     		str	r3, [r6]
 323:.././hal/stm32f3/stm32f3_hal_lowlevel.c **** 
 1007              		.loc 1 323 0
 1008 02d8 FFF7FEFF 		bl	HAL_GetTick
 1009              	.LVL90:
 1010 02dc 0746     		mov	r7, r0
 1011              	.LVL91:
 1012              	.L59:
 325:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****       {
 1013              		.loc 1 325 0
 1014 02de 3368     		ldr	r3, [r6]
 1015 02e0 DB05     		lsls	r3, r3, #23
 1016 02e2 F1D4     		bmi	.L61
 327:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****         {
 1017              		.loc 1 327 0
 1018 02e4 FFF7FEFF 		bl	HAL_GetTick
 1019              	.LVL92:
 1020 02e8 C01B     		subs	r0, r0, r7
 1021 02ea 6428     		cmp	r0, #100
 1022 02ec F7D9     		bls	.L59
 1023 02ee EAE6     		b	.L33
 1024              	.L114:
 1025              		.align	2
 1026              	.L113:
 1027 02f0 00100240 		.word	1073876992
 1028 02f4 20819010 		.word	277905696
 1029 02f8 00700040 		.word	1073770496
 1030              	.LVL93:
 1031              	.L105:
 1032              		.loc 1 335 0 discriminator 2
 1033 02fc 73B9     		cbnz	r3, .L63
 1034              		.loc 1 335 0 is_stmt 0 discriminator 3
 1035 02fe 0B6A     		ldr	r3, [r1, #32]
 1036 0300 23F00103 		bic	r3, r3, #1
 1037 0304 0B62     		str	r3, [r1, #32]
 1038 0306 0B6A     		ldr	r3, [r1, #32]
 1039 0308 23F00403 		bic	r3, r3, #4
 1040 030c 0B62     		str	r3, [r1, #32]
 336:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****     /* Check the LSE State */
 337:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****     if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 338:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****     {
 339:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****       /* Get Start Tick */
 340:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****       tickstart = HAL_GetTick();
 341:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****       
 342:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****       /* Wait till LSE is ready */  
 343:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****       while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 344:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****       {
 345:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****         if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 346:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****         {
 347:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****           return HAL_TIMEOUT;
 348:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****         }
 349:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****       }
 350:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****     }
 351:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****     else
 352:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****     {
 353:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****       /* Get Start Tick */
 354:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****       tickstart = HAL_GetTick();
 1041              		.loc 1 354 0 is_stmt 1 discriminator 3
 1042 030e FFF7FEFF 		bl	HAL_GetTick
 1043              	.LVL94:
 1044              	.LBB246:
 1045              	.LBB247:
 1046              		.loc 3 531 0 discriminator 3
 1047 0312 0226     		movs	r6, #2
 1048              	.LBE247:
 1049              	.LBE246:
 1050              		.loc 1 354 0 discriminator 3
 1051 0314 8146     		mov	r9, r0
 1052              	.LVL95:
 1053 0316 B046     		mov	r8, r6
 355:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****       
 356:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****       /* Wait till LSE is disabled */  
 357:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****       while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 1054              		.loc 1 357 0 discriminator 3
 1055 0318 0127     		movs	r7, #1
 1056 031a 3CE0     		b	.L64
 1057              	.LVL96:
 1058              	.L63:
 335:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****     /* Check the LSE State */
 1059              		.loc 1 335 0 discriminator 4
 1060 031c 052B     		cmp	r3, #5
 1061 031e 0B6A     		ldr	r3, [r1, #32]
 1062 0320 06D1     		bne	.L65
 335:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****     /* Check the LSE State */
 1063              		.loc 1 335 0 is_stmt 0 discriminator 5
 1064 0322 43F00403 		orr	r3, r3, #4
 1065 0326 0B62     		str	r3, [r1, #32]
 1066              	.L109:
 1067 0328 0B6A     		ldr	r3, [r1, #32]
 1068 032a 43F00103 		orr	r3, r3, #1
 1069 032e 05E0     		b	.L107
 1070              	.L65:
 335:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****     /* Check the LSE State */
 1071              		.loc 1 335 0 discriminator 6
 1072 0330 23F00103 		bic	r3, r3, #1
 1073 0334 0B62     		str	r3, [r1, #32]
 1074 0336 0B6A     		ldr	r3, [r1, #32]
 1075 0338 23F00403 		bic	r3, r3, #4
 1076              	.L107:
 1077 033c 0B62     		str	r3, [r1, #32]
 340:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****       
 1078              		.loc 1 340 0 is_stmt 1 discriminator 6
 1079 033e FFF7FEFF 		bl	HAL_GetTick
 1080              	.LVL97:
 1081              	.LBB249:
 1082              	.LBB250:
 1083              		.loc 3 531 0 discriminator 6
 1084 0342 0226     		movs	r6, #2
 1085              	.LBE250:
 1086              	.LBE249:
 340:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****       
 1087              		.loc 1 340 0 discriminator 6
 1088 0344 8146     		mov	r9, r0
 1089              	.LVL98:
 1090 0346 B046     		mov	r8, r6
 343:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****       {
 1091              		.loc 1 343 0 discriminator 6
 1092 0348 0127     		movs	r7, #1
 1093              	.LVL99:
 1094              	.L83:
 1095              	.LBB252:
 1096              	.LBB251:
 1097              		.loc 3 531 0
 1098              		.syntax unified
 1099              	@ 531 ".././hal/stm32f3/CMSIS/core/cmsis_gcc.h" 1
 1100 034a 96FAA6F3 		rbit r3, r6
 1101              	@ 0 "" 2
 1102              	.LVL100:
 1103              		.thumb
 1104              		.syntax unified
 1105              	.LBE251:
 1106              	.LBE252:
 1107              	.LBB253:
 1108              	.LBB254:
 1109              		.syntax unified
 1110              	@ 531 ".././hal/stm32f3/CMSIS/core/cmsis_gcc.h" 1
 1111 034e 96FAA6F3 		rbit r3, r6
 1112              	@ 0 "" 2
 1113              	.LVL101:
 1114              		.thumb
 1115              		.syntax unified
 1116              	.LBE254:
 1117              	.LBE253:
 343:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****       {
 1118              		.loc 1 343 0
 1119 0352 0BB1     		cbz	r3, .L66
 343:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****       {
 1120              		.loc 1 343 0 is_stmt 0 discriminator 4
 1121 0354 0A6A     		ldr	r2, [r1, #32]
 1122 0356 02E0     		b	.L67
 1123              	.L66:
 1124              	.LVL102:
 1125              	.LBB255:
 1126              	.LBB256:
 1127              		.loc 3 531 0 is_stmt 1
 1128              		.syntax unified
 1129              	@ 531 ".././hal/stm32f3/CMSIS/core/cmsis_gcc.h" 1
 1130 0358 96FAA6F3 		rbit r3, r6
 1131              	@ 0 "" 2
 1132              	.LVL103:
 1133              		.thumb
 1134              		.syntax unified
 1135              	.LBE256:
 1136              	.LBE255:
 343:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****       {
 1137              		.loc 1 343 0
 1138 035c 4A6A     		ldr	r2, [r1, #36]
 1139              	.L67:
 1140              	.LVL104:
 1141              	.LBB257:
 1142              	.LBB258:
 1143              		.loc 3 531 0 discriminator 11
 1144              		.syntax unified
 1145              	@ 531 ".././hal/stm32f3/CMSIS/core/cmsis_gcc.h" 1
 1146 035e 98FAA8F3 		rbit r3, r8
 1147              	@ 0 "" 2
 1148              	.LVL105:
 1149              		.thumb
 1150              		.syntax unified
 1151              	.LBE258:
 1152              	.LBE257:
 343:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****       {
 1153              		.loc 1 343 0 discriminator 11
 1154 0362 B3FA83F3 		clz	r3, r3
 1155 0366 03F01F03 		and	r3, r3, #31
 1156 036a 07FA03F3 		lsl	r3, r7, r3
 1157 036e 1342     		tst	r3, r2
 1158 0370 21D1     		bne	.L73
 345:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****         {
 1159              		.loc 1 345 0
 1160 0372 FFF7FEFF 		bl	HAL_GetTick
 1161              	.LVL106:
 1162 0376 41F28833 		movw	r3, #5000
 1163 037a C9EB0000 		rsb	r0, r9, r0
 1164 037e 9842     		cmp	r0, r3
 1165 0380 E3D9     		bls	.L83
 1166 0382 A0E6     		b	.L33
 1167              	.L72:
 358:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****       {
 359:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****         if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 1168              		.loc 1 359 0
 1169 0384 FFF7FEFF 		bl	HAL_GetTick
 1170              	.LVL107:
 1171 0388 41F28833 		movw	r3, #5000
 1172 038c C9EB0000 		rsb	r0, r9, r0
 1173 0390 9842     		cmp	r0, r3
 1174 0392 3FF698AE 		bhi	.L33
 1175              	.L64:
 1176              	.LVL108:
 1177              	.LBB259:
 1178              	.LBB248:
 1179              		.loc 3 531 0
 1180              		.syntax unified
 1181              	@ 531 ".././hal/stm32f3/CMSIS/core/cmsis_gcc.h" 1
 1182 0396 96FAA6F3 		rbit r3, r6
 1183              	@ 0 "" 2
 1184              	.LVL109:
 1185              		.thumb
 1186              		.syntax unified
 1187              	.LBE248:
 1188              	.LBE259:
 1189              	.LBB260:
 1190              	.LBB261:
 1191              		.syntax unified
 1192              	@ 531 ".././hal/stm32f3/CMSIS/core/cmsis_gcc.h" 1
 1193 039a 96FAA6F3 		rbit r3, r6
 1194              	@ 0 "" 2
 1195              	.LVL110:
 1196              		.thumb
 1197              		.syntax unified
 1198              	.LBE261:
 1199              	.LBE260:
 357:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****       {
 1200              		.loc 1 357 0
 1201 039e 83B1     		cbz	r3, .L70
 357:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****       {
 1202              		.loc 1 357 0 is_stmt 0 discriminator 4
 1203 03a0 0A6A     		ldr	r2, [r1, #32]
 1204              	.L71:
 1205              	.LVL111:
 1206              	.LBB262:
 1207              	.LBB263:
 1208              		.loc 3 531 0 is_stmt 1 discriminator 11
 1209              		.syntax unified
 1210              	@ 531 ".././hal/stm32f3/CMSIS/core/cmsis_gcc.h" 1
 1211 03a2 98FAA8F3 		rbit r3, r8
 1212              	@ 0 "" 2
 1213              	.LVL112:
 1214              		.thumb
 1215              		.syntax unified
 1216              	.LBE263:
 1217              	.LBE262:
 357:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****       {
 1218              		.loc 1 357 0 discriminator 11
 1219 03a6 B3FA83F3 		clz	r3, r3
 1220 03aa 03F01F03 		and	r3, r3, #31
 1221 03ae 07FA03F3 		lsl	r3, r7, r3
 1222 03b2 1342     		tst	r3, r2
 1223 03b4 E6D1     		bne	.L72
 1224              	.L73:
 360:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****         {
 361:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****           return HAL_TIMEOUT;
 362:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****         }
 363:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****       }
 364:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****     }
 365:.././hal/stm32f3/stm32f3_hal_lowlevel.c **** 
 366:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****     /* Require to disable power clock if necessary */
 367:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****     if(pwrclkchanged == SET)
 1225              		.loc 1 367 0
 1226 03b6 45B1     		cbz	r5, .L54
 368:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****     {
 369:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****       __HAL_RCC_PWR_CLK_DISABLE();
 1227              		.loc 1 369 0
 1228 03b8 CB69     		ldr	r3, [r1, #28]
 1229 03ba 23F08053 		bic	r3, r3, #268435456
 1230 03be CB61     		str	r3, [r1, #28]
 1231 03c0 03E0     		b	.L54
 1232              	.L70:
 1233              	.LVL113:
 1234              	.LBB264:
 1235              	.LBB265:
 1236              		.loc 3 531 0
 1237              		.syntax unified
 1238              	@ 531 ".././hal/stm32f3/CMSIS/core/cmsis_gcc.h" 1
 1239 03c2 96FAA6F3 		rbit r3, r6
 1240              	@ 0 "" 2
 1241              	.LVL114:
 1242              		.thumb
 1243              		.syntax unified
 1244              	.LBE265:
 1245              	.LBE264:
 357:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****       {
 1246              		.loc 1 357 0
 1247 03c6 4A6A     		ldr	r2, [r1, #36]
 1248 03c8 EBE7     		b	.L71
 1249              	.LVL115:
 1250              	.L54:
 1251              	.LBE244:
 370:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****     }
 371:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   }
 372:.././hal/stm32f3/stm32f3_hal_lowlevel.c **** 
 373:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   /*-------------------------------- PLL Configuration -----------------------*/
 374:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   /* Check the parameters */
 375:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
 376:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 1252              		.loc 1 376 0
 1253 03ca E269     		ldr	r2, [r4, #28]
 1254 03cc 0AB9     		cbnz	r2, .L74
 1255              	.LVL116:
 1256              	.L80:
 377:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   {
 378:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****     /* Check if the PLL is used as system clock or not */
 379:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****     if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 380:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****     { 
 381:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****       if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 382:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****       {
 383:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****         /* Check the parameters */
 384:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****         assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
 385:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****         assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
 386:.././hal/stm32f3/stm32f3_hal_lowlevel.c **** #if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
 387:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****         assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
 388:.././hal/stm32f3/stm32f3_hal_lowlevel.c **** #endif
 389:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   
 390:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****         /* Disable the main PLL. */
 391:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****         __HAL_RCC_PLL_DISABLE();
 392:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****         
 393:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****         /* Get Start Tick */
 394:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****         tickstart = HAL_GetTick();
 395:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****         
 396:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****         /* Wait till PLL is disabled */
 397:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****         while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 398:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****         {
 399:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****           if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 400:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****           {
 401:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****             return HAL_TIMEOUT;
 402:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****           }
 403:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****         }
 404:.././hal/stm32f3/stm32f3_hal_lowlevel.c **** 
 405:.././hal/stm32f3/stm32f3_hal_lowlevel.c **** #if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
 406:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****         /* Configure the main PLL clock source, predivider and multiplication factor. */
 407:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****         __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 408:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****                              RCC_OscInitStruct->PLL.PREDIV,
 409:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****                              RCC_OscInitStruct->PLL.PLLMUL);
 410:.././hal/stm32f3/stm32f3_hal_lowlevel.c **** #else
 411:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****       /* Configure the main PLL clock source and multiplication factor. */
 412:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****       __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 413:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****                            RCC_OscInitStruct->PLL.PLLMUL);
 414:.././hal/stm32f3/stm32f3_hal_lowlevel.c **** #endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
 415:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****         /* Enable the main PLL. */
 416:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****         __HAL_RCC_PLL_ENABLE();
 417:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****         
 418:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****         /* Get Start Tick */
 419:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****         tickstart = HAL_GetTick();
 420:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****         
 421:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****         /* Wait till PLL is ready */
 422:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****         while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 423:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****         {
 424:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****           if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 425:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****           {
 426:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****             return HAL_TIMEOUT;
 427:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****           }
 428:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****         }
 429:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****       }
 430:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****       else
 431:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****       {
 432:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****         /* Disable the main PLL. */
 433:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****         __HAL_RCC_PLL_DISABLE();
 434:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****  
 435:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****         /* Get Start Tick */
 436:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****         tickstart = HAL_GetTick();
 437:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****         
 438:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****         /* Wait till PLL is disabled */  
 439:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****         while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 440:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****         {
 441:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****           if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 442:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****           {
 443:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****             return HAL_TIMEOUT;
 444:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****           }
 445:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****         }
 446:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****       }
 447:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****     }
 448:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****     else
 449:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****     {
 450:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****       return HAL_ERROR;
 451:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****     }
 452:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   }
 453:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   
 454:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   return HAL_OK;
 1257              		.loc 1 454 0
 1258 03ce 0020     		movs	r0, #0
 1259 03d0 82E0     		b	.L104
 1260              	.LVL117:
 1261              	.L74:
 379:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****     { 
 1262              		.loc 1 379 0
 1263 03d2 4349     		ldr	r1, .L115
 1264 03d4 4B68     		ldr	r3, [r1, #4]
 1265 03d6 03F00C03 		and	r3, r3, #12
 1266 03da 082B     		cmp	r3, #8
 1267 03dc 3FF43BAE 		beq	.L39
 381:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****       {
 1268              		.loc 1 381 0
 1269 03e0 022A     		cmp	r2, #2
 1270 03e2 4FF08073 		mov	r3, #16777216
 1271 03e6 53D1     		bne	.L75
 1272              	.LVL118:
 1273              	.LBB266:
 1274              	.LBB267:
 1275              		.loc 3 531 0
 1276              		.syntax unified
 1277              	@ 531 ".././hal/stm32f3/CMSIS/core/cmsis_gcc.h" 1
 1278 03e8 93FAA3F3 		rbit r3, r3
 1279              	@ 0 "" 2
 1280              	.LVL119:
 1281              		.thumb
 1282              		.syntax unified
 1283              	.LBE267:
 1284              	.LBE266:
 391:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****         
 1285              		.loc 1 391 0
 1286 03ec B3FA83F3 		clz	r3, r3
 1287 03f0 03F18453 		add	r3, r3, #276824064
 1288 03f4 03F58413 		add	r3, r3, #1081344
 1289 03f8 9B00     		lsls	r3, r3, #2
 1290 03fa 0022     		movs	r2, #0
 1291 03fc 1A60     		str	r2, [r3]
 394:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****         
 1292              		.loc 1 394 0
 1293 03fe FFF7FEFF 		bl	HAL_GetTick
 1294              	.LVL120:
 1295              	.LBB268:
 1296              	.LBB269:
 1297              		.loc 3 531 0
 1298 0402 4FF00076 		mov	r6, #33554432
 1299              	.LBE269:
 1300              	.LBE268:
 394:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****         
 1301              		.loc 1 394 0
 1302 0406 8046     		mov	r8, r0
 1303              	.LVL121:
 397:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****         {
 1304              		.loc 1 397 0
 1305 0408 0127     		movs	r7, #1
 1306              	.LVL122:
 1307              	.L76:
 1308              	.LBB271:
 1309              	.LBB270:
 1310              		.loc 3 531 0
 1311              		.syntax unified
 1312              	@ 531 ".././hal/stm32f3/CMSIS/core/cmsis_gcc.h" 1
 1313 040a 96FAA6F3 		rbit r3, r6
 1314              	@ 0 "" 2
 1315              	.LVL123:
 1316              		.thumb
 1317              		.syntax unified
 1318              	.LBE270:
 1319              	.LBE271:
 397:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****         {
 1320              		.loc 1 397 0
 1321 040e 3448     		ldr	r0, .L115
 1322 0410 0A68     		ldr	r2, [r1]
 1323              	.LVL124:
 1324              	.LBB272:
 1325              	.LBB273:
 1326              		.loc 3 531 0
 1327              		.syntax unified
 1328              	@ 531 ".././hal/stm32f3/CMSIS/core/cmsis_gcc.h" 1
 1329 0412 96FAA6F3 		rbit r3, r6
 1330              	@ 0 "" 2
 1331              	.LVL125:
 1332              		.thumb
 1333              		.syntax unified
 1334              	.LBE273:
 1335              	.LBE272:
 397:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****         {
 1336              		.loc 1 397 0
 1337 0416 B3FA83F3 		clz	r3, r3
 1338 041a 03F01F03 		and	r3, r3, #31
 1339 041e 07FA03F3 		lsl	r3, r7, r3
 1340 0422 1342     		tst	r3, r2
 1341 0424 4FF00105 		mov	r5, #1
 1342 0428 06D0     		beq	.L112
 399:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****           {
 1343              		.loc 1 399 0
 1344 042a FFF7FEFF 		bl	HAL_GetTick
 1345              	.LVL126:
 1346 042e C8EB0000 		rsb	r0, r8, r0
 1347 0432 0228     		cmp	r0, #2
 1348 0434 E9D9     		bls	.L76
 1349 0436 46E6     		b	.L33
 1350              	.L112:
 412:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****                            RCC_OscInitStruct->PLL.PLLMUL);
 1351              		.loc 1 412 0
 1352 0438 4368     		ldr	r3, [r0, #4]
 1353 043a 666A     		ldr	r6, [r4, #36]
 1354 043c 226A     		ldr	r2, [r4, #32]
 1355 043e 23F47413 		bic	r3, r3, #3997696
 1356 0442 3243     		orrs	r2, r2, r6
 1357 0444 1343     		orrs	r3, r3, r2
 1358 0446 4360     		str	r3, [r0, #4]
 1359              	.LVL127:
 1360              	.LBB274:
 1361              	.LBB275:
 1362              		.loc 3 531 0
 1363 0448 4FF08073 		mov	r3, #16777216
 1364              		.syntax unified
 1365              	@ 531 ".././hal/stm32f3/CMSIS/core/cmsis_gcc.h" 1
 1366 044c 93FAA3F3 		rbit r3, r3
 1367              	@ 0 "" 2
 1368              	.LVL128:
 1369              		.thumb
 1370              		.syntax unified
 1371              	.LBE275:
 1372              	.LBE274:
 416:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****         
 1373              		.loc 1 416 0
 1374 0450 B3FA83F3 		clz	r3, r3
 1375 0454 03F18453 		add	r3, r3, #276824064
 1376 0458 03F58413 		add	r3, r3, #1081344
 1377 045c 9B00     		lsls	r3, r3, #2
 1378              	.LBB276:
 1379              	.LBB277:
 1380              		.loc 3 531 0
 1381 045e 4FF00074 		mov	r4, #33554432
 1382              	.LVL129:
 1383              	.LBE277:
 1384              	.LBE276:
 416:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****         
 1385              		.loc 1 416 0
 1386 0462 1D60     		str	r5, [r3]
 419:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****         
 1387              		.loc 1 419 0
 1388 0464 FFF7FEFF 		bl	HAL_GetTick
 1389              	.LVL130:
 1390 0468 0646     		mov	r6, r0
 1391              	.LVL131:
 1392              	.L78:
 1393              	.LBB279:
 1394              	.LBB278:
 1395              		.loc 3 531 0
 1396              		.syntax unified
 1397              	@ 531 ".././hal/stm32f3/CMSIS/core/cmsis_gcc.h" 1
 1398 046a 94FAA4F3 		rbit r3, r4
 1399              	@ 0 "" 2
 1400              	.LVL132:
 1401              		.thumb
 1402              		.syntax unified
 1403              	.LBE278:
 1404              	.LBE279:
 422:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****         {
 1405              		.loc 1 422 0
 1406 046e 0A68     		ldr	r2, [r1]
 1407              	.LVL133:
 1408              	.LBB280:
 1409              	.LBB281:
 1410              		.loc 3 531 0
 1411              		.syntax unified
 1412              	@ 531 ".././hal/stm32f3/CMSIS/core/cmsis_gcc.h" 1
 1413 0470 94FAA4F3 		rbit r3, r4
 1414              	@ 0 "" 2
 1415              	.LVL134:
 1416              		.thumb
 1417              		.syntax unified
 1418              	.LBE281:
 1419              	.LBE280:
 422:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****         {
 1420              		.loc 1 422 0
 1421 0474 B3FA83F3 		clz	r3, r3
 1422 0478 03F01F03 		and	r3, r3, #31
 1423 047c 05FA03F3 		lsl	r3, r5, r3
 1424 0480 1342     		tst	r3, r2
 1425 0482 A4D1     		bne	.L80
 424:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****           {
 1426              		.loc 1 424 0
 1427 0484 FFF7FEFF 		bl	HAL_GetTick
 1428              	.LVL135:
 1429 0488 801B     		subs	r0, r0, r6
 1430 048a 0228     		cmp	r0, #2
 1431 048c EDD9     		bls	.L78
 1432 048e 1AE6     		b	.L33
 1433              	.LVL136:
 1434              	.L75:
 1435              	.LBB282:
 1436              	.LBB283:
 1437              		.loc 3 531 0
 1438              		.syntax unified
 1439              	@ 531 ".././hal/stm32f3/CMSIS/core/cmsis_gcc.h" 1
 1440 0490 93FAA3F3 		rbit r3, r3
 1441              	@ 0 "" 2
 1442              	.LVL137:
 1443              		.thumb
 1444              		.syntax unified
 1445              	.LBE283:
 1446              	.LBE282:
 433:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****  
 1447              		.loc 1 433 0
 1448 0494 B3FA83F3 		clz	r3, r3
 1449 0498 03F18453 		add	r3, r3, #276824064
 1450 049c 03F58413 		add	r3, r3, #1081344
 1451 04a0 9B00     		lsls	r3, r3, #2
 1452 04a2 0022     		movs	r2, #0
 1453 04a4 1A60     		str	r2, [r3]
 436:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****         
 1454              		.loc 1 436 0
 1455 04a6 FFF7FEFF 		bl	HAL_GetTick
 1456              	.LVL138:
 1457              	.LBB284:
 1458              	.LBB285:
 1459              		.loc 3 531 0
 1460 04aa 4FF00074 		mov	r4, #33554432
 1461              	.LVL139:
 1462              	.LBE285:
 1463              	.LBE284:
 436:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****         
 1464              		.loc 1 436 0
 1465 04ae 0646     		mov	r6, r0
 1466              	.LVL140:
 439:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****         {
 1467              		.loc 1 439 0
 1468 04b0 0125     		movs	r5, #1
 1469              	.LVL141:
 1470              	.L81:
 1471              	.LBB287:
 1472              	.LBB286:
 1473              		.loc 3 531 0
 1474              		.syntax unified
 1475              	@ 531 ".././hal/stm32f3/CMSIS/core/cmsis_gcc.h" 1
 1476 04b2 94FAA4F3 		rbit r3, r4
 1477              	@ 0 "" 2
 1478              	.LVL142:
 1479              		.thumb
 1480              		.syntax unified
 1481              	.LBE286:
 1482              	.LBE287:
 439:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****         {
 1483              		.loc 1 439 0
 1484 04b6 0A68     		ldr	r2, [r1]
 1485              	.LVL143:
 1486              	.LBB288:
 1487              	.LBB289:
 1488              		.loc 3 531 0
 1489              		.syntax unified
 1490              	@ 531 ".././hal/stm32f3/CMSIS/core/cmsis_gcc.h" 1
 1491 04b8 94FAA4F3 		rbit r3, r4
 1492              	@ 0 "" 2
 1493              	.LVL144:
 1494              		.thumb
 1495              		.syntax unified
 1496              	.LBE289:
 1497              	.LBE288:
 439:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****         {
 1498              		.loc 1 439 0
 1499 04bc B3FA83F3 		clz	r3, r3
 1500 04c0 03F01F03 		and	r3, r3, #31
 1501 04c4 05FA03F3 		lsl	r3, r5, r3
 1502 04c8 1342     		tst	r3, r2
 1503 04ca 80D0     		beq	.L80
 441:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****           {
 1504              		.loc 1 441 0
 1505 04cc FFF7FEFF 		bl	HAL_GetTick
 1506              	.LVL145:
 1507 04d0 801B     		subs	r0, r0, r6
 1508 04d2 0228     		cmp	r0, #2
 1509 04d4 EDD9     		bls	.L81
 1510 04d6 F6E5     		b	.L33
 1511              	.LVL146:
 1512              	.L104:
 455:.././hal/stm32f3/stm32f3_hal_lowlevel.c **** }
 1513              		.loc 1 455 0
 1514 04d8 03B0     		add	sp, sp, #12
 1515              	.LCFI2:
 1516              		.cfi_def_cfa_offset 28
 1517              		@ sp needed
 1518 04da BDE8F083 		pop	{r4, r5, r6, r7, r8, r9, pc}
 1519              	.L116:
 1520 04de 00BF     		.align	2
 1521              	.L115:
 1522 04e0 00100240 		.word	1073876992
 1523              		.cfi_endproc
 1524              	.LFE130:
 1526              		.section	.text.HAL_RCC_ClockConfig,"ax",%progbits
 1527              		.align	1
 1528              		.global	HAL_RCC_ClockConfig
 1529              		.thumb
 1530              		.thumb_func
 1532              	HAL_RCC_ClockConfig:
 1533              	.LFB131:
 456:.././hal/stm32f3/stm32f3_hal_lowlevel.c **** 
 457:.././hal/stm32f3/stm32f3_hal_lowlevel.c **** 
 458:.././hal/stm32f3/stm32f3_hal_lowlevel.c **** /**
 459:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   * @brief  Initializes the CPU, AHB and APB buses clocks according to the specified 
 460:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   *         parameters in the RCC_ClkInitStruct.
 461:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   * @param  RCC_ClkInitStruct pointer to an RCC_OscInitTypeDef structure that
 462:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   *         contains the configuration information for the RCC peripheral.
 463:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   * @param  FLatency FLASH Latency                   
 464:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   *          The value of this parameter depend on device used within the same series
 465:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
 466:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   *         and updated by @ref HAL_RCC_GetHCLKFreq() function called within this function
 467:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   *
 468:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   * @note   The HSI is used (enabled by hardware) as system clock source after
 469:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   *         start-up from Reset, wake-up from STOP and STANDBY mode, or in case
 470:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   *         of failure of the HSE used directly or indirectly as system clock
 471:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   *         (if the Clock Security System CSS is enabled).
 472:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   *           
 473:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   * @note   A switch from one clock source to another occurs only if the target
 474:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   *         clock source is ready (clock stable after start-up delay or PLL locked). 
 475:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   *         If a clock source which is not yet ready is selected, the switch will
 476:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   *         occur when the clock source will be ready. 
 477:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
 478:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   *         currently used as system clock source.
 479:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   * @retval HAL status
 480:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   */
 481:.././hal/stm32f3/stm32f3_hal_lowlevel.c **** HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
 482:.././hal/stm32f3/stm32f3_hal_lowlevel.c **** {
 1534              		.loc 1 482 0
 1535              		.cfi_startproc
 1536              		@ args = 0, pretend = 0, frame = 0
 1537              		@ frame_needed = 0, uses_anonymous_args = 0
 1538              	.LVL147:
 483:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   uint32_t tickstart = 0U;
 484:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   
 485:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   /* Check the parameters */
 486:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   assert_param(RCC_ClkInitStruct != NULL);
 487:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   assert_param(IS_RCC_CLOCKTYPE(RCC_ClkInitStruct->ClockType));
 488:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   assert_param(IS_FLASH_LATENCY(FLatency));
 489:.././hal/stm32f3/stm32f3_hal_lowlevel.c **** 
 490:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
 491:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   must be correctly programmed according to the frequency of the CPU clock 
 492:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****     (HCLK) of the device. */
 493:.././hal/stm32f3/stm32f3_hal_lowlevel.c **** 
 494:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   /* Increasing the number of wait states because of higher CPU frequency */
 495:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 1539              		.loc 1 495 0
 1540 0000 4F4A     		ldr	r2, .L160
 482:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   uint32_t tickstart = 0U;
 1541              		.loc 1 482 0
 1542 0002 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 1543              	.LCFI3:
 1544              		.cfi_def_cfa_offset 24
 1545              		.cfi_offset 3, -24
 1546              		.cfi_offset 4, -20
 1547              		.cfi_offset 5, -16
 1548              		.cfi_offset 6, -12
 1549              		.cfi_offset 7, -8
 1550              		.cfi_offset 14, -4
 1551              		.loc 1 495 0
 1552 0004 1368     		ldr	r3, [r2]
 1553 0006 03F00703 		and	r3, r3, #7
 1554 000a 8B42     		cmp	r3, r1
 482:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   uint32_t tickstart = 0U;
 1555              		.loc 1 482 0
 1556 000c 0546     		mov	r5, r0
 1557              		.loc 1 495 0
 1558 000e 0AD3     		bcc	.L118
 1559              	.L121:
 496:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   {    
 497:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
 498:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****     __HAL_FLASH_SET_LATENCY(FLatency);
 499:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****     
 500:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****     /* Check that the new number of wait states is taken into account to access the Flash
 501:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****     memory by reading the FLASH_ACR register */
 502:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****     if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 503:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****     {
 504:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****       return HAL_ERROR;
 505:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****     }
 506:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   }
 507:.././hal/stm32f3/stm32f3_hal_lowlevel.c **** 
 508:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   /*-------------------------- HCLK Configuration --------------------------*/
 509:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 1560              		.loc 1 509 0
 1561 0010 2868     		ldr	r0, [r5]
 1562              	.LVL148:
 1563 0012 8407     		lsls	r4, r0, #30
 1564 0014 13D5     		bpl	.L120
 510:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   {
 511:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****     assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
 512:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****     MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 1565              		.loc 1 512 0
 1566 0016 4B4C     		ldr	r4, .L160+4
 1567 0018 6368     		ldr	r3, [r4, #4]
 1568 001a 23F0F002 		bic	r2, r3, #240
 1569 001e AB68     		ldr	r3, [r5, #8]
 1570 0020 1343     		orrs	r3, r3, r2
 1571 0022 6360     		str	r3, [r4, #4]
 1572 0024 0BE0     		b	.L120
 1573              	.LVL149:
 1574              	.L118:
 498:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****     
 1575              		.loc 1 498 0
 1576 0026 1368     		ldr	r3, [r2]
 1577 0028 23F00703 		bic	r3, r3, #7
 1578 002c 0B43     		orrs	r3, r3, r1
 1579 002e 1360     		str	r3, [r2]
 502:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****     {
 1580              		.loc 1 502 0
 1581 0030 1368     		ldr	r3, [r2]
 1582 0032 03F00703 		and	r3, r3, #7
 1583 0036 9942     		cmp	r1, r3
 1584 0038 EAD0     		beq	.L121
 1585              	.LVL150:
 1586              	.L127:
 504:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****     }
 1587              		.loc 1 504 0
 1588 003a 0120     		movs	r0, #1
 1589 003c F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 1590              	.LVL151:
 1591              	.L120:
 513:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   }
 514:.././hal/stm32f3/stm32f3_hal_lowlevel.c **** 
 515:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   /*------------------------- SYSCLK Configuration ---------------------------*/ 
 516:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 1592              		.loc 1 516 0
 1593 003e C207     		lsls	r2, r0, #31
 1594 0040 06D4     		bmi	.L123
 1595              	.LVL152:
 1596              	.L133:
 517:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   {    
 518:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****     assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
 519:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****     
 520:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****     /* HSE is selected as System Clock Source */
 521:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****     if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 522:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****     {
 523:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****       /* Check the HSE ready flag */  
 524:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****       if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 525:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****       {
 526:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****         return HAL_ERROR;
 527:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****       }
 528:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****     }
 529:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****     /* PLL is selected as System Clock Source */
 530:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****     else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 531:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****     {
 532:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****       /* Check the PLL ready flag */  
 533:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****       if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 534:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****       {
 535:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****         return HAL_ERROR;
 536:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****       }
 537:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****     }
 538:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****     /* HSI is selected as System Clock Source */
 539:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****     else
 540:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****     {
 541:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****       /* Check the HSI ready flag */  
 542:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****       if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 543:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****       {
 544:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****         return HAL_ERROR;
 545:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****       }
 546:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****     }
 547:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****     __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 548:.././hal/stm32f3/stm32f3_hal_lowlevel.c **** 
 549:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****     /* Get Start Tick */
 550:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****     tickstart = HAL_GetTick();
 551:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****     
 552:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****     if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 553:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****     {
 554:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****       while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 555:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****       {
 556:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****         if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 557:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****         {
 558:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****           return HAL_TIMEOUT;
 559:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****         }
 560:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****       }
 561:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****     }
 562:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****     else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 563:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****     {
 564:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****       while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 565:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****       {
 566:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****         if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 567:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****         {
 568:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****           return HAL_TIMEOUT;
 569:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****         }
 570:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****       }
 571:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****     }
 572:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****     else
 573:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****     {
 574:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****       while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 575:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****       {
 576:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****         if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 577:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****         {
 578:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****           return HAL_TIMEOUT;
 579:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****         }
 580:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****       }
 581:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****     }      
 582:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   }    
 583:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   /* Decreasing the number of wait states because of lower CPU frequency */
 584:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 1597              		.loc 1 584 0
 1598 0042 3F4A     		ldr	r2, .L160
 1599 0044 1368     		ldr	r3, [r2]
 1600 0046 03F00703 		and	r3, r3, #7
 1601 004a 9942     		cmp	r1, r3
 1602 004c 56D3     		bcc	.L124
 1603 004e 5FE0     		b	.L125
 1604              	.LVL153:
 1605              	.L123:
 521:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****     {
 1606              		.loc 1 521 0
 1607 0050 6A68     		ldr	r2, [r5, #4]
 1608 0052 3C4C     		ldr	r4, .L160+4
 1609 0054 012A     		cmp	r2, #1
 1610 0056 0ED1     		bne	.L126
 1611              	.LVL154:
 1612              	.LBB290:
 1613              	.LBB291:
 1614              		.loc 3 531 0
 1615 0058 4FF40033 		mov	r3, #131072
 1616              		.syntax unified
 1617              	@ 531 ".././hal/stm32f3/CMSIS/core/cmsis_gcc.h" 1
 1618 005c 93FAA3F0 		rbit r0, r3
 1619              	@ 0 "" 2
 1620              	.LVL155:
 1621              		.thumb
 1622              		.syntax unified
 1623              	.LBE291:
 1624              	.LBE290:
 524:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****       {
 1625              		.loc 1 524 0
 1626 0060 2068     		ldr	r0, [r4]
 1627              	.LVL156:
 1628              	.LBB292:
 1629              	.LBB293:
 1630              		.loc 3 531 0
 1631              		.syntax unified
 1632              	@ 531 ".././hal/stm32f3/CMSIS/core/cmsis_gcc.h" 1
 1633 0062 93FAA3F3 		rbit r3, r3
 1634              	@ 0 "" 2
 1635              	.LVL157:
 1636              		.thumb
 1637              		.syntax unified
 1638              	.LBE293:
 1639              	.LBE292:
 524:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****       {
 1640              		.loc 1 524 0
 1641 0066 B3FA83F3 		clz	r3, r3
 1642 006a 03F01F03 		and	r3, r3, #31
 1643 006e 02FA03F3 		lsl	r3, r2, r3
 1644 0072 0342     		tst	r3, r0
 1645 0074 11E0     		b	.L157
 1646              	.L126:
 530:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****     {
 1647              		.loc 1 530 0
 1648 0076 022A     		cmp	r2, #2
 1649              	.LVL158:
 1650              	.LBB294:
 1651              	.LBB295:
 1652              		.loc 3 531 0
 1653 0078 0CBF     		ite	eq
 1654 007a 4FF00073 		moveq	r3, #33554432
 1655              	.LVL159:
 1656              	.LBE295:
 1657              	.LBE294:
 1658              	.LBB296:
 1659              	.LBB297:
 1660 007e 0223     		movne	r3, #2
 1661              		.syntax unified
 1662              	@ 531 ".././hal/stm32f3/CMSIS/core/cmsis_gcc.h" 1
 1663 0080 93FAA3F0 		rbit r0, r3
 1664              	@ 0 "" 2
 1665              	.LVL160:
 1666              		.thumb
 1667              		.syntax unified
 1668              	.LBE297:
 1669              	.LBE296:
 542:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****       {
 1670              		.loc 1 542 0
 1671 0084 2668     		ldr	r6, [r4]
 1672              	.LVL161:
 1673              	.LBB298:
 1674              	.LBB299:
 1675              		.loc 3 531 0
 1676              		.syntax unified
 1677              	@ 531 ".././hal/stm32f3/CMSIS/core/cmsis_gcc.h" 1
 1678 0086 93FAA3F3 		rbit r3, r3
 1679              	@ 0 "" 2
 1680              	.LVL162:
 1681              		.thumb
 1682              		.syntax unified
 1683              	.LBE299:
 1684              	.LBE298:
 542:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****       {
 1685              		.loc 1 542 0
 1686 008a B3FA83F3 		clz	r3, r3
 1687 008e 03F01F03 		and	r3, r3, #31
 1688 0092 0120     		movs	r0, #1
 1689 0094 00FA03F3 		lsl	r3, r0, r3
 1690 0098 3342     		tst	r3, r6
 1691              	.LVL163:
 1692              	.L157:
 1693 009a CED0     		beq	.L127
 547:.././hal/stm32f3/stm32f3_hal_lowlevel.c **** 
 1694              		.loc 1 547 0
 1695 009c 6368     		ldr	r3, [r4, #4]
 1696 009e 23F00303 		bic	r3, r3, #3
 1697 00a2 1A43     		orrs	r2, r2, r3
 1698 00a4 6260     		str	r2, [r4, #4]
 550:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****     
 1699              		.loc 1 550 0
 1700 00a6 FFF7FEFF 		bl	HAL_GetTick
 1701              	.LVL164:
 552:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****     {
 1702              		.loc 1 552 0
 1703 00aa 6B68     		ldr	r3, [r5, #4]
 1704 00ac 012B     		cmp	r3, #1
 550:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****     
 1705              		.loc 1 550 0
 1706 00ae 0646     		mov	r6, r0
 1707              	.LVL165:
 556:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****         {
 1708              		.loc 1 556 0
 1709 00b0 41F28837 		movw	r7, #5000
 552:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****     {
 1710              		.loc 1 552 0
 1711 00b4 0BD1     		bne	.L154
 1712              	.LVL166:
 1713              	.L130:
 554:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****       {
 1714              		.loc 1 554 0
 1715 00b6 6368     		ldr	r3, [r4, #4]
 1716 00b8 03F00C03 		and	r3, r3, #12
 1717 00bc 042B     		cmp	r3, #4
 1718 00be C0D0     		beq	.L133
 556:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****         {
 1719              		.loc 1 556 0
 1720 00c0 FFF7FEFF 		bl	HAL_GetTick
 1721              	.LVL167:
 1722 00c4 801B     		subs	r0, r0, r6
 1723 00c6 B842     		cmp	r0, r7
 1724 00c8 F5D9     		bls	.L130
 1725              	.L136:
 558:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****         }
 1726              		.loc 1 558 0
 1727 00ca 0320     		movs	r0, #3
 1728 00cc F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 1729              	.LVL168:
 1730              	.L154:
 562:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****     {
 1731              		.loc 1 562 0
 1732 00ce 022B     		cmp	r3, #2
 1733 00d0 0FD1     		bne	.L135
 1734              	.LVL169:
 1735              	.L134:
 564:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****       {
 1736              		.loc 1 564 0
 1737 00d2 6368     		ldr	r3, [r4, #4]
 1738 00d4 03F00C03 		and	r3, r3, #12
 1739 00d8 082B     		cmp	r3, #8
 1740 00da B2D0     		beq	.L133
 566:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****         {
 1741              		.loc 1 566 0
 1742 00dc FFF7FEFF 		bl	HAL_GetTick
 1743              	.LVL170:
 1744 00e0 801B     		subs	r0, r0, r6
 1745 00e2 B842     		cmp	r0, r7
 1746 00e4 F5D9     		bls	.L134
 1747 00e6 F0E7     		b	.L136
 1748              	.L138:
 576:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****         {
 1749              		.loc 1 576 0
 1750 00e8 FFF7FEFF 		bl	HAL_GetTick
 1751              	.LVL171:
 1752 00ec 801B     		subs	r0, r0, r6
 1753 00ee B842     		cmp	r0, r7
 1754 00f0 EBD8     		bhi	.L136
 1755              	.L135:
 574:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****       {
 1756              		.loc 1 574 0
 1757 00f2 6368     		ldr	r3, [r4, #4]
 1758 00f4 13F00C0F 		tst	r3, #12
 1759 00f8 F6D1     		bne	.L138
 1760 00fa A2E7     		b	.L133
 1761              	.LVL172:
 1762              	.L124:
 585:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   {    
 586:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
 587:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****     __HAL_FLASH_SET_LATENCY(FLatency);
 1763              		.loc 1 587 0
 1764 00fc 1368     		ldr	r3, [r2]
 1765 00fe 23F00703 		bic	r3, r3, #7
 1766 0102 0B43     		orrs	r3, r3, r1
 1767 0104 1360     		str	r3, [r2]
 588:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****     
 589:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****     /* Check that the new number of wait states is taken into account to access the Flash
 590:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****     memory by reading the FLASH_ACR register */
 591:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****     if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 1768              		.loc 1 591 0
 1769 0106 1368     		ldr	r3, [r2]
 1770 0108 03F00703 		and	r3, r3, #7
 1771 010c 9942     		cmp	r1, r3
 1772 010e 94D1     		bne	.L127
 1773              	.L125:
 592:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****     {
 593:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****       return HAL_ERROR;
 594:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****     }
 595:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   }    
 596:.././hal/stm32f3/stm32f3_hal_lowlevel.c **** 
 597:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   /*-------------------------- PCLK1 Configuration ---------------------------*/ 
 598:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 1774              		.loc 1 598 0
 1775 0110 2868     		ldr	r0, [r5]
 1776 0112 4307     		lsls	r3, r0, #29
 1777 0114 06D5     		bpl	.L140
 599:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   {
 600:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****     assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
 601:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****     MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 1778              		.loc 1 601 0
 1779 0116 0B49     		ldr	r1, .L160+4
 1780 0118 4B68     		ldr	r3, [r1, #4]
 1781 011a 23F4E062 		bic	r2, r3, #1792
 1782 011e EB68     		ldr	r3, [r5, #12]
 1783 0120 1343     		orrs	r3, r3, r2
 1784 0122 4B60     		str	r3, [r1, #4]
 1785              	.L140:
 602:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   }
 603:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   
 604:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   /*-------------------------- PCLK2 Configuration ---------------------------*/ 
 605:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 1786              		.loc 1 605 0
 1787 0124 10F00800 		ands	r0, r0, #8
 1788 0128 08D0     		beq	.L122
 606:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   {
 607:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****     assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
 608:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****     MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 1789              		.loc 1 608 0
 1790 012a 064A     		ldr	r2, .L160+4
 1791 012c 2969     		ldr	r1, [r5, #16]
 1792 012e 5368     		ldr	r3, [r2, #4]
 1793 0130 23F46053 		bic	r3, r3, #14336
 1794 0134 43EAC103 		orr	r3, r3, r1, lsl #3
 1795 0138 5360     		str	r3, [r2, #4]
 609:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   }
 610:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****  
 611:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   /* Update the SystemCoreClock global variable */
 612:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   //SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_
 613:.././hal/stm32f3/stm32f3_hal_lowlevel.c **** 
 614:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   /* Configure the source of time base considering new system clocks settings*/
 615:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   //HAL_InitTick (TICK_INT_PRIORITY);
 616:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   
 617:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   return HAL_OK;
 1796              		.loc 1 617 0
 1797 013a 0020     		movs	r0, #0
 1798              	.L122:
 618:.././hal/stm32f3/stm32f3_hal_lowlevel.c **** }
 1799              		.loc 1 618 0
 1800 013c F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 1801              	.LVL173:
 1802              	.L161:
 1803 013e 00BF     		.align	2
 1804              	.L160:
 1805 0140 00200240 		.word	1073881088
 1806 0144 00100240 		.word	1073876992
 1807              		.cfi_endproc
 1808              	.LFE131:
 1810              		.section	.text.HAL_RCC_GetPCLK2Freq,"ax",%progbits
 1811              		.align	1
 1812              		.global	HAL_RCC_GetPCLK2Freq
 1813              		.thumb
 1814              		.thumb_func
 1816              	HAL_RCC_GetPCLK2Freq:
 1817              	.LFB132:
 619:.././hal/stm32f3/stm32f3_hal_lowlevel.c **** 
 620:.././hal/stm32f3/stm32f3_hal_lowlevel.c **** /**
 621:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   * @brief  Returns the PCLK2 frequency
 622:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   * @note   Each time PCLK2 changes, this function must be called to update the
 623:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrec
 624:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   * @retval PCLK2 frequency
 625:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   */
 626:.././hal/stm32f3/stm32f3_hal_lowlevel.c **** uint32_t HAL_RCC_GetPCLK2Freq(void)
 627:.././hal/stm32f3/stm32f3_hal_lowlevel.c **** {
 1818              		.loc 1 627 0
 1819              		.cfi_startproc
 1820              		@ args = 0, pretend = 0, frame = 0
 1821              		@ frame_needed = 0, uses_anonymous_args = 0
 1822              		@ link register save eliminated.
 628:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
 629:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   //return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> POSITION_VAL(RCC_C
 630:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   return F_CPU;
 631:.././hal/stm32f3/stm32f3_hal_lowlevel.c **** }
 1823              		.loc 1 631 0
 1824 0000 4FF4E100 		mov	r0, #7372800
 1825 0004 7047     		bx	lr
 1826              		.cfi_endproc
 1827              	.LFE132:
 1829              		.section	.text.HAL_GPIO_Init,"ax",%progbits
 1830              		.align	1
 1831              		.global	HAL_GPIO_Init
 1832              		.thumb
 1833              		.thumb_func
 1835              	HAL_GPIO_Init:
 1836              	.LFB133:
 632:.././hal/stm32f3/stm32f3_hal_lowlevel.c **** 
 633:.././hal/stm32f3/stm32f3_hal_lowlevel.c **** 
 634:.././hal/stm32f3/stm32f3_hal_lowlevel.c **** 
 635:.././hal/stm32f3/stm32f3_hal_lowlevel.c **** #define GPIO_MODE             (0x00000003U)
 636:.././hal/stm32f3/stm32f3_hal_lowlevel.c **** #define EXTI_MODE             (0x10000000U)
 637:.././hal/stm32f3/stm32f3_hal_lowlevel.c **** #define GPIO_MODE_IT          (0x00010000U)
 638:.././hal/stm32f3/stm32f3_hal_lowlevel.c **** #define GPIO_MODE_EVT         (0x00020000U)
 639:.././hal/stm32f3/stm32f3_hal_lowlevel.c **** #define RISING_EDGE           (0x00100000U)
 640:.././hal/stm32f3/stm32f3_hal_lowlevel.c **** #define FALLING_EDGE          (0x00200000U)
 641:.././hal/stm32f3/stm32f3_hal_lowlevel.c **** #define GPIO_OUTPUT_TYPE      (0x00000010U)
 642:.././hal/stm32f3/stm32f3_hal_lowlevel.c **** 
 643:.././hal/stm32f3/stm32f3_hal_lowlevel.c **** #define GPIO_NUMBER           (16U)
 644:.././hal/stm32f3/stm32f3_hal_lowlevel.c **** 
 645:.././hal/stm32f3/stm32f3_hal_lowlevel.c **** #define __HAL_RCC_GPIOA_CLK_ENABLE()   do { \
 646:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****                                         __IO uint32_t tmpreg; \
 647:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****                                         SET_BIT(RCC->AHBENR, RCC_AHBENR_GPIOAEN);\
 648:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****                                         /* Delay after an RCC peripheral clock enabling */ \
 649:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****                                         tmpreg = READ_BIT(RCC->AHBENR, RCC_AHBENR_GPIOAEN);\
 650:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****                                         UNUSED(tmpreg); \
 651:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****                                       } while(0U)
 652:.././hal/stm32f3/stm32f3_hal_lowlevel.c **** 
 653:.././hal/stm32f3/stm32f3_hal_lowlevel.c **** 
 654:.././hal/stm32f3/stm32f3_hal_lowlevel.c **** /**
 655:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   * @brief  Initialize the GPIOx peripheral according to the specified parameters in the GPIO_Init.
 656:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   * @param  GPIOx: where x can be (A..F) to select the GPIO peripheral for STM32F3 family devices
 657:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
 658:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   *         the configuration information for the specified GPIO peripheral.
 659:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   * @retval None
 660:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   */
 661:.././hal/stm32f3/stm32f3_hal_lowlevel.c **** void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
 662:.././hal/stm32f3/stm32f3_hal_lowlevel.c **** {
 1837              		.loc 1 662 0
 1838              		.cfi_startproc
 1839              		@ args = 0, pretend = 0, frame = 16
 1840              		@ frame_needed = 0, uses_anonymous_args = 0
 1841              	.LVL174:
 1842 0000 2DE9F04F 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}
 1843              	.LCFI4:
 1844              		.cfi_def_cfa_offset 36
 1845              		.cfi_offset 4, -36
 1846              		.cfi_offset 5, -32
 1847              		.cfi_offset 6, -28
 1848              		.cfi_offset 7, -24
 1849              		.cfi_offset 8, -20
 1850              		.cfi_offset 9, -16
 1851              		.cfi_offset 10, -12
 1852              		.cfi_offset 11, -8
 1853              		.cfi_offset 14, -4
 663:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   uint32_t position = 0x00U;
 664:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   uint32_t iocurrent = 0x00U;
 665:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   uint32_t temp = 0x00U;
 666:.././hal/stm32f3/stm32f3_hal_lowlevel.c **** 
 667:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   /* Check the parameters */
 668:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
 669:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
 670:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
 671:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
 672:.././hal/stm32f3/stm32f3_hal_lowlevel.c **** 
 673:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   /* Configure the port pins */
 674:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   while (((GPIO_Init->Pin) >> position) != RESET)
 675:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   {
 676:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****     /* Get current io position */
 677:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****     iocurrent = (GPIO_Init->Pin) & (1U << position);
 678:.././hal/stm32f3/stm32f3_hal_lowlevel.c **** 
 679:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****     if(iocurrent)
 680:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****     {
 681:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****       /*--------------------- GPIO Mode Configuration ------------------------*/
 682:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****       /* In case of Alternate function mode selection */
 683:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****       if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 684:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****       {
 685:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****         /* Check the Alternate function parameters */
 686:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****         assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
 687:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****         assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
 688:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****         
 689:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****         /* Configure Alternate function mapped with the current IO */
 690:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****         temp = GPIOx->AFR[position >> 3];
 691:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****         temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 692:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****         temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 693:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****         GPIOx->AFR[position >> 3] = temp;
 694:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****       }
 695:.././hal/stm32f3/stm32f3_hal_lowlevel.c **** 
 696:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****       /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
 697:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****       temp = GPIOx->MODER;
 698:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****       temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 699:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****       temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 700:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****       GPIOx->MODER = temp;
 701:.././hal/stm32f3/stm32f3_hal_lowlevel.c **** 
 702:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****       /* In case of Output or Alternate function mode selection */
 703:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****       if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 704:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 705:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****       {
 706:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****         /* Check the Speed parameter */
 707:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****         assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 708:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****         /* Configure the IO Speed */
 709:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****         temp = GPIOx->OSPEEDR;
 710:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****         temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 711:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****         temp |= (GPIO_Init->Speed << (position * 2U));
 712:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****         GPIOx->OSPEEDR = temp;
 713:.././hal/stm32f3/stm32f3_hal_lowlevel.c **** 
 714:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****         /* Configure the IO Output Type */
 715:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****         temp = GPIOx->OTYPER;
 716:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****         temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 717:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****         temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 718:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****         GPIOx->OTYPER = temp;
 719:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****       }
 720:.././hal/stm32f3/stm32f3_hal_lowlevel.c **** 
 721:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****       /* Activate the Pull-up or Pull down resistor for the current IO */
 722:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****       temp = GPIOx->PUPDR;
 723:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****       temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 724:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****       temp |= ((GPIO_Init->Pull) << (position * 2U));
 725:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****       GPIOx->PUPDR = temp;
 726:.././hal/stm32f3/stm32f3_hal_lowlevel.c **** 
 727:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****       /*--------------------- EXTI Mode Configuration ------------------------*/
 728:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****       /* Configure the External Interrupt or event for the current IO */
 729:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****       if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 730:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****       {
 731:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****         /* Enable SYSCFG Clock */
 732:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****         __HAL_RCC_SYSCFG_CLK_ENABLE();
 733:.././hal/stm32f3/stm32f3_hal_lowlevel.c **** 
 734:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****         temp = SYSCFG->EXTICR[position >> 2];
 735:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****         temp &= ~((0x0FU) << (4U * (position & 0x03U)));
 736:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****         temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 737:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****         SYSCFG->EXTICR[position >> 2] = temp;
 738:.././hal/stm32f3/stm32f3_hal_lowlevel.c **** 
 739:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****         /* Clear EXTI line configuration */
 740:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****         temp = EXTI->IMR;
 1854              		.loc 1 740 0
 1855 0004 DFF88491 		ldr	r9, .L189+4
 674:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   {
 1856              		.loc 1 674 0
 1857 0008 0B68     		ldr	r3, [r1]
 1858              	.LBB300:
 732:.././hal/stm32f3/stm32f3_hal_lowlevel.c **** 
 1859              		.loc 1 732 0
 1860 000a DFF88481 		ldr	r8, .L189+8
 1861              	.LBE300:
 662:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   uint32_t position = 0x00U;
 1862              		.loc 1 662 0
 1863 000e 85B0     		sub	sp, sp, #20
 1864              	.LCFI5:
 1865              		.cfi_def_cfa_offset 56
 1866 0010 4C46     		mov	r4, r9
 674:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   {
 1867              		.loc 1 674 0
 1868 0012 0193     		str	r3, [sp, #4]
 663:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   uint32_t iocurrent = 0x00U;
 1869              		.loc 1 663 0
 1870 0014 0023     		movs	r3, #0
 1871              	.LVL175:
 1872              	.L164:
 674:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   {
 1873              		.loc 1 674 0
 1874 0016 019A     		ldr	r2, [sp, #4]
 1875 0018 DA40     		lsrs	r2, r2, r3
 1876 001a 00F0B180 		beq	.L188
 677:.././hal/stm32f3/stm32f3_hal_lowlevel.c **** 
 1877              		.loc 1 677 0
 1878 001e 0122     		movs	r2, #1
 1879 0020 02FA03FA 		lsl	r10, r2, r3
 1880              	.LVL176:
 679:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****     {
 1881              		.loc 1 679 0
 1882 0024 019A     		ldr	r2, [sp, #4]
 1883 0026 12EA0A06 		ands	r6, r2, r10
 1884              	.LVL177:
 1885 002a 00F0A780 		beq	.L166
 683:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****       {
 1886              		.loc 1 683 0
 1887 002e 4A68     		ldr	r2, [r1, #4]
 1888 0030 22F0100E 		bic	lr, r2, #16
 1889 0034 BEF1020F 		cmp	lr, #2
 1890 0038 14D1     		bne	.L167
 1891 003a 4FEAD30C 		lsr	ip, r3, #3
 1892 003e 00EB8C0C 		add	ip, r0, ip, lsl #2
 691:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****         temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 1893              		.loc 1 691 0
 1894 0042 03F0070B 		and	fp, r3, #7
 690:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****         temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 1895              		.loc 1 690 0
 1896 0046 DCF82070 		ldr	r7, [ip, #32]
 1897              	.LVL178:
 691:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****         temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 1898              		.loc 1 691 0
 1899 004a 4FEA8B0B 		lsl	fp, fp, #2
 1900 004e 0F25     		movs	r5, #15
 1901 0050 05FA0BF5 		lsl	r5, r5, fp
 1902 0054 27EA0505 		bic	r5, r7, r5
 1903              	.LVL179:
 692:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****         GPIOx->AFR[position >> 3] = temp;
 1904              		.loc 1 692 0
 1905 0058 0F69     		ldr	r7, [r1, #16]
 1906 005a 07FA0BF7 		lsl	r7, r7, fp
 1907 005e 2F43     		orrs	r7, r7, r5
 1908              	.LVL180:
 693:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****       }
 1909              		.loc 1 693 0
 1910 0060 CCF82070 		str	r7, [ip, #32]
 1911              	.LVL181:
 1912              	.L167:
 1913 0064 4FEA430B 		lsl	fp, r3, #1
 698:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****       temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 1914              		.loc 1 698 0
 1915 0068 0327     		movs	r7, #3
 697:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****       temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 1916              		.loc 1 697 0
 1917 006a 0568     		ldr	r5, [r0]
 1918              	.LVL182:
 698:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****       temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 1919              		.loc 1 698 0
 1920 006c 07FA0BFC 		lsl	ip, r7, fp
 1921 0070 6FEA0C0C 		mvn	ip, ip
 699:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****       GPIOx->MODER = temp;
 1922              		.loc 1 699 0
 1923 0074 1740     		ands	r7, r7, r2
 698:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****       temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 1924              		.loc 1 698 0
 1925 0076 05EA0C05 		and	r5, r5, ip
 1926              	.LVL183:
 699:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****       GPIOx->MODER = temp;
 1927              		.loc 1 699 0
 1928 007a 07FA0BF7 		lsl	r7, r7, fp
 703:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 1929              		.loc 1 703 0
 1930 007e 0EF1FF3E 		add	lr, lr, #-1
 699:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****       GPIOx->MODER = temp;
 1931              		.loc 1 699 0
 1932 0082 3D43     		orrs	r5, r5, r7
 1933              	.LVL184:
 703:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 1934              		.loc 1 703 0
 1935 0084 BEF1010F 		cmp	lr, #1
 700:.././hal/stm32f3/stm32f3_hal_lowlevel.c **** 
 1936              		.loc 1 700 0
 1937 0088 0560     		str	r5, [r0]
 703:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 1938              		.loc 1 703 0
 1939 008a 10D8     		bhi	.L168
 709:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****         temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 1940              		.loc 1 709 0
 1941 008c 8568     		ldr	r5, [r0, #8]
 1942              	.LVL185:
 711:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****         GPIOx->OSPEEDR = temp;
 1943              		.loc 1 711 0
 1944 008e CF68     		ldr	r7, [r1, #12]
 710:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****         temp |= (GPIO_Init->Speed << (position * 2U));
 1945              		.loc 1 710 0
 1946 0090 0CEA0505 		and	r5, ip, r5
 1947              	.LVL186:
 711:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****         GPIOx->OSPEEDR = temp;
 1948              		.loc 1 711 0
 1949 0094 07FA0BF7 		lsl	r7, r7, fp
 1950 0098 2F43     		orrs	r7, r7, r5
 1951              	.LVL187:
 712:.././hal/stm32f3/stm32f3_hal_lowlevel.c **** 
 1952              		.loc 1 712 0
 1953 009a 8760     		str	r7, [r0, #8]
 715:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****         temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 1954              		.loc 1 715 0
 1955 009c 4568     		ldr	r5, [r0, #4]
 1956              	.LVL188:
 716:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****         temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 1957              		.loc 1 716 0
 1958 009e 25EA0A0A 		bic	r10, r5, r10
 1959              	.LVL189:
 717:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****         GPIOx->OTYPER = temp;
 1960              		.loc 1 717 0
 1961 00a2 C2F30015 		ubfx	r5, r2, #4, #1
 1962 00a6 9D40     		lsls	r5, r5, r3
 1963 00a8 45EA0A05 		orr	r5, r5, r10
 1964              	.LVL190:
 718:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****       }
 1965              		.loc 1 718 0
 1966 00ac 4560     		str	r5, [r0, #4]
 1967              	.LVL191:
 1968              	.L168:
 722:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****       temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 1969              		.loc 1 722 0
 1970 00ae C568     		ldr	r5, [r0, #12]
 1971              	.LVL192:
 723:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****       temp |= ((GPIO_Init->Pull) << (position * 2U));
 1972              		.loc 1 723 0
 1973 00b0 0CEA050C 		and	ip, ip, r5
 1974              	.LVL193:
 724:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****       GPIOx->PUPDR = temp;
 1975              		.loc 1 724 0
 1976 00b4 8D68     		ldr	r5, [r1, #8]
 1977 00b6 05FA0BF5 		lsl	r5, r5, fp
 1978 00ba 45EA0C05 		orr	r5, r5, ip
 1979              	.LVL194:
 725:.././hal/stm32f3/stm32f3_hal_lowlevel.c **** 
 1980              		.loc 1 725 0
 1981 00be C560     		str	r5, [r0, #12]
 729:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****       {
 1982              		.loc 1 729 0
 1983 00c0 D500     		lsls	r5, r2, #3
 1984              	.LVL195:
 1985 00c2 5BD5     		bpl	.L166
 1986              	.LBB301:
 732:.././hal/stm32f3/stm32f3_hal_lowlevel.c **** 
 1987              		.loc 1 732 0
 1988 00c4 D8F81850 		ldr	r5, [r8, #24]
 1989 00c8 45F00105 		orr	r5, r5, #1
 1990 00cc C8F81850 		str	r5, [r8, #24]
 1991              	.LVL196:
 1992 00d0 D8F81850 		ldr	r5, [r8, #24]
 1993 00d4 23F0030E 		bic	lr, r3, #3
 1994 00d8 0EF1804E 		add	lr, lr, #1073741824
 1995 00dc 05F00105 		and	r5, r5, #1
 1996 00e0 0EF5803E 		add	lr, lr, #65536
 1997 00e4 0395     		str	r5, [sp, #12]
 1998              	.LBE301:
 735:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****         temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 1999              		.loc 1 735 0
 2000 00e6 03F0030C 		and	ip, r3, #3
 2001              	.LBB302:
 732:.././hal/stm32f3/stm32f3_hal_lowlevel.c **** 
 2002              		.loc 1 732 0
 2003 00ea 039D     		ldr	r5, [sp, #12]
 2004              	.LBE302:
 734:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****         temp &= ~((0x0FU) << (4U * (position & 0x03U)));
 2005              		.loc 1 734 0
 2006 00ec DEF80850 		ldr	r5, [lr, #8]
 2007              	.LVL197:
 735:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****         temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 2008              		.loc 1 735 0
 2009 00f0 4FEA8C0C 		lsl	ip, ip, #2
 2010 00f4 0F27     		movs	r7, #15
 2011 00f6 07FA0CF7 		lsl	r7, r7, ip
 736:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****         SYSCFG->EXTICR[position >> 2] = temp;
 2012              		.loc 1 736 0
 2013 00fa B0F1904F 		cmp	r0, #1207959552
 735:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****         temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 2014              		.loc 1 735 0
 2015 00fe 25EA0705 		bic	r5, r5, r7
 2016              	.LVL198:
 736:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****         SYSCFG->EXTICR[position >> 2] = temp;
 2017              		.loc 1 736 0
 2018 0102 11D0     		beq	.L180
 736:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****         SYSCFG->EXTICR[position >> 2] = temp;
 2019              		.loc 1 736 0 is_stmt 0 discriminator 1
 2020 0104 204F     		ldr	r7, .L189
 2021 0106 B842     		cmp	r0, r7
 2022 0108 10D0     		beq	.L181
 736:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****         SYSCFG->EXTICR[position >> 2] = temp;
 2023              		.loc 1 736 0 discriminator 3
 2024 010a 07F58067 		add	r7, r7, #1024
 2025 010e B842     		cmp	r0, r7
 2026 0110 0ED0     		beq	.L182
 736:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****         SYSCFG->EXTICR[position >> 2] = temp;
 2027              		.loc 1 736 0 discriminator 5
 2028 0112 07F58067 		add	r7, r7, #1024
 2029 0116 B842     		cmp	r0, r7
 2030 0118 0CD0     		beq	.L183
 736:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****         SYSCFG->EXTICR[position >> 2] = temp;
 2031              		.loc 1 736 0 discriminator 7
 2032 011a 07F58067 		add	r7, r7, #1024
 2033 011e B842     		cmp	r0, r7
 2034 0120 14BF     		ite	ne
 2035 0122 0527     		movne	r7, #5
 2036 0124 0427     		moveq	r7, #4
 2037 0126 06E0     		b	.L170
 2038              	.L180:
 736:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****         SYSCFG->EXTICR[position >> 2] = temp;
 2039              		.loc 1 736 0
 2040 0128 0027     		movs	r7, #0
 2041 012a 04E0     		b	.L170
 2042              	.L181:
 2043 012c 0127     		movs	r7, #1
 2044 012e 02E0     		b	.L170
 2045              	.L182:
 2046 0130 0227     		movs	r7, #2
 2047 0132 00E0     		b	.L170
 2048              	.L183:
 2049 0134 0327     		movs	r7, #3
 2050              	.L170:
 736:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****         SYSCFG->EXTICR[position >> 2] = temp;
 2051              		.loc 1 736 0 discriminator 20
 2052 0136 07FA0CFC 		lsl	ip, r7, ip
 2053 013a 4CEA0505 		orr	r5, ip, r5
 2054              	.LVL199:
 737:.././hal/stm32f3/stm32f3_hal_lowlevel.c **** 
 2055              		.loc 1 737 0 is_stmt 1 discriminator 20
 2056 013e CEF80850 		str	r5, [lr, #8]
 2057              		.loc 1 740 0 discriminator 20
 2058 0142 D9F80050 		ldr	r5, [r9]
 2059              	.LVL200:
 741:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****         temp &= ~((uint32_t)iocurrent);
 2060              		.loc 1 741 0 discriminator 20
 2061 0146 F743     		mvns	r7, r6
 2062              	.LVL201:
 742:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****         if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 2063              		.loc 1 742 0 discriminator 20
 2064 0148 12F4803F 		tst	r2, #65536
 741:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****         temp &= ~((uint32_t)iocurrent);
 2065              		.loc 1 741 0 discriminator 20
 2066 014c 0CBF     		ite	eq
 2067 014e 3D40     		andeq	r5, r5, r7
 2068              	.LVL202:
 743:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****         {
 744:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****           temp |= iocurrent;
 2069              		.loc 1 744 0 discriminator 20
 2070 0150 3543     		orrne	r5, r5, r6
 2071              	.LVL203:
 745:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****         }
 746:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****         EXTI->IMR = temp;
 2072              		.loc 1 746 0 discriminator 20
 2073 0152 2560     		str	r5, [r4]
 747:.././hal/stm32f3/stm32f3_hal_lowlevel.c **** 
 748:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****         temp = EXTI->EMR;
 2074              		.loc 1 748 0 discriminator 20
 2075 0154 6568     		ldr	r5, [r4, #4]
 2076              	.LVL204:
 749:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****         temp &= ~((uint32_t)iocurrent);
 750:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****         if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 2077              		.loc 1 750 0 discriminator 20
 2078 0156 12F4003F 		tst	r2, #131072
 749:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****         temp &= ~((uint32_t)iocurrent);
 2079              		.loc 1 749 0 discriminator 20
 2080 015a 0CBF     		ite	eq
 2081 015c 3D40     		andeq	r5, r5, r7
 2082              	.LVL205:
 751:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****         {
 752:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****           temp |= iocurrent;
 2083              		.loc 1 752 0 discriminator 20
 2084 015e 3543     		orrne	r5, r5, r6
 2085              	.LVL206:
 753:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****         }
 754:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****         EXTI->EMR = temp;
 2086              		.loc 1 754 0 discriminator 20
 2087 0160 6560     		str	r5, [r4, #4]
 755:.././hal/stm32f3/stm32f3_hal_lowlevel.c **** 
 756:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****         /* Clear Rising Falling edge configuration */
 757:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****         temp = EXTI->RTSR;
 2088              		.loc 1 757 0 discriminator 20
 2089 0162 A568     		ldr	r5, [r4, #8]
 2090              	.LVL207:
 758:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****         temp &= ~((uint32_t)iocurrent);
 759:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****         if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 2091              		.loc 1 759 0 discriminator 20
 2092 0164 12F4801F 		tst	r2, #1048576
 758:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****         temp &= ~((uint32_t)iocurrent);
 2093              		.loc 1 758 0 discriminator 20
 2094 0168 0CBF     		ite	eq
 2095 016a 3D40     		andeq	r5, r5, r7
 2096              	.LVL208:
 760:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****         {
 761:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****           temp |= iocurrent;
 2097              		.loc 1 761 0 discriminator 20
 2098 016c 3543     		orrne	r5, r5, r6
 2099              	.LVL209:
 762:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****         }
 763:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****         EXTI->RTSR = temp;
 2100              		.loc 1 763 0 discriminator 20
 2101 016e A560     		str	r5, [r4, #8]
 764:.././hal/stm32f3/stm32f3_hal_lowlevel.c **** 
 765:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****         temp = EXTI->FTSR;
 2102              		.loc 1 765 0 discriminator 20
 2103 0170 E568     		ldr	r5, [r4, #12]
 2104              	.LVL210:
 766:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****         temp &= ~((uint32_t)iocurrent);
 767:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****         if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 2105              		.loc 1 767 0 discriminator 20
 2106 0172 9202     		lsls	r2, r2, #10
 766:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****         temp &= ~((uint32_t)iocurrent);
 2107              		.loc 1 766 0 discriminator 20
 2108 0174 54BF     		ite	pl
 2109 0176 3D40     		andpl	r5, r5, r7
 2110              	.LVL211:
 768:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****         {
 769:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****           temp |= iocurrent;
 2111              		.loc 1 769 0 discriminator 20
 2112 0178 3543     		orrmi	r5, r5, r6
 2113              	.LVL212:
 770:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****         }
 771:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****         EXTI->FTSR = temp;
 2114              		.loc 1 771 0 discriminator 20
 2115 017a E560     		str	r5, [r4, #12]
 2116              	.LVL213:
 2117              	.L166:
 772:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****       }
 773:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****     }
 774:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****     
 775:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****     position++;
 2118              		.loc 1 775 0
 2119 017c 0133     		adds	r3, r3, #1
 2120              	.LVL214:
 2121 017e 4AE7     		b	.L164
 2122              	.LVL215:
 2123              	.L188:
 776:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   }
 777:.././hal/stm32f3/stm32f3_hal_lowlevel.c **** }
 2124              		.loc 1 777 0
 2125 0180 05B0     		add	sp, sp, #20
 2126              	.LCFI6:
 2127              		.cfi_def_cfa_offset 36
 2128              		@ sp needed
 2129 0182 BDE8F08F 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
 2130              	.L190:
 2131 0186 00BF     		.align	2
 2132              	.L189:
 2133 0188 00040048 		.word	1207960576
 2134 018c 00040140 		.word	1073808384
 2135 0190 00100240 		.word	1073876992
 2136              		.cfi_endproc
 2137              	.LFE133:
 2139              		.section	.text.HAL_GPIO_WritePin,"ax",%progbits
 2140              		.align	1
 2141              		.global	HAL_GPIO_WritePin
 2142              		.thumb
 2143              		.thumb_func
 2145              	HAL_GPIO_WritePin:
 2146              	.LFB134:
 778:.././hal/stm32f3/stm32f3_hal_lowlevel.c **** 
 779:.././hal/stm32f3/stm32f3_hal_lowlevel.c **** /**
 780:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   * @brief  Set or clear the selected data port bit.
 781:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   *
 782:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   * @note   This function uses GPIOx_BSRR and GPIOx_BRR registers to allow atomic read/modify
 783:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   *         accesses. In this way, there is no risk of an IRQ occurring between
 784:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   *         the read and the modify access.
 785:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   *
 786:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   * @param  GPIOx: where x can be (A..F) to select the GPIO peripheral for STM32F3 family
 787:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   * @param  GPIO_Pin: specifies the port bit to be written.
 788:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   *         This parameter can be one of GPIO_PIN_x where x can be (0..15).
 789:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   * @param  PinState: specifies the value to be written to the selected bit.
 790:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   *         This parameter can be one of the GPIO_PinState enum values:
 791:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   *            @arg GPIO_PIN_RESET: to clear the port pin
 792:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   *            @arg GPIO_PIN_SET: to set the port pin
 793:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   * @retval None
 794:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   */
 795:.././hal/stm32f3/stm32f3_hal_lowlevel.c **** void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
 796:.././hal/stm32f3/stm32f3_hal_lowlevel.c **** {
 2147              		.loc 1 796 0
 2148              		.cfi_startproc
 2149              		@ args = 0, pretend = 0, frame = 0
 2150              		@ frame_needed = 0, uses_anonymous_args = 0
 2151              		@ link register save eliminated.
 2152              	.LVL216:
 797:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   /* Check the parameters */
 798:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   assert_param(IS_GPIO_PIN(GPIO_Pin));
 799:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   assert_param(IS_GPIO_PIN_ACTION(PinState));
 800:.././hal/stm32f3/stm32f3_hal_lowlevel.c **** 
 801:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   if(PinState != GPIO_PIN_RESET)
 2153              		.loc 1 801 0
 2154 0000 0AB1     		cbz	r2, .L192
 802:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   {
 803:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****     GPIOx->BSRR = (uint32_t)GPIO_Pin;
 2155              		.loc 1 803 0
 2156 0002 8161     		str	r1, [r0, #24]
 2157 0004 7047     		bx	lr
 2158              	.L192:
 804:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   }
 805:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   else
 806:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   {
 807:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****     GPIOx->BRR = (uint32_t)GPIO_Pin;
 2159              		.loc 1 807 0
 2160 0006 8162     		str	r1, [r0, #40]
 2161 0008 7047     		bx	lr
 2162              		.cfi_endproc
 2163              	.LFE134:
 2165              		.section	.text.UART_SetConfig,"ax",%progbits
 2166              		.align	1
 2167              		.global	UART_SetConfig
 2168              		.thumb
 2169              		.thumb_func
 2171              	UART_SetConfig:
 2172              	.LFB135:
 808:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   }
 809:.././hal/stm32f3/stm32f3_hal_lowlevel.c **** }
 810:.././hal/stm32f3/stm32f3_hal_lowlevel.c **** 
 811:.././hal/stm32f3/stm32f3_hal_lowlevel.c **** 
 812:.././hal/stm32f3/stm32f3_hal_lowlevel.c **** /**
 813:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   * @brief Configure the UART peripheral.
 814:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   * @param huart: UART handle.
 815:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   * @retval HAL status
 816:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   */
 817:.././hal/stm32f3/stm32f3_hal_lowlevel.c **** HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
 818:.././hal/stm32f3/stm32f3_hal_lowlevel.c **** {
 2173              		.loc 1 818 0
 2174              		.cfi_startproc
 2175              		@ args = 0, pretend = 0, frame = 0
 2176              		@ frame_needed = 0, uses_anonymous_args = 0
 2177              	.LVL217:
 2178 0000 30B5     		push	{r4, r5, lr}
 2179              	.LCFI7:
 2180              		.cfi_def_cfa_offset 12
 2181              		.cfi_offset 4, -12
 2182              		.cfi_offset 5, -8
 2183              		.cfi_offset 14, -4
 819:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   uint32_t tmpreg                     = 0x00000000U;
 820:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   UART_ClockSourceTypeDef clocksource = UART_CLOCKSOURCE_UNDEFINED;
 821:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   uint16_t brrtemp                    = 0x0000U;
 822:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   uint16_t usartdiv                   = 0x0000U;
 823:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   HAL_StatusTypeDef ret               = HAL_OK;
 824:.././hal/stm32f3/stm32f3_hal_lowlevel.c **** 
 825:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   /* Check the parameters */
 826:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
 827:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
 828:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   assert_param(IS_UART_STOPBITS(huart->Init.StopBits));
 829:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   assert_param(IS_UART_PARITY(huart->Init.Parity));
 830:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   assert_param(IS_UART_MODE(huart->Init.Mode));
 831:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   assert_param(IS_UART_HARDWARE_FLOW_CONTROL(huart->Init.HwFlowCtl));
 832:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   assert_param(IS_UART_ONE_BIT_SAMPLE(huart->Init.OneBitSampling));
 833:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
 834:.././hal/stm32f3/stm32f3_hal_lowlevel.c **** 
 835:.././hal/stm32f3/stm32f3_hal_lowlevel.c **** 
 836:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   /*-------------------------- USART CR1 Configuration -----------------------*/
 837:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   /* Clear M, PCE, PS, TE, RE and OVER8 bits and configure
 838:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****    *  the UART Word Length, Parity, Mode and oversampling:
 839:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****    *  set the M bits according to huart->Init.WordLength value
 840:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****    *  set PCE and PS bits according to huart->Init.Parity value
 841:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****    *  set TE and RE bits according to huart->Init.Mode value
 842:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****    *  set OVER8 bit according to huart->Init.OverSampling value */
 843:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.O
 844:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 2184              		.loc 1 844 0
 2185 0002 0269     		ldr	r2, [r0, #16]
 2186 0004 8568     		ldr	r5, [r0, #8]
 2187 0006 0168     		ldr	r1, [r0]
 843:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 2188              		.loc 1 843 0
 2189 0008 C369     		ldr	r3, [r0, #28]
 2190              	.LVL218:
 2191              		.loc 1 844 0
 2192 000a 0C68     		ldr	r4, [r1]
 2193 000c 1543     		orrs	r5, r5, r2
 2194 000e 4269     		ldr	r2, [r0, #20]
 2195 0010 2A43     		orrs	r2, r2, r5
 2196 0012 42EA0305 		orr	r5, r2, r3
 2197 0016 24F41642 		bic	r2, r4, #38400
 2198 001a 22F00C02 		bic	r2, r2, #12
 2199 001e 2A43     		orrs	r2, r2, r5
 2200 0020 0A60     		str	r2, [r1]
 2201              	.LVL219:
 845:.././hal/stm32f3/stm32f3_hal_lowlevel.c **** 
 846:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   /*-------------------------- USART CR2 Configuration -----------------------*/
 847:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   /* Configure the UART Stop Bits: Set STOP[13:12] bits according
 848:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****    * to huart->Init.StopBits value */
 849:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 2202              		.loc 1 849 0
 2203 0022 4A68     		ldr	r2, [r1, #4]
 850:.././hal/stm32f3/stm32f3_hal_lowlevel.c **** 
 851:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   /*-------------------------- USART CR3 Configuration -----------------------*/
 852:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   /* Configure
 853:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****    * - UART HardWare Flow Control: set CTSE and RTSE bits according
 854:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****    *   to huart->Init.HwFlowCtl value
 855:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****    * - one-bit sampling method versus three samples' majority rule according
 856:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****    *   to huart->Init.OneBitSampling */
 857:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
 858:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
 2204              		.loc 1 858 0
 2205 0024 8569     		ldr	r5, [r0, #24]
 849:.././hal/stm32f3/stm32f3_hal_lowlevel.c **** 
 2206              		.loc 1 849 0
 2207 0026 22F44054 		bic	r4, r2, #12288
 2208 002a C268     		ldr	r2, [r0, #12]
 2209 002c 2243     		orrs	r2, r2, r4
 2210 002e 4A60     		str	r2, [r1, #4]
 2211              	.LVL220:
 2212              		.loc 1 858 0
 2213 0030 8A68     		ldr	r2, [r1, #8]
 2214 0032 046A     		ldr	r4, [r0, #32]
 2215 0034 22F43062 		bic	r2, r2, #2816
 2216 0038 2C43     		orrs	r4, r4, r5
 2217 003a 2243     		orrs	r2, r2, r4
 2218 003c 8A60     		str	r2, [r1, #8]
 2219              	.LVL221:
 859:.././hal/stm32f3/stm32f3_hal_lowlevel.c **** 
 860:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   /*-------------------------- USART BRR Configuration -----------------------*/
 861:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   UART_GETCLOCKSOURCE(huart, clocksource);
 2220              		.loc 1 861 0
 2221 003e 5D4A     		ldr	r2, .L305
 2222 0040 9142     		cmp	r1, r2
 2223 0042 0AD1     		bne	.L195
 2224              		.loc 1 861 0 is_stmt 0 discriminator 1
 2225 0044 02F55842 		add	r2, r2, #55296
 2226 0048 5B4C     		ldr	r4, .L305+4
 2227 004a 126B     		ldr	r2, [r2, #48]
 2228 004c 02F00302 		and	r2, r2, #3
 862:.././hal/stm32f3/stm32f3_hal_lowlevel.c **** 
 863:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   /* Check UART Over Sampling to set Baud Rate Register */
 864:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 2229              		.loc 1 864 0 is_stmt 1 discriminator 1
 2230 0050 B3F5004F 		cmp	r3, #32768
 2231 0054 A25C     		ldrb	r2, [r4, r2]	@ zero_extendqisi2
 2232              	.LVL222:
 2233 0056 4BD0     		beq	.L196
 2234 0058 7FE0     		b	.L304
 2235              	.LVL223:
 2236              	.L195:
 861:.././hal/stm32f3/stm32f3_hal_lowlevel.c **** 
 2237              		.loc 1 861 0 discriminator 2
 2238 005a 584A     		ldr	r2, .L305+8
 2239 005c 9142     		cmp	r1, r2
 2240 005e 0ED1     		bne	.L198
 861:.././hal/stm32f3/stm32f3_hal_lowlevel.c **** 
 2241              		.loc 1 861 0 is_stmt 0 discriminator 8
 2242 0060 02F5E632 		add	r2, r2, #117760
 2243 0064 126B     		ldr	r2, [r2, #48]
 2244 0066 02F44032 		and	r2, r2, #196608
 2245 006a B2F5803F 		cmp	r2, #65536
 2246 006e 54D0     		beq	.L200
 2247 0070 35D9     		bls	.L292
 2248 0072 B2F5003F 		cmp	r2, #131072
 2249 0076 58D0     		beq	.L203
 2250 0078 B2F5403F 		cmp	r2, #196608
 2251 007c 36E0     		b	.L296
 2252              	.L198:
 861:.././hal/stm32f3/stm32f3_hal_lowlevel.c **** 
 2253              		.loc 1 861 0 discriminator 9
 2254 007e 504A     		ldr	r2, .L305+12
 2255 0080 9142     		cmp	r1, r2
 2256 0082 0ED1     		bne	.L205
 861:.././hal/stm32f3/stm32f3_hal_lowlevel.c **** 
 2257              		.loc 1 861 0 discriminator 15
 2258 0084 02F5E432 		add	r2, r2, #116736
 2259 0088 126B     		ldr	r2, [r2, #48]
 2260 008a 02F44022 		and	r2, r2, #786432
 2261 008e B2F5802F 		cmp	r2, #262144
 2262 0092 42D0     		beq	.L200
 2263 0094 23D9     		bls	.L292
 2264 0096 B2F5002F 		cmp	r2, #524288
 2265 009a 46D0     		beq	.L203
 2266 009c B2F5402F 		cmp	r2, #786432
 2267 00a0 24E0     		b	.L296
 2268              	.L205:
 861:.././hal/stm32f3/stm32f3_hal_lowlevel.c **** 
 2269              		.loc 1 861 0 discriminator 16
 2270 00a2 484A     		ldr	r2, .L305+16
 2271 00a4 9142     		cmp	r1, r2
 2272 00a6 0ED1     		bne	.L207
 861:.././hal/stm32f3/stm32f3_hal_lowlevel.c **** 
 2273              		.loc 1 861 0 discriminator 22
 2274 00a8 02F5E232 		add	r2, r2, #115712
 2275 00ac 126B     		ldr	r2, [r2, #48]
 2276 00ae 02F44012 		and	r2, r2, #3145728
 2277 00b2 B2F5801F 		cmp	r2, #1048576
 2278 00b6 30D0     		beq	.L200
 2279 00b8 11D9     		bls	.L292
 2280 00ba B2F5001F 		cmp	r2, #2097152
 2281 00be 34D0     		beq	.L203
 2282 00c0 B2F5401F 		cmp	r2, #3145728
 2283 00c4 12E0     		b	.L296
 2284              	.L207:
 861:.././hal/stm32f3/stm32f3_hal_lowlevel.c **** 
 2285              		.loc 1 861 0 discriminator 23
 2286 00c6 404A     		ldr	r2, .L305+20
 2287 00c8 9142     		cmp	r1, r2
 2288 00ca 3AD1     		bne	.L199
 861:.././hal/stm32f3/stm32f3_hal_lowlevel.c **** 
 2289              		.loc 1 861 0 discriminator 29
 2290 00cc 02F5E032 		add	r2, r2, #114688
 2291 00d0 126B     		ldr	r2, [r2, #48]
 2292 00d2 02F44002 		and	r2, r2, #12582912
 2293 00d6 B2F5800F 		cmp	r2, #4194304
 2294 00da 1ED0     		beq	.L200
 2295 00dc 01D8     		bhi	.L209
 2296              	.L292:
 2297 00de E2B1     		cbz	r2, .L200
 2298 00e0 2FE0     		b	.L199
 2299              	.L209:
 2300 00e2 B2F5000F 		cmp	r2, #8388608
 2301 00e6 20D0     		beq	.L203
 2302 00e8 B2F5400F 		cmp	r2, #12582912
 2303              	.L296:
 2304 00ec 09D0     		beq	.L204
 2305 00ee 28E0     		b	.L199
 2306              	.LVL224:
 2307              	.L196:
 865:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   {
 866:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****     switch (clocksource)
 2308              		.loc 1 866 0 is_stmt 1
 2309 00f0 082A     		cmp	r2, #8
 2310 00f2 29D8     		bhi	.L226
 2311 00f4 DFE802F0 		tbb	[pc, r2]
 2312              	.L212:
 2313 00f8 14       		.byte	(.L215-.L212)/2
 2314 00f9 14       		.byte	(.L215-.L212)/2
 2315 00fa 08       		.byte	(.L214-.L212)/2
 2316 00fb 28       		.byte	(.L226-.L212)/2
 2317 00fc 14       		.byte	(.L215-.L212)/2
 2318 00fd 28       		.byte	(.L226-.L212)/2
 2319 00fe 28       		.byte	(.L226-.L212)/2
 2320 00ff 28       		.byte	(.L226-.L212)/2
 2321 0100 1C       		.byte	(.L216-.L212)/2
 2322              	.LVL225:
 2323 0101 00       		.p2align 1
 2324              	.L204:
 864:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   {
 2325              		.loc 1 864 0
 2326 0102 B3F5004F 		cmp	r3, #32768
 2327 0106 3BD1     		bne	.L221
 2328              	.LVL226:
 2329              	.L214:
 867:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****     {
 868:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****       case UART_CLOCKSOURCE_PCLK1:
 869:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****         usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 870:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****         break;
 871:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****       case UART_CLOCKSOURCE_PCLK2:
 872:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****         usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 873:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****         break;
 874:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****       case UART_CLOCKSOURCE_HSI:
 875:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****         usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 2330              		.loc 1 875 0
 2331 0108 4068     		ldr	r0, [r0, #4]
 2332              	.LVL227:
 2333 010a 4208     		lsrs	r2, r0, #1
 2334 010c 02F1F473 		add	r3, r2, #31981568
 2335 0110 03F59043 		add	r3, r3, #18432
 2336 0114 B3FBF0F3 		udiv	r3, r3, r0
 2337 0118 10E0     		b	.L290
 2338              	.LVL228:
 2339              	.L200:
 864:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   {
 2340              		.loc 1 864 0
 2341 011a B3F5004F 		cmp	r3, #32768
 2342 011e 38D1     		bne	.L222
 2343              	.LVL229:
 2344              	.L215:
 876:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****         break;
 877:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****       case UART_CLOCKSOURCE_SYSCLK:
 878:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****         usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 2345              		.loc 1 878 0
 2346 0120 4268     		ldr	r2, [r0, #4]
 2347 0122 5308     		lsrs	r3, r2, #1
 2348 0124 03F56103 		add	r3, r3, #14745600
 2349 0128 06E0     		b	.L289
 2350              	.LVL230:
 2351              	.L203:
 864:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   {
 2352              		.loc 1 864 0
 2353 012a B3F5004F 		cmp	r3, #32768
 2354 012e 35D1     		bne	.L223
 2355              	.LVL231:
 2356              	.L216:
 879:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****         break;
 880:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****       case UART_CLOCKSOURCE_LSE:
 881:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****         usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 2357              		.loc 1 881 0
 2358 0130 4268     		ldr	r2, [r0, #4]
 2359 0132 5308     		lsrs	r3, r2, #1
 2360 0134 03F58033 		add	r3, r3, #65536
 2361              	.L289:
 2362 0138 B3FBF2F3 		udiv	r3, r3, r2
 2363              	.LVL232:
 2364              	.L290:
 2365 013c 9BB2     		uxth	r3, r3
 2366              	.LVL233:
 823:.././hal/stm32f3/stm32f3_hal_lowlevel.c **** 
 2367              		.loc 1 823 0
 2368 013e 0020     		movs	r0, #0
 882:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****         break;
 2369              		.loc 1 882 0
 2370 0140 04E0     		b	.L210
 2371              	.LVL234:
 2372              	.L199:
 864:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   {
 2373              		.loc 1 864 0
 2374 0142 B3F5004F 		cmp	r3, #32768
 2375 0146 33D1     		bne	.L300
 2376              	.LVL235:
 2377              	.L226:
 883:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****       case UART_CLOCKSOURCE_UNDEFINED:
 884:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****       default:
 885:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****         ret = HAL_ERROR;
 2378              		.loc 1 885 0
 2379 0148 0120     		movs	r0, #1
 2380              	.LVL236:
 822:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   HAL_StatusTypeDef ret               = HAL_OK;
 2381              		.loc 1 822 0
 2382 014a 0023     		movs	r3, #0
 2383              	.LVL237:
 2384              	.L210:
 886:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****         break;
 887:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****     }
 888:.././hal/stm32f3/stm32f3_hal_lowlevel.c **** 
 889:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****     brrtemp = usartdiv & 0xFFF0U;
 2385              		.loc 1 889 0
 2386 014c 23F00F02 		bic	r2, r3, #15
 2387              	.LVL238:
 890:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****     brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 891:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****     huart->Instance->BRR = brrtemp;
 2388              		.loc 1 891 0
 2389 0150 C3F34203 		ubfx	r3, r3, #1, #3
 2390              	.LVL239:
 2391 0154 1343     		orrs	r3, r3, r2
 2392 0156 CB60     		str	r3, [r1, #12]
 2393 0158 30BD     		pop	{r4, r5, pc}
 2394              	.LVL240:
 2395              	.L304:
 892:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   }
 893:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   else
 894:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   {
 895:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****     switch (clocksource)
 2396              		.loc 1 895 0
 2397 015a 082A     		cmp	r2, #8
 2398 015c 28D8     		bhi	.L300
 2399 015e DFE802F0 		tbb	[pc, r2]
 2400              	.L219:
 2401 0162 18       		.byte	(.L222-.L219)/2
 2402 0163 05       		.byte	(.L220-.L219)/2
 2403 0164 0F       		.byte	(.L221-.L219)/2
 2404 0165 27       		.byte	(.L300-.L219)/2
 2405 0166 18       		.byte	(.L222-.L219)/2
 2406 0167 27       		.byte	(.L300-.L219)/2
 2407 0168 27       		.byte	(.L300-.L219)/2
 2408 0169 27       		.byte	(.L300-.L219)/2
 2409 016a 1D       		.byte	(.L223-.L219)/2
 2410 016b 00       		.p2align 1
 2411              	.L220:
 896:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****     {
 897:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****       case UART_CLOCKSOURCE_PCLK1:
 898:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****         huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.B
 899:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****         break;
 900:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****       case UART_CLOCKSOURCE_PCLK2:
 901:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****         huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.B
 2412              		.loc 1 901 0
 2413 016c 4268     		ldr	r2, [r0, #4]
 2414              	.LVL241:
 2415 016e 5308     		lsrs	r3, r2, #1
 2416 0170 03F5E103 		add	r3, r3, #7372800
 2417 0174 B3FBF2F3 		udiv	r3, r3, r2
 2418 0178 0E4A     		ldr	r2, .L305
 2419 017a 9BB2     		uxth	r3, r3
 2420 017c D360     		str	r3, [r2, #12]
 2421 017e 15E0     		b	.L303
 2422              	.L221:
 902:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****         break;
 903:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****       case UART_CLOCKSOURCE_HSI:
 904:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****         huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 2423              		.loc 1 904 0
 2424 0180 4068     		ldr	r0, [r0, #4]
 2425              	.LVL242:
 2426 0182 4208     		lsrs	r2, r0, #1
 2427 0184 02F57403 		add	r3, r2, #15990784
 2428 0188 03F51053 		add	r3, r3, #9216
 2429 018c B3FBF0F3 		udiv	r3, r3, r0
 2430 0190 0AE0     		b	.L302
 2431              	.LVL243:
 2432              	.L222:
 905:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****         break;
 906:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****       case UART_CLOCKSOURCE_SYSCLK:
 907:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****         huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Ini
 2433              		.loc 1 907 0
 2434 0192 4268     		ldr	r2, [r0, #4]
 2435 0194 5308     		lsrs	r3, r2, #1
 2436 0196 03F5E103 		add	r3, r3, #7372800
 2437 019a 03E0     		b	.L301
 2438              	.L223:
 908:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****         break;
 909:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****       case UART_CLOCKSOURCE_LSE:
 910:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****         huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 2439              		.loc 1 910 0
 2440 019c 4268     		ldr	r2, [r0, #4]
 2441 019e 5308     		lsrs	r3, r2, #1
 2442 01a0 03F50043 		add	r3, r3, #32768
 2443              	.L301:
 2444 01a4 B3FBF2F3 		udiv	r3, r3, r2
 2445              	.LVL244:
 2446              	.L302:
 2447 01a8 9BB2     		uxth	r3, r3
 2448 01aa CB60     		str	r3, [r1, #12]
 2449              	.L303:
 823:.././hal/stm32f3/stm32f3_hal_lowlevel.c **** 
 2450              		.loc 1 823 0
 2451 01ac 0020     		movs	r0, #0
 911:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****         break;
 2452              		.loc 1 911 0
 2453 01ae 30BD     		pop	{r4, r5, pc}
 2454              	.LVL245:
 2455              	.L300:
 912:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****       case UART_CLOCKSOURCE_UNDEFINED:
 913:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****       default:
 914:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****         ret = HAL_ERROR;
 2456              		.loc 1 914 0
 2457 01b0 0120     		movs	r0, #1
 2458              	.LVL246:
 915:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****         break;
 916:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****     }
 917:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   }
 918:.././hal/stm32f3/stm32f3_hal_lowlevel.c **** 
 919:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   return ret;
 2459              		.loc 1 919 0
 2460 01b2 30BD     		pop	{r4, r5, pc}
 2461              	.L306:
 2462              		.align	2
 2463              	.L305:
 2464 01b4 00380140 		.word	1073821696
 2465 01b8 00000000 		.word	.LANCHOR1
 2466 01bc 00440040 		.word	1073759232
 2467 01c0 00480040 		.word	1073760256
 2468 01c4 004C0040 		.word	1073761280
 2469 01c8 00500040 		.word	1073762304
 2470              		.cfi_endproc
 2471              	.LFE135:
 2473              		.section	.text.UART_WaitOnFlagUntilTimeout,"ax",%progbits
 2474              		.align	1
 2475              		.global	UART_WaitOnFlagUntilTimeout
 2476              		.thumb
 2477              		.thumb_func
 2479              	UART_WaitOnFlagUntilTimeout:
 2480              	.LFB138:
 920:.././hal/stm32f3/stm32f3_hal_lowlevel.c **** 
 921:.././hal/stm32f3/stm32f3_hal_lowlevel.c **** }
 922:.././hal/stm32f3/stm32f3_hal_lowlevel.c **** 
 923:.././hal/stm32f3/stm32f3_hal_lowlevel.c **** 
 924:.././hal/stm32f3/stm32f3_hal_lowlevel.c **** /**
 925:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   * @brief Check the UART Idle State.
 926:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   * @param huart UART handle.
 927:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   * @retval HAL status
 928:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   */
 929:.././hal/stm32f3/stm32f3_hal_lowlevel.c **** HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
 930:.././hal/stm32f3/stm32f3_hal_lowlevel.c **** {
 931:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   uint32_t tickstart = 0U;
 932:.././hal/stm32f3/stm32f3_hal_lowlevel.c **** 
 933:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   /* Initialize the UART ErrorCode */
 934:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   huart->ErrorCode = HAL_UART_ERROR_NONE;
 935:.././hal/stm32f3/stm32f3_hal_lowlevel.c **** 
 936:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   /* Init tickstart for timeout managment*/
 937:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   tickstart = HAL_GetTick();
 938:.././hal/stm32f3/stm32f3_hal_lowlevel.c **** 
 939:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   /* Check if the Transmitter is enabled */
 940:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   if((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 941:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   {
 942:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****     /* Wait until TEACK flag is set */
 943:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****     if(UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE
 944:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****     {
 945:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****       /* Timeout Occured */
 946:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****       return HAL_TIMEOUT;
 947:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****     }
 948:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   }
 949:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   /* Check if the Receiver is enabled */
 950:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   if((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 951:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   {
 952:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****     /* Wait until REACK flag is set */
 953:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****     if(UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE
 954:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****     {
 955:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****       /* Timeout Occured */
 956:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****       return HAL_TIMEOUT;
 957:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****     }
 958:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   }
 959:.././hal/stm32f3/stm32f3_hal_lowlevel.c **** 
 960:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   /* Initialize the UART State */
 961:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   huart->gState  = HAL_UART_STATE_READY;
 962:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   huart->RxState = HAL_UART_STATE_READY;
 963:.././hal/stm32f3/stm32f3_hal_lowlevel.c **** 
 964:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   /* Process Unlocked */
 965:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   __HAL_UNLOCK(huart);
 966:.././hal/stm32f3/stm32f3_hal_lowlevel.c **** 
 967:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   return HAL_OK;
 968:.././hal/stm32f3/stm32f3_hal_lowlevel.c **** }
 969:.././hal/stm32f3/stm32f3_hal_lowlevel.c **** 
 970:.././hal/stm32f3/stm32f3_hal_lowlevel.c **** 
 971:.././hal/stm32f3/stm32f3_hal_lowlevel.c **** 
 972:.././hal/stm32f3/stm32f3_hal_lowlevel.c **** /**
 973:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   * @brief Initialize the UART mode according to the specified
 974:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   *        parameters in the UART_InitTypeDef and initialize the associated handle.
 975:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   * @param huart: UART handle.
 976:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   * @retval HAL status
 977:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   */
 978:.././hal/stm32f3/stm32f3_hal_lowlevel.c **** HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
 979:.././hal/stm32f3/stm32f3_hal_lowlevel.c **** {
 980:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   /* Check the UART handle allocation */
 981:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   if(huart == NULL)
 982:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   {
 983:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****     return HAL_ERROR;
 984:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   }
 985:.././hal/stm32f3/stm32f3_hal_lowlevel.c **** 
 986:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   if(huart->Init.HwFlowCtl != UART_HWCONTROL_NONE)
 987:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   {
 988:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****     /* Check the parameters */
 989:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****     assert_param(IS_UART_HWFLOW_INSTANCE(huart->Instance));
 990:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   }
 991:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   else
 992:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   {
 993:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****     /* Check the parameters */
 994:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****     assert_param(IS_UART_INSTANCE(huart->Instance));
 995:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   }
 996:.././hal/stm32f3/stm32f3_hal_lowlevel.c **** 
 997:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   if(huart->gState == HAL_UART_STATE_RESET)
 998:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   {
 999:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****     /* Allocate lock resource and initialize it */
1000:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****     huart->Lock = HAL_UNLOCKED;
1001:.././hal/stm32f3/stm32f3_hal_lowlevel.c **** 
1002:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****     /* Init the low level hardware : GPIO, CLOCK */
1003:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****     //HAL_UART_MspInit(huart);
1004:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   }
1005:.././hal/stm32f3/stm32f3_hal_lowlevel.c **** 
1006:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   huart->gState = HAL_UART_STATE_BUSY;
1007:.././hal/stm32f3/stm32f3_hal_lowlevel.c **** 
1008:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   /* Disable the Peripheral */
1009:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   __HAL_UART_DISABLE(huart);
1010:.././hal/stm32f3/stm32f3_hal_lowlevel.c **** 
1011:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   /* Set the UART Communication parameters */
1012:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   if (UART_SetConfig(huart) == HAL_ERROR)
1013:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   {
1014:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****     return HAL_ERROR;
1015:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   }
1016:.././hal/stm32f3/stm32f3_hal_lowlevel.c **** 
1017:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
1018:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   {
1019:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****     //UART_AdvFeatureConfig(huart);
1020:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   }
1021:.././hal/stm32f3/stm32f3_hal_lowlevel.c **** 
1022:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   /* In asynchronous mode, the following bits must be kept cleared:
1023:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   - LINEN and CLKEN bits in the USART_CR2 register,
1024:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
1025:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
1026:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
1027:.././hal/stm32f3/stm32f3_hal_lowlevel.c **** 
1028:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   /* Enable the Peripheral */
1029:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   __HAL_UART_ENABLE(huart);
1030:.././hal/stm32f3/stm32f3_hal_lowlevel.c **** 
1031:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
1032:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   return UART_CheckIdleState(huart);
1033:.././hal/stm32f3/stm32f3_hal_lowlevel.c **** }
1034:.././hal/stm32f3/stm32f3_hal_lowlevel.c **** 
1035:.././hal/stm32f3/stm32f3_hal_lowlevel.c **** /**
1036:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   * @brief  Handle UART Communication Timeout.
1037:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   * @param  huart UART handle.
1038:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   * @param  Flag Specifies the UART flag to check
1039:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   * @param  Status Flag status (SET or RESET)
1040:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   * @param  Tickstart Tick start value
1041:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   * @param  Timeout Timeout duration
1042:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   * @retval HAL status
1043:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   */
1044:.././hal/stm32f3/stm32f3_hal_lowlevel.c **** HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus 
1045:.././hal/stm32f3/stm32f3_hal_lowlevel.c **** {
 2481              		.loc 1 1045 0
 2482              		.cfi_startproc
 2483              		@ args = 4, pretend = 0, frame = 0
 2484              		@ frame_needed = 0, uses_anonymous_args = 0
 2485              	.LVL247:
 2486 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 2487              	.LCFI8:
 2488              		.cfi_def_cfa_offset 24
 2489              		.cfi_offset 3, -24
 2490              		.cfi_offset 4, -20
 2491              		.cfi_offset 5, -16
 2492              		.cfi_offset 6, -12
 2493              		.cfi_offset 7, -8
 2494              		.cfi_offset 14, -4
 2495 0002 069D     		ldr	r5, [sp, #24]
 2496 0004 0446     		mov	r4, r0
 2497 0006 1646     		mov	r6, r2
 2498 0008 1F46     		mov	r7, r3
 2499              	.LVL248:
 2500              	.L308:
1046:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   /* Wait until flag is set */
1047:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 2501              		.loc 1 1047 0
 2502 000a 2068     		ldr	r0, [r4]
 2503              	.L309:
 2504 000c C269     		ldr	r2, [r0, #28]
 2505 000e 31EA0203 		bics	r3, r1, r2
 2506 0012 0CBF     		ite	eq
 2507 0014 0122     		moveq	r2, #1
 2508 0016 0022     		movne	r2, #0
 2509 0018 B242     		cmp	r2, r6
 2510 001a 1BD1     		bne	.L316
1048:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   {
1049:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****     /* Check for the Timeout */
1050:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****     if(Timeout != HAL_MAX_DELAY)
 2511              		.loc 1 1050 0
 2512 001c 6B1C     		adds	r3, r5, #1
 2513 001e F5D0     		beq	.L309
1051:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****     {
1052:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****       if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 2514              		.loc 1 1052 0
 2515 0020 95B9     		cbnz	r5, .L310
 2516              	.L312:
 2517              	.LVL249:
 2518              	.LBB305:
 2519              	.LBB306:
1053:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****       {
1054:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****         /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for t
1055:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****         CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 2520              		.loc 1 1055 0
 2521 0022 2368     		ldr	r3, [r4]
 2522 0024 1A68     		ldr	r2, [r3]
 2523 0026 22F4D072 		bic	r2, r2, #416
 2524 002a 1A60     		str	r2, [r3]
1056:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****         CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 2525              		.loc 1 1056 0
 2526 002c 9A68     		ldr	r2, [r3, #8]
 2527 002e 22F00102 		bic	r2, r2, #1
 2528 0032 9A60     		str	r2, [r3, #8]
1057:.././hal/stm32f3/stm32f3_hal_lowlevel.c **** 
1058:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****         huart->gState  = HAL_UART_STATE_READY;
 2529              		.loc 1 1058 0
 2530 0034 2023     		movs	r3, #32
 2531 0036 84F86930 		strb	r3, [r4, #105]
1059:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****         huart->RxState = HAL_UART_STATE_READY;
 2532              		.loc 1 1059 0
 2533 003a 84F86A30 		strb	r3, [r4, #106]
1060:.././hal/stm32f3/stm32f3_hal_lowlevel.c **** 
1061:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****         /* Process Unlocked */
1062:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****         __HAL_UNLOCK(huart);
 2534              		.loc 1 1062 0
 2535 003e 0023     		movs	r3, #0
 2536 0040 84F86830 		strb	r3, [r4, #104]
 2537              	.LVL250:
 2538 0044 0320     		movs	r0, #3
 2539 0046 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 2540              	.LVL251:
 2541              	.L310:
 2542              	.LBE306:
 2543              	.LBE305:
1052:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****       {
 2544              		.loc 1 1052 0 discriminator 1
 2545 0048 FFF7FEFF 		bl	HAL_GetTick
 2546              	.LVL252:
 2547 004c C01B     		subs	r0, r0, r7
 2548 004e 8542     		cmp	r5, r0
 2549 0050 DBD2     		bcs	.L308
 2550 0052 E6E7     		b	.L312
 2551              	.L316:
1063:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****         return HAL_TIMEOUT;
1064:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****       }
1065:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****     }
1066:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   }
1067:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   return HAL_OK;
 2552              		.loc 1 1067 0
 2553 0054 0020     		movs	r0, #0
1068:.././hal/stm32f3/stm32f3_hal_lowlevel.c **** }
 2554              		.loc 1 1068 0
 2555 0056 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 2556              		.cfi_endproc
 2557              	.LFE138:
 2559              		.section	.text.UART_CheckIdleState,"ax",%progbits
 2560              		.align	1
 2561              		.global	UART_CheckIdleState
 2562              		.thumb
 2563              		.thumb_func
 2565              	UART_CheckIdleState:
 2566              	.LFB136:
 930:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   uint32_t tickstart = 0U;
 2567              		.loc 1 930 0
 2568              		.cfi_startproc
 2569              		@ args = 0, pretend = 0, frame = 0
 2570              		@ frame_needed = 0, uses_anonymous_args = 0
 2571              	.LVL253:
 2572 0000 37B5     		push	{r0, r1, r2, r4, r5, lr}
 2573              	.LCFI9:
 2574              		.cfi_def_cfa_offset 24
 2575              		.cfi_offset 4, -12
 2576              		.cfi_offset 5, -8
 2577              		.cfi_offset 14, -4
 930:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   uint32_t tickstart = 0U;
 2578              		.loc 1 930 0
 2579 0002 0446     		mov	r4, r0
 934:.././hal/stm32f3/stm32f3_hal_lowlevel.c **** 
 2580              		.loc 1 934 0
 2581 0004 0021     		movs	r1, #0
 2582 0006 C166     		str	r1, [r0, #108]
 937:.././hal/stm32f3/stm32f3_hal_lowlevel.c **** 
 2583              		.loc 1 937 0
 2584 0008 FFF7FEFF 		bl	HAL_GetTick
 2585              	.LVL254:
 940:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   {
 2586              		.loc 1 940 0
 2587 000c 2368     		ldr	r3, [r4]
 2588 000e 1B68     		ldr	r3, [r3]
 2589 0010 1A07     		lsls	r2, r3, #28
 937:.././hal/stm32f3/stm32f3_hal_lowlevel.c **** 
 2590              		.loc 1 937 0
 2591 0012 0546     		mov	r5, r0
 2592              	.LVL255:
 940:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   {
 2593              		.loc 1 940 0
 2594 0014 04D4     		bmi	.L318
 2595              	.LVL256:
 2596              	.L321:
 950:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   {
 2597              		.loc 1 950 0
 2598 0016 2368     		ldr	r3, [r4]
 2599 0018 1B68     		ldr	r3, [r3]
 2600 001a 5B07     		lsls	r3, r3, #29
 2601 001c 1AD5     		bpl	.L320
 2602 001e 0DE0     		b	.L327
 2603              	.LVL257:
 2604              	.L318:
 943:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****     {
 2605              		.loc 1 943 0
 2606 0020 6FF07E43 		mvn	r3, #-33554432
 2607 0024 0093     		str	r3, [sp]
 2608 0026 0A46     		mov	r2, r1
 2609 0028 0346     		mov	r3, r0
 2610 002a 4FF40011 		mov	r1, #2097152
 2611 002e 2046     		mov	r0, r4
 2612              	.LVL258:
 2613 0030 FFF7FEFF 		bl	UART_WaitOnFlagUntilTimeout
 2614              	.LVL259:
 2615 0034 0028     		cmp	r0, #0
 2616 0036 EED0     		beq	.L321
 2617              	.L323:
 946:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****     }
 2618              		.loc 1 946 0
 2619 0038 0320     		movs	r0, #3
 2620 003a 13E0     		b	.L322
 2621              	.L327:
 953:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****     {
 2622              		.loc 1 953 0
 2623 003c 6FF07E43 		mvn	r3, #-33554432
 2624 0040 0093     		str	r3, [sp]
 2625 0042 0022     		movs	r2, #0
 2626 0044 2B46     		mov	r3, r5
 2627 0046 4FF48001 		mov	r1, #4194304
 2628 004a 2046     		mov	r0, r4
 2629 004c FFF7FEFF 		bl	UART_WaitOnFlagUntilTimeout
 2630              	.LVL260:
 2631 0050 0028     		cmp	r0, #0
 2632 0052 F1D1     		bne	.L323
 2633              	.L320:
 961:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   huart->RxState = HAL_UART_STATE_READY;
 2634              		.loc 1 961 0
 2635 0054 2023     		movs	r3, #32
 965:.././hal/stm32f3/stm32f3_hal_lowlevel.c **** 
 2636              		.loc 1 965 0
 2637 0056 0020     		movs	r0, #0
 961:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   huart->RxState = HAL_UART_STATE_READY;
 2638              		.loc 1 961 0
 2639 0058 84F86930 		strb	r3, [r4, #105]
 965:.././hal/stm32f3/stm32f3_hal_lowlevel.c **** 
 2640              		.loc 1 965 0
 2641 005c 84F86800 		strb	r0, [r4, #104]
 962:.././hal/stm32f3/stm32f3_hal_lowlevel.c **** 
 2642              		.loc 1 962 0
 2643 0060 84F86A30 		strb	r3, [r4, #106]
 2644              	.L322:
 968:.././hal/stm32f3/stm32f3_hal_lowlevel.c **** 
 2645              		.loc 1 968 0
 2646 0064 03B0     		add	sp, sp, #12
 2647              	.LCFI10:
 2648              		.cfi_def_cfa_offset 12
 2649              		@ sp needed
 2650 0066 30BD     		pop	{r4, r5, pc}
 2651              		.cfi_endproc
 2652              	.LFE136:
 2654              		.section	.text.HAL_UART_Init,"ax",%progbits
 2655              		.align	1
 2656              		.global	HAL_UART_Init
 2657              		.thumb
 2658              		.thumb_func
 2660              	HAL_UART_Init:
 2661              	.LFB137:
 979:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   /* Check the UART handle allocation */
 2662              		.loc 1 979 0
 2663              		.cfi_startproc
 2664              		@ args = 0, pretend = 0, frame = 0
 2665              		@ frame_needed = 0, uses_anonymous_args = 0
 2666              	.LVL261:
 2667 0000 10B5     		push	{r4, lr}
 2668              	.LCFI11:
 2669              		.cfi_def_cfa_offset 8
 2670              		.cfi_offset 4, -8
 2671              		.cfi_offset 14, -4
 981:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   {
 2672              		.loc 1 981 0
 2673 0002 0446     		mov	r4, r0
 2674 0004 28B3     		cbz	r0, .L330
 997:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   {
 2675              		.loc 1 997 0
 2676 0006 90F86930 		ldrb	r3, [r0, #105]	@ zero_extendqisi2
 2677 000a 03F0FF02 		and	r2, r3, #255
 2678 000e 0BB9     		cbnz	r3, .L331
1000:.././hal/stm32f3/stm32f3_hal_lowlevel.c **** 
 2679              		.loc 1 1000 0
 2680 0010 80F86820 		strb	r2, [r0, #104]
 2681              	.L331:
1009:.././hal/stm32f3/stm32f3_hal_lowlevel.c **** 
 2682              		.loc 1 1009 0
 2683 0014 2268     		ldr	r2, [r4]
1006:.././hal/stm32f3/stm32f3_hal_lowlevel.c **** 
 2684              		.loc 1 1006 0
 2685 0016 2423     		movs	r3, #36
 2686 0018 84F86930 		strb	r3, [r4, #105]
1009:.././hal/stm32f3/stm32f3_hal_lowlevel.c **** 
 2687              		.loc 1 1009 0
 2688 001c 1368     		ldr	r3, [r2]
 2689 001e 23F00103 		bic	r3, r3, #1
 2690 0022 1360     		str	r3, [r2]
1012:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   {
 2691              		.loc 1 1012 0
 2692 0024 2046     		mov	r0, r4
 2693              	.LVL262:
 2694 0026 FFF7FEFF 		bl	UART_SetConfig
 2695              	.LVL263:
 2696 002a 0128     		cmp	r0, #1
 2697 002c 11D0     		beq	.L330
1025:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 2698              		.loc 1 1025 0
 2699 002e 2368     		ldr	r3, [r4]
 2700 0030 5A68     		ldr	r2, [r3, #4]
 2701 0032 22F49042 		bic	r2, r2, #18432
 2702 0036 5A60     		str	r2, [r3, #4]
1026:.././hal/stm32f3/stm32f3_hal_lowlevel.c **** 
 2703              		.loc 1 1026 0
 2704 0038 9A68     		ldr	r2, [r3, #8]
 2705 003a 22F02A02 		bic	r2, r2, #42
 2706 003e 9A60     		str	r2, [r3, #8]
1029:.././hal/stm32f3/stm32f3_hal_lowlevel.c **** 
 2707              		.loc 1 1029 0
 2708 0040 1A68     		ldr	r2, [r3]
 2709 0042 42F00102 		orr	r2, r2, #1
1032:.././hal/stm32f3/stm32f3_hal_lowlevel.c **** }
 2710              		.loc 1 1032 0
 2711 0046 2046     		mov	r0, r4
1029:.././hal/stm32f3/stm32f3_hal_lowlevel.c **** 
 2712              		.loc 1 1029 0
 2713 0048 1A60     		str	r2, [r3]
1033:.././hal/stm32f3/stm32f3_hal_lowlevel.c **** 
 2714              		.loc 1 1033 0
 2715 004a BDE81040 		pop	{r4, lr}
 2716              	.LCFI12:
 2717              		.cfi_remember_state
 2718              		.cfi_restore 14
 2719              		.cfi_restore 4
 2720              		.cfi_def_cfa_offset 0
 2721              	.LVL264:
1032:.././hal/stm32f3/stm32f3_hal_lowlevel.c **** }
 2722              		.loc 1 1032 0
 2723 004e FFF7FEBF 		b	UART_CheckIdleState
 2724              	.LVL265:
 2725              	.L330:
 2726              	.LCFI13:
 2727              		.cfi_restore_state
1033:.././hal/stm32f3/stm32f3_hal_lowlevel.c **** 
 2728              		.loc 1 1033 0
 2729 0052 0120     		movs	r0, #1
 2730 0054 10BD     		pop	{r4, pc}
 2731              		.cfi_endproc
 2732              	.LFE137:
 2734              		.section	.text.HAL_UART_Transmit,"ax",%progbits
 2735              		.align	1
 2736              		.global	HAL_UART_Transmit
 2737              		.thumb
 2738              		.thumb_func
 2740              	HAL_UART_Transmit:
 2741              	.LFB139:
1069:.././hal/stm32f3/stm32f3_hal_lowlevel.c **** 
1070:.././hal/stm32f3/stm32f3_hal_lowlevel.c **** 
1071:.././hal/stm32f3/stm32f3_hal_lowlevel.c **** 
1072:.././hal/stm32f3/stm32f3_hal_lowlevel.c **** /**
1073:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   * @brief Send an amount of data in blocking mode.
1074:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   * @param huart: UART handle.
1075:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   * @param pData: Pointer to data buffer.
1076:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   * @param Size: Amount of data to be sent.
1077:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   * @param Timeout: Timeout duration.
1078:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   * @retval HAL status
1079:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   */
1080:.././hal/stm32f3/stm32f3_hal_lowlevel.c **** HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint3
1081:.././hal/stm32f3/stm32f3_hal_lowlevel.c **** {
 2742              		.loc 1 1081 0
 2743              		.cfi_startproc
 2744              		@ args = 0, pretend = 0, frame = 0
 2745              		@ frame_needed = 0, uses_anonymous_args = 0
 2746              	.LVL266:
 2747 0000 F7B5     		push	{r0, r1, r2, r4, r5, r6, r7, lr}
 2748              	.LCFI14:
 2749              		.cfi_def_cfa_offset 32
 2750              		.cfi_offset 4, -20
 2751              		.cfi_offset 5, -16
 2752              		.cfi_offset 6, -12
 2753              		.cfi_offset 7, -8
 2754              		.cfi_offset 14, -4
 2755              		.loc 1 1081 0
 2756 0002 1F46     		mov	r7, r3
1082:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   uint16_t* tmp;
1083:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   uint32_t tickstart = 0U;
1084:.././hal/stm32f3/stm32f3_hal_lowlevel.c **** 
1085:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   /* Check that a Tx process is not already ongoing */
1086:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   if(huart->gState == HAL_UART_STATE_READY)
 2757              		.loc 1 1086 0
 2758 0004 90F86930 		ldrb	r3, [r0, #105]	@ zero_extendqisi2
 2759              	.LVL267:
 2760 0008 202B     		cmp	r3, #32
1081:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   uint16_t* tmp;
 2761              		.loc 1 1081 0
 2762 000a 0D46     		mov	r5, r1
 2763 000c 0446     		mov	r4, r0
 2764 000e 1146     		mov	r1, r2
 2765              	.LVL268:
 2766              		.loc 1 1086 0
 2767 0010 4BD1     		bne	.L347
1087:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   {
1088:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****     if((pData == NULL ) || (Size == 0U))
 2768              		.loc 1 1088 0
 2769 0012 002D     		cmp	r5, #0
 2770 0014 47D0     		beq	.L346
 2771              		.loc 1 1088 0 is_stmt 0 discriminator 1
 2772 0016 002A     		cmp	r2, #0
 2773 0018 45D0     		beq	.L346
1089:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****     {
1090:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****       return  HAL_ERROR;
1091:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****     }
1092:.././hal/stm32f3/stm32f3_hal_lowlevel.c **** 
1093:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****     /* Process Locked */
1094:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****     __HAL_LOCK(huart);
 2774              		.loc 1 1094 0 is_stmt 1
 2775 001a 90F86830 		ldrb	r3, [r0, #104]	@ zero_extendqisi2
 2776 001e 012B     		cmp	r3, #1
 2777 0020 43D0     		beq	.L347
 2778              		.loc 1 1094 0 is_stmt 0 discriminator 2
 2779 0022 0123     		movs	r3, #1
 2780 0024 80F86830 		strb	r3, [r0, #104]
1095:.././hal/stm32f3/stm32f3_hal_lowlevel.c **** 
1096:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****     huart->ErrorCode = HAL_UART_ERROR_NONE;
 2781              		.loc 1 1096 0 is_stmt 1 discriminator 2
 2782 0028 0023     		movs	r3, #0
 2783 002a C366     		str	r3, [r0, #108]
1097:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****     huart->gState = HAL_UART_STATE_BUSY_TX;
 2784              		.loc 1 1097 0 discriminator 2
 2785 002c 2123     		movs	r3, #33
 2786 002e 80F86930 		strb	r3, [r0, #105]
1098:.././hal/stm32f3/stm32f3_hal_lowlevel.c **** 
1099:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****     /* Init tickstart for timeout managment*/
1100:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****     tickstart = HAL_GetTick();
 2787              		.loc 1 1100 0 discriminator 2
 2788 0032 FFF7FEFF 		bl	HAL_GetTick
 2789              	.LVL269:
 2790 0036 0646     		mov	r6, r0
 2791              	.LVL270:
1101:.././hal/stm32f3/stm32f3_hal_lowlevel.c **** 
1102:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****     huart->TxXferSize = Size;
 2792              		.loc 1 1102 0 discriminator 2
 2793 0038 A4F85010 		strh	r1, [r4, #80]	@ movhi
1103:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****     huart->TxXferCount = Size;
 2794              		.loc 1 1103 0 discriminator 2
 2795 003c A4F85210 		strh	r1, [r4, #82]	@ movhi
 2796              	.LVL271:
 2797              	.L338:
1104:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****     while(huart->TxXferCount > 0U)
 2798              		.loc 1 1104 0
 2799 0040 B4F85220 		ldrh	r2, [r4, #82]
 2800 0044 92B2     		uxth	r2, r2
 2801 0046 02B3     		cbz	r2, .L348
1105:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****     {
1106:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****       huart->TxXferCount--;
 2802              		.loc 1 1106 0
 2803 0048 B4F85230 		ldrh	r3, [r4, #82]
1107:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****       if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 2804              		.loc 1 1107 0
 2805 004c 0097     		str	r7, [sp]
1106:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****       if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 2806              		.loc 1 1106 0
 2807 004e 013B     		subs	r3, r3, #1
 2808 0050 9BB2     		uxth	r3, r3
 2809 0052 A4F85230 		strh	r3, [r4, #82]	@ movhi
 2810              		.loc 1 1107 0
 2811 0056 0022     		movs	r2, #0
 2812 0058 3346     		mov	r3, r6
 2813 005a 8021     		movs	r1, #128
 2814 005c 2046     		mov	r0, r4
 2815 005e FFF7FEFF 		bl	UART_WaitOnFlagUntilTimeout
 2816              	.LVL272:
 2817 0062 08B1     		cbz	r0, .L339
 2818              	.L343:
1108:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****       {
1109:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****         return HAL_TIMEOUT;
 2819              		.loc 1 1109 0
 2820 0064 0320     		movs	r0, #3
 2821 0066 21E0     		b	.L337
 2822              	.L339:
1110:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****       }
1111:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****       if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE
 2823              		.loc 1 1111 0
 2824 0068 A368     		ldr	r3, [r4, #8]
 2825 006a 2268     		ldr	r2, [r4]
 2826 006c B3F5805F 		cmp	r3, #4096
 2827 0070 07D1     		bne	.L340
 2828              		.loc 1 1111 0 is_stmt 0 discriminator 1
 2829 0072 2369     		ldr	r3, [r4, #16]
 2830 0074 2BB9     		cbnz	r3, .L340
 2831              	.LVL273:
1112:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****       {
1113:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****         tmp = (uint16_t*) pData;
1114:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****         huart->Instance->TDR = (*tmp & (uint16_t)0x01FFU);
 2832              		.loc 1 1114 0 is_stmt 1
 2833 0076 35F8023B 		ldrh	r3, [r5], #2
 2834              	.LVL274:
 2835 007a C3F30803 		ubfx	r3, r3, #0, #9
 2836 007e 1385     		strh	r3, [r2, #40]	@ movhi
 2837              	.LVL275:
1115:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****         pData += 2U;
 2838              		.loc 1 1115 0
 2839 0080 DEE7     		b	.L338
 2840              	.LVL276:
 2841              	.L340:
1116:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****       }
1117:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****       else
1118:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****       {
1119:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****         huart->Instance->TDR = (*pData++ & (uint8_t)0xFFU);
 2842              		.loc 1 1119 0
 2843 0082 2B78     		ldrb	r3, [r5]	@ zero_extendqisi2
 2844 0084 1385     		strh	r3, [r2, #40]	@ movhi
 2845 0086 0135     		adds	r5, r5, #1
 2846              	.LVL277:
 2847 0088 DAE7     		b	.L338
 2848              	.L348:
1120:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****       }
1121:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****     }
1122:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****     if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 2849              		.loc 1 1122 0
 2850 008a 0097     		str	r7, [sp]
 2851 008c 3346     		mov	r3, r6
 2852 008e 4021     		movs	r1, #64
 2853 0090 2046     		mov	r0, r4
 2854 0092 FFF7FEFF 		bl	UART_WaitOnFlagUntilTimeout
 2855              	.LVL278:
 2856 0096 0028     		cmp	r0, #0
 2857 0098 E4D1     		bne	.L343
1123:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****     {
1124:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****       return HAL_TIMEOUT;
1125:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****     }
1126:.././hal/stm32f3/stm32f3_hal_lowlevel.c **** 
1127:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****     /* At end of Tx process, restore huart->gState to Ready */
1128:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****     huart->gState = HAL_UART_STATE_READY;
 2858              		.loc 1 1128 0
 2859 009a 2023     		movs	r3, #32
 2860 009c 84F86930 		strb	r3, [r4, #105]
1129:.././hal/stm32f3/stm32f3_hal_lowlevel.c **** 
1130:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****     /* Process Unlocked */
1131:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****     __HAL_UNLOCK(huart);
 2861              		.loc 1 1131 0
 2862 00a0 84F86800 		strb	r0, [r4, #104]
1132:.././hal/stm32f3/stm32f3_hal_lowlevel.c **** 
1133:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****     return HAL_OK;
 2863              		.loc 1 1133 0
 2864 00a4 02E0     		b	.L337
 2865              	.LVL279:
 2866              	.L346:
1090:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****     }
 2867              		.loc 1 1090 0
 2868 00a6 0120     		movs	r0, #1
 2869              	.LVL280:
 2870 00a8 00E0     		b	.L337
 2871              	.LVL281:
 2872              	.L347:
1134:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   }
1135:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   else
1136:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   {
1137:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****     return HAL_BUSY;
 2873              		.loc 1 1137 0
 2874 00aa 0220     		movs	r0, #2
 2875              	.LVL282:
 2876              	.L337:
1138:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   }
1139:.././hal/stm32f3/stm32f3_hal_lowlevel.c **** }
 2877              		.loc 1 1139 0
 2878 00ac 03B0     		add	sp, sp, #12
 2879              	.LCFI15:
 2880              		.cfi_def_cfa_offset 20
 2881              		@ sp needed
 2882 00ae F0BD     		pop	{r4, r5, r6, r7, pc}
 2883              		.cfi_endproc
 2884              	.LFE139:
 2886              		.section	.text.HAL_UART_Receive,"ax",%progbits
 2887              		.align	1
 2888              		.global	HAL_UART_Receive
 2889              		.thumb
 2890              		.thumb_func
 2892              	HAL_UART_Receive:
 2893              	.LFB140:
1140:.././hal/stm32f3/stm32f3_hal_lowlevel.c **** 
1141:.././hal/stm32f3/stm32f3_hal_lowlevel.c **** 
1142:.././hal/stm32f3/stm32f3_hal_lowlevel.c **** 
1143:.././hal/stm32f3/stm32f3_hal_lowlevel.c **** /**
1144:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   * @brief Receive an amount of data in blocking mode.
1145:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   * @param huart: UART handle.
1146:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   * @param pData: pointer to data buffer.
1147:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   * @param Size: amount of data to be received.
1148:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   * @param Timeout: Timeout duration.
1149:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   * @retval HAL status
1150:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   */
1151:.././hal/stm32f3/stm32f3_hal_lowlevel.c **** HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32
1152:.././hal/stm32f3/stm32f3_hal_lowlevel.c **** {
 2894              		.loc 1 1152 0
 2895              		.cfi_startproc
 2896              		@ args = 0, pretend = 0, frame = 0
 2897              		@ frame_needed = 0, uses_anonymous_args = 0
 2898              	.LVL283:
 2899 0000 2DE9F341 		push	{r0, r1, r4, r5, r6, r7, r8, lr}
 2900              	.LCFI16:
 2901              		.cfi_def_cfa_offset 32
 2902              		.cfi_offset 4, -24
 2903              		.cfi_offset 5, -20
 2904              		.cfi_offset 6, -16
 2905              		.cfi_offset 7, -12
 2906              		.cfi_offset 8, -8
 2907              		.cfi_offset 14, -4
 2908              		.loc 1 1152 0
 2909 0004 9846     		mov	r8, r3
1153:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   uint16_t* tmp;
1154:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   uint16_t uhMask;
1155:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   uint32_t tickstart = 0U;
1156:.././hal/stm32f3/stm32f3_hal_lowlevel.c **** 
1157:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   /* Check that a Rx process is not already ongoing */
1158:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   if(huart->RxState == HAL_UART_STATE_READY)
 2910              		.loc 1 1158 0
 2911 0006 90F86A30 		ldrb	r3, [r0, #106]	@ zero_extendqisi2
 2912              	.LVL284:
 2913 000a 202B     		cmp	r3, #32
1152:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   uint16_t* tmp;
 2914              		.loc 1 1152 0
 2915 000c 0D46     		mov	r5, r1
 2916 000e 0446     		mov	r4, r0
 2917 0010 1146     		mov	r1, r2
 2918              	.LVL285:
 2919              		.loc 1 1158 0
 2920 0012 5AD1     		bne	.L361
1159:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   {
1160:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****     if((pData == NULL ) || (Size == 0U))
 2921              		.loc 1 1160 0
 2922 0014 002D     		cmp	r5, #0
 2923 0016 56D0     		beq	.L360
 2924              		.loc 1 1160 0 is_stmt 0 discriminator 1
 2925 0018 002A     		cmp	r2, #0
 2926 001a 54D0     		beq	.L360
1161:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****     {
1162:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****       return  HAL_ERROR;
1163:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****     }
1164:.././hal/stm32f3/stm32f3_hal_lowlevel.c **** 
1165:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****     /* Process Locked */
1166:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****     __HAL_LOCK(huart);
 2927              		.loc 1 1166 0 is_stmt 1
 2928 001c 90F86830 		ldrb	r3, [r0, #104]	@ zero_extendqisi2
 2929 0020 012B     		cmp	r3, #1
 2930 0022 52D0     		beq	.L361
 2931              		.loc 1 1166 0 is_stmt 0 discriminator 2
 2932 0024 0123     		movs	r3, #1
 2933 0026 80F86830 		strb	r3, [r0, #104]
1167:.././hal/stm32f3/stm32f3_hal_lowlevel.c **** 
1168:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****     huart->Instance->ICR = 0xFFFFFFFF;
 2934              		.loc 1 1168 0 is_stmt 1 discriminator 2
 2935 002a 0368     		ldr	r3, [r0]
 2936 002c 4FF0FF32 		mov	r2, #-1
 2937              	.LVL286:
 2938 0030 1A62     		str	r2, [r3, #32]
1169:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****     huart->ErrorCode = HAL_UART_ERROR_NONE;
 2939              		.loc 1 1169 0 discriminator 2
 2940 0032 0023     		movs	r3, #0
 2941 0034 C366     		str	r3, [r0, #108]
1170:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****     huart->RxState = HAL_UART_STATE_BUSY_RX;
 2942              		.loc 1 1170 0 discriminator 2
 2943 0036 2223     		movs	r3, #34
 2944 0038 80F86A30 		strb	r3, [r0, #106]
1171:.././hal/stm32f3/stm32f3_hal_lowlevel.c **** 
1172:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****     /* Init tickstart for timeout managment*/
1173:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****     tickstart = HAL_GetTick();
 2945              		.loc 1 1173 0 discriminator 2
 2946 003c FFF7FEFF 		bl	HAL_GetTick
 2947              	.LVL287:
1174:.././hal/stm32f3/stm32f3_hal_lowlevel.c **** 
1175:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****     huart->RxXferSize = Size;
1176:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****     huart->RxXferCount = Size;
1177:.././hal/stm32f3/stm32f3_hal_lowlevel.c **** 
1178:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****     /* Computation of UART mask to apply to RDR register */
1179:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****     UART_MASK_COMPUTATION(huart);
 2948              		.loc 1 1179 0 discriminator 2
 2949 0040 A368     		ldr	r3, [r4, #8]
1175:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****     huart->RxXferCount = Size;
 2950              		.loc 1 1175 0 discriminator 2
 2951 0042 A4F85810 		strh	r1, [r4, #88]	@ movhi
 2952              		.loc 1 1179 0 discriminator 2
 2953 0046 B3F5805F 		cmp	r3, #4096
1173:.././hal/stm32f3/stm32f3_hal_lowlevel.c **** 
 2954              		.loc 1 1173 0 discriminator 2
 2955 004a 0746     		mov	r7, r0
 2956              	.LVL288:
1176:.././hal/stm32f3/stm32f3_hal_lowlevel.c **** 
 2957              		.loc 1 1176 0 discriminator 2
 2958 004c A4F85A10 		strh	r1, [r4, #90]	@ movhi
 2959              		.loc 1 1179 0 discriminator 2
 2960 0050 06D1     		bne	.L351
 2961              		.loc 1 1179 0 is_stmt 0 discriminator 1
 2962 0052 2369     		ldr	r3, [r4, #16]
 2963 0054 13B9     		cbnz	r3, .L352
 2964              		.loc 1 1179 0 discriminator 3
 2965 0056 40F2FF13 		movw	r3, #511
 2966 005a 06E0     		b	.L366
 2967              	.L352:
 2968              		.loc 1 1179 0 discriminator 4
 2969 005c FF23     		movs	r3, #255
 2970 005e 04E0     		b	.L366
 2971              	.L351:
 2972              		.loc 1 1179 0 discriminator 2
 2973 0060 2BB9     		cbnz	r3, .L353
 2974              		.loc 1 1179 0 discriminator 5
 2975 0062 2369     		ldr	r3, [r4, #16]
 2976 0064 002B     		cmp	r3, #0
 2977 0066 F9D0     		beq	.L352
 2978              		.loc 1 1179 0 discriminator 7
 2979 0068 7F23     		movs	r3, #127
 2980              	.L366:
 2981 006a A4F85C30 		strh	r3, [r4, #92]	@ movhi
 2982              	.L353:
1180:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****     uhMask = huart->Mask;
 2983              		.loc 1 1180 0 is_stmt 1
 2984 006e B4F85C60 		ldrh	r6, [r4, #92]
 2985              	.LVL289:
 2986              	.L354:
1181:.././hal/stm32f3/stm32f3_hal_lowlevel.c **** 
1182:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****     /* as long as data have to be received */
1183:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****     while(huart->RxXferCount > 0U)
 2987              		.loc 1 1183 0
 2988 0072 B4F85A00 		ldrh	r0, [r4, #90]
 2989 0076 80B2     		uxth	r0, r0
 2990 0078 F8B1     		cbz	r0, .L367
1184:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****     {
1185:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****       huart->RxXferCount--;
 2991              		.loc 1 1185 0
 2992 007a B4F85A30 		ldrh	r3, [r4, #90]
1186:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****       if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 2993              		.loc 1 1186 0
 2994 007e CDF80080 		str	r8, [sp]
1185:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****       if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 2995              		.loc 1 1185 0
 2996 0082 013B     		subs	r3, r3, #1
 2997 0084 9BB2     		uxth	r3, r3
 2998 0086 A4F85A30 		strh	r3, [r4, #90]	@ movhi
 2999              		.loc 1 1186 0
 3000 008a 0022     		movs	r2, #0
 3001 008c 3B46     		mov	r3, r7
 3002 008e 2021     		movs	r1, #32
 3003 0090 2046     		mov	r0, r4
 3004 0092 FFF7FEFF 		bl	UART_WaitOnFlagUntilTimeout
 3005              	.LVL290:
 3006 0096 D0B9     		cbnz	r0, .L362
1187:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****       {
1188:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****         return HAL_TIMEOUT;
1189:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****       }
1190:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****       if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE
 3007              		.loc 1 1190 0
 3008 0098 A368     		ldr	r3, [r4, #8]
 3009 009a B3F5805F 		cmp	r3, #4096
 3010 009e 2368     		ldr	r3, [r4]
 3011 00a0 06D1     		bne	.L355
 3012              		.loc 1 1190 0 is_stmt 0 discriminator 1
 3013 00a2 2269     		ldr	r2, [r4, #16]
 3014 00a4 22B9     		cbnz	r2, .L355
 3015              	.LVL291:
1191:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****       {
1192:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****         tmp = (uint16_t*) pData ;
1193:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****         *tmp = (uint16_t)(huart->Instance->RDR & uhMask);
 3016              		.loc 1 1193 0 is_stmt 1
 3017 00a6 9B8C     		ldrh	r3, [r3, #36]
 3018 00a8 3340     		ands	r3, r3, r6
 3019 00aa 25F8023B 		strh	r3, [r5], #2	@ movhi
 3020              	.LVL292:
1194:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****         pData +=2U;
 3021              		.loc 1 1194 0
 3022 00ae E0E7     		b	.L354
 3023              	.LVL293:
 3024              	.L355:
1195:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****       }
1196:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****       else
1197:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****       {
1198:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****         *pData++ = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 3025              		.loc 1 1198 0
 3026 00b0 9B8C     		ldrh	r3, [r3, #36]
 3027 00b2 3340     		ands	r3, r3, r6
 3028 00b4 2B70     		strb	r3, [r5]
 3029 00b6 0135     		adds	r5, r5, #1
 3030              	.LVL294:
 3031 00b8 DBE7     		b	.L354
 3032              	.L367:
1199:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****       }
1200:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****     }
1201:.././hal/stm32f3/stm32f3_hal_lowlevel.c **** 
1202:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****     /* At end of Rx process, restore huart->RxState to Ready */
1203:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****     huart->RxState = HAL_UART_STATE_READY;
 3033              		.loc 1 1203 0
 3034 00ba 2023     		movs	r3, #32
 3035 00bc 84F86A30 		strb	r3, [r4, #106]
1204:.././hal/stm32f3/stm32f3_hal_lowlevel.c **** 
1205:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****     /* Process Unlocked */
1206:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****     __HAL_UNLOCK(huart);
 3036              		.loc 1 1206 0
 3037 00c0 84F86800 		strb	r0, [r4, #104]
1207:.././hal/stm32f3/stm32f3_hal_lowlevel.c **** 
1208:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****     return HAL_OK;
 3038              		.loc 1 1208 0
 3039 00c4 04E0     		b	.L350
 3040              	.LVL295:
 3041              	.L360:
1162:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****     }
 3042              		.loc 1 1162 0
 3043 00c6 0120     		movs	r0, #1
 3044              	.LVL296:
 3045 00c8 02E0     		b	.L350
 3046              	.LVL297:
 3047              	.L361:
1209:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   }
1210:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   else
1211:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   {
1212:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****     return HAL_BUSY;
 3048              		.loc 1 1212 0
 3049 00ca 0220     		movs	r0, #2
 3050              	.LVL298:
 3051 00cc 00E0     		b	.L350
 3052              	.LVL299:
 3053              	.L362:
1188:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****       }
 3054              		.loc 1 1188 0
 3055 00ce 0320     		movs	r0, #3
 3056              	.LVL300:
 3057              	.L350:
1213:.././hal/stm32f3/stm32f3_hal_lowlevel.c ****   }
1214:.././hal/stm32f3/stm32f3_hal_lowlevel.c **** }
 3058              		.loc 1 1214 0
 3059 00d0 02B0     		add	sp, sp, #8
 3060              	.LCFI17:
 3061              		.cfi_def_cfa_offset 24
 3062              		@ sp needed
 3063 00d2 BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 3064              		.cfi_endproc
 3065              	.LFE140:
 3067              		.global	SystemCoreClock
 3068              		.global	uwTick
 3069              		.global	hal_sys_tick
 3070              		.section	.rodata
 3071              		.set	.LANCHOR1,. + 0
 3074              	CSWTCH.80:
 3075 0000 01       		.byte	1
 3076 0001 04       		.byte	4
 3077 0002 08       		.byte	8
 3078 0003 02       		.byte	2
 3079              		.data
 3080              		.align	2
 3083              	SystemCoreClock:
 3084 0000 00127A00 		.word	8000000
 3085              		.bss
 3086              		.align	2
 3087              		.set	.LANCHOR0,. + 0
 3090              	hal_sys_tick:
 3091 0000 00000000 		.space	4
 3094              	uwTick:
 3095 0004 00000000 		.space	4
 3096              		.text
 3097              	.Letext0:
 3098              		.file 4 "/usr/include/newlib/machine/_default_types.h"
 3099              		.file 5 "/usr/include/newlib/sys/_stdint.h"
 3100              		.file 6 ".././hal/stm32f3/CMSIS/device/stm32f303xc.h"
 3101              		.file 7 ".././hal/stm32f3/CMSIS/device/stm32f3xx.h"
 3102              		.file 8 ".././hal/stm32f3/stm32f3xx_hal_def.h"
 3103              		.file 9 ".././hal/stm32f3/stm32f3xx_hal_rcc.h"
 3104              		.file 10 ".././hal/stm32f3/stm32f3xx_hal_gpio.h"
 3105              		.file 11 ".././hal/stm32f3/stm32f3xx_hal_dma.h"
 3106              		.file 12 ".././hal/stm32f3/stm32f3xx_hal_uart.h"
DEFINED SYMBOLS
                            *ABS*:0000000000000000 stm32f3_hal_lowlevel.c
     /tmp/ccEwzuKT.s:20     .text.HAL_NVIC_SetPriority:0000000000000000 $t
     /tmp/ccEwzuKT.s:25     .text.HAL_NVIC_SetPriority:0000000000000000 HAL_NVIC_SetPriority
     /tmp/ccEwzuKT.s:127    .text.HAL_NVIC_SetPriority:0000000000000060 $d
     /tmp/ccEwzuKT.s:135    .text.HAL_InitTick:0000000000000000 $t
     /tmp/ccEwzuKT.s:140    .text.HAL_InitTick:0000000000000000 HAL_InitTick
     /tmp/ccEwzuKT.s:158    .text.HAL_InitTick:0000000000000008 $d
     /tmp/ccEwzuKT.s:163    .text.HAL_GetTick:0000000000000000 $t
     /tmp/ccEwzuKT.s:168    .text.HAL_GetTick:0000000000000000 HAL_GetTick
     /tmp/ccEwzuKT.s:185    .text.HAL_GetTick:000000000000000c $d
     /tmp/ccEwzuKT.s:190    .text.HAL_IncTick:0000000000000000 $t
     /tmp/ccEwzuKT.s:195    .text.HAL_IncTick:0000000000000000 HAL_IncTick
     /tmp/ccEwzuKT.s:207    .text.HAL_RCC_GetSysClockFreq:0000000000000000 $t
     /tmp/ccEwzuKT.s:212    .text.HAL_RCC_GetSysClockFreq:0000000000000000 HAL_RCC_GetSysClockFreq
     /tmp/ccEwzuKT.s:224    .text.HAL_RCC_GetPCLK1Freq:0000000000000000 $t
     /tmp/ccEwzuKT.s:229    .text.HAL_RCC_GetPCLK1Freq:0000000000000000 HAL_RCC_GetPCLK1Freq
     /tmp/ccEwzuKT.s:241    .text.HAL_RCC_OscConfig:0000000000000000 $t
     /tmp/ccEwzuKT.s:246    .text.HAL_RCC_OscConfig:0000000000000000 HAL_RCC_OscConfig
     /tmp/ccEwzuKT.s:1027   .text.HAL_RCC_OscConfig:00000000000002f0 $d
     /tmp/ccEwzuKT.s:1033   .text.HAL_RCC_OscConfig:00000000000002fc $t
     /tmp/ccEwzuKT.s:1522   .text.HAL_RCC_OscConfig:00000000000004e0 $d
     /tmp/ccEwzuKT.s:1527   .text.HAL_RCC_ClockConfig:0000000000000000 $t
     /tmp/ccEwzuKT.s:1532   .text.HAL_RCC_ClockConfig:0000000000000000 HAL_RCC_ClockConfig
     /tmp/ccEwzuKT.s:1805   .text.HAL_RCC_ClockConfig:0000000000000140 $d
     /tmp/ccEwzuKT.s:1811   .text.HAL_RCC_GetPCLK2Freq:0000000000000000 $t
     /tmp/ccEwzuKT.s:1816   .text.HAL_RCC_GetPCLK2Freq:0000000000000000 HAL_RCC_GetPCLK2Freq
     /tmp/ccEwzuKT.s:1830   .text.HAL_GPIO_Init:0000000000000000 $t
     /tmp/ccEwzuKT.s:1835   .text.HAL_GPIO_Init:0000000000000000 HAL_GPIO_Init
     /tmp/ccEwzuKT.s:2133   .text.HAL_GPIO_Init:0000000000000188 $d
     /tmp/ccEwzuKT.s:2140   .text.HAL_GPIO_WritePin:0000000000000000 $t
     /tmp/ccEwzuKT.s:2145   .text.HAL_GPIO_WritePin:0000000000000000 HAL_GPIO_WritePin
     /tmp/ccEwzuKT.s:2166   .text.UART_SetConfig:0000000000000000 $t
     /tmp/ccEwzuKT.s:2171   .text.UART_SetConfig:0000000000000000 UART_SetConfig
     /tmp/ccEwzuKT.s:2313   .text.UART_SetConfig:00000000000000f8 $d
     /tmp/ccEwzuKT.s:2401   .text.UART_SetConfig:0000000000000162 $d
     /tmp/ccEwzuKT.s:2464   .text.UART_SetConfig:00000000000001b4 $d
     /tmp/ccEwzuKT.s:2474   .text.UART_WaitOnFlagUntilTimeout:0000000000000000 $t
     /tmp/ccEwzuKT.s:2479   .text.UART_WaitOnFlagUntilTimeout:0000000000000000 UART_WaitOnFlagUntilTimeout
     /tmp/ccEwzuKT.s:2560   .text.UART_CheckIdleState:0000000000000000 $t
     /tmp/ccEwzuKT.s:2565   .text.UART_CheckIdleState:0000000000000000 UART_CheckIdleState
     /tmp/ccEwzuKT.s:2655   .text.HAL_UART_Init:0000000000000000 $t
     /tmp/ccEwzuKT.s:2660   .text.HAL_UART_Init:0000000000000000 HAL_UART_Init
     /tmp/ccEwzuKT.s:2735   .text.HAL_UART_Transmit:0000000000000000 $t
     /tmp/ccEwzuKT.s:2740   .text.HAL_UART_Transmit:0000000000000000 HAL_UART_Transmit
     /tmp/ccEwzuKT.s:2887   .text.HAL_UART_Receive:0000000000000000 $t
     /tmp/ccEwzuKT.s:2892   .text.HAL_UART_Receive:0000000000000000 HAL_UART_Receive
     /tmp/ccEwzuKT.s:3083   .data:0000000000000000 SystemCoreClock
     /tmp/ccEwzuKT.s:3094   .bss:0000000000000004 uwTick
     /tmp/ccEwzuKT.s:3090   .bss:0000000000000000 hal_sys_tick
     /tmp/ccEwzuKT.s:3074   .rodata:0000000000000000 CSWTCH.80
     /tmp/ccEwzuKT.s:3080   .data:0000000000000000 $d
     /tmp/ccEwzuKT.s:3086   .bss:0000000000000000 $d
                     .debug_frame:0000000000000010 $d
     /tmp/ccEwzuKT.s:2323   .text.UART_SetConfig:0000000000000101 $d
     /tmp/ccEwzuKT.s:2323   .text.UART_SetConfig:0000000000000102 $t
     /tmp/ccEwzuKT.s:2410   .text.UART_SetConfig:000000000000016b $d
     /tmp/ccEwzuKT.s:2410   .text.UART_SetConfig:000000000000016c $t

NO UNDEFINED SYMBOLS
